
RoombaCommander_ATmega64.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00002920  000029b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002920  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000cb8  0080011e  0080011e  000029d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000029d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002a04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  00002a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000541a  00000000  00000000  00002ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017e0  00000000  00000000  000082f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f45  00000000  00000000  00009ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e78  00000000  00000000  0000ca18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019d6  00000000  00000000  0000d890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004f65  00000000  00000000  0000f266  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000488  00000000  00000000  000141cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__vector_12>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__vector_18>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      78:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <__vector_30>
      7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      8c:	1e 12       	cpse	r1, r30
      8e:	16 12       	cpse	r1, r22
      90:	1e 12       	cpse	r1, r30
      92:	1e 12       	cpse	r1, r30
      94:	1e 12       	cpse	r1, r30
      96:	1e 12       	cpse	r1, r30
      98:	1e 12       	cpse	r1, r30
      9a:	1e 12       	cpse	r1, r30
      9c:	1e 12       	cpse	r1, r30
      9e:	1c 12       	cpse	r1, r28
      a0:	16 12       	cpse	r1, r22
      a2:	18 12       	cpse	r1, r24
      a4:	1a 12       	cpse	r1, r26
      a6:	16 12       	cpse	r1, r22
      a8:	16 12       	cpse	r1, r22
      aa:	1e 12       	cpse	r1, r30

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d0 e1       	ldi	r29, 0x10	; 16
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e0 e2       	ldi	r30, 0x20	; 32
      c0:	f9 e2       	ldi	r31, 0x29	; 41
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	ae 31       	cpi	r26, 0x1E	; 30
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	2d e0       	ldi	r18, 0x0D	; 13
      d0:	ae e1       	ldi	r26, 0x1E	; 30
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a6 3d       	cpi	r26, 0xD6	; 214
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 3d 12 	call	0x247a	; 0x247a <main>
      e2:	0c 94 8e 14 	jmp	0x291c	; 0x291c <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <prvInitialiseCoRoutineLists>:
	return;
}
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
      ea:	cf 93       	push	r28
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
      ec:	c0 e0       	ldi	r28, 0x00	; 0
      ee:	10 c0       	rjmp	.+32     	; 0x110 <prvInitialiseCoRoutineLists+0x26>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
      f0:	8c 2f       	mov	r24, r28
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	9c 01       	movw	r18, r24
      f6:	22 0f       	add	r18, r18
      f8:	33 1f       	adc	r19, r19
      fa:	22 0f       	add	r18, r18
      fc:	33 1f       	adc	r19, r19
      fe:	22 0f       	add	r18, r18
     100:	33 1f       	adc	r19, r19
     102:	82 0f       	add	r24, r18
     104:	93 1f       	adc	r25, r19
     106:	8a 5b       	subi	r24, 0xBA	; 186
     108:	9e 4f       	sbci	r25, 0xFE	; 254
     10a:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     10e:	cf 5f       	subi	r28, 0xFF	; 255
     110:	c2 30       	cpi	r28, 0x02	; 2
     112:	70 f3       	brcs	.-36     	; 0xf0 <prvInitialiseCoRoutineLists+0x6>
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
     114:	8d e3       	ldi	r24, 0x3D	; 61
     116:	91 e0       	ldi	r25, 0x01	; 1
     118:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
     11c:	84 e3       	ldi	r24, 0x34	; 52
     11e:	91 e0       	ldi	r25, 0x01	; 1
     120:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
     124:	87 e2       	ldi	r24, 0x27	; 39
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     12c:	8d e3       	ldi	r24, 0x3D	; 61
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <pxDelayedCoRoutineList+0x1>
     134:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <pxDelayedCoRoutineList>
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     138:	84 e3       	ldi	r24, 0x34	; 52
     13a:	91 e0       	ldi	r25, 0x01	; 1
     13c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <pxOverflowDelayedCoRoutineList+0x1>
     140:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <pxOverflowDelayedCoRoutineList>
}
     144:	cf 91       	pop	r28
     146:	08 95       	ret

00000148 <prvCheckPendingReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     148:	0f 93       	push	r16
     14a:	1f 93       	push	r17
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     150:	28 c0       	rjmp	.+80     	; 0x1a2 <prvCheckPendingReadyList+0x5a>
	{
		CRCB_t *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     152:	f8 94       	cli
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
     154:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <xPendingReadyCoRoutineList+0x5>
     158:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <xPendingReadyCoRoutineList+0x6>
     15c:	c6 81       	ldd	r28, Z+6	; 0x06
     15e:	d7 81       	ldd	r29, Z+7	; 0x07
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     160:	ce 01       	movw	r24, r28
     162:	0c 96       	adiw	r24, 0x0c	; 12
     164:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>
		}
		portENABLE_INTERRUPTS();
     168:	78 94       	sei

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     16a:	8e 01       	movw	r16, r28
     16c:	0e 5f       	subi	r16, 0xFE	; 254
     16e:	1f 4f       	sbci	r17, 0xFF	; 255
     170:	c8 01       	movw	r24, r16
     172:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
     176:	8e 89       	ldd	r24, Y+22	; 0x16
     178:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <uxTopCoRoutineReadyPriority>
     17c:	98 17       	cp	r25, r24
     17e:	10 f4       	brcc	.+4      	; 0x184 <prvCheckPendingReadyList+0x3c>
     180:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <uxTopCoRoutineReadyPriority>
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	9c 01       	movw	r18, r24
     188:	22 0f       	add	r18, r18
     18a:	33 1f       	adc	r19, r19
     18c:	22 0f       	add	r18, r18
     18e:	33 1f       	adc	r19, r19
     190:	22 0f       	add	r18, r18
     192:	33 1f       	adc	r19, r19
     194:	82 0f       	add	r24, r18
     196:	93 1f       	adc	r25, r19
     198:	b8 01       	movw	r22, r16
     19a:	8a 5b       	subi	r24, 0xBA	; 186
     19c:	9e 4f       	sbci	r25, 0xFE	; 254
     19e:	0e 94 26 04 	call	0x84c	; 0x84c <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     1a2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <xPendingReadyCoRoutineList>
     1a6:	81 11       	cpse	r24, r1
     1a8:	d4 cf       	rjmp	.-88     	; 0x152 <prvCheckPendingReadyList+0xa>
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
	}
}
     1aa:	df 91       	pop	r29
     1ac:	cf 91       	pop	r28
     1ae:	1f 91       	pop	r17
     1b0:	0f 91       	pop	r16
     1b2:	08 95       	ret

000001b4 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     1bc:	0e 94 66 0c 	call	0x18cc	; 0x18cc <xTaskGetTickCount>
     1c0:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <xLastTickCount>
     1c4:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <xLastTickCount+0x1>
     1c8:	82 1b       	sub	r24, r18
     1ca:	93 0b       	sbc	r25, r19
     1cc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
     1d0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
	while( xPassedTicks )
     1d4:	5e c0       	rjmp	.+188    	; 0x292 <prvCheckDelayedList+0xde>
	{
		xCoRoutineTickCount++;
     1d6:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <xCoRoutineTickCount>
     1da:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <xCoRoutineTickCount+0x1>
     1de:	2f 5f       	subi	r18, 0xFF	; 255
     1e0:	3f 4f       	sbci	r19, 0xFF	; 255
     1e2:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <xCoRoutineTickCount+0x1>
     1e6:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <xCoRoutineTickCount>
		xPassedTicks--;
     1ea:	01 97       	sbiw	r24, 0x01	; 1
     1ec:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
     1f0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     1f4:	23 2b       	or	r18, r19
     1f6:	09 f0       	breq	.+2      	; 0x1fa <prvCheckDelayedList+0x46>
     1f8:	45 c0       	rjmp	.+138    	; 0x284 <prvCheckDelayedList+0xd0>
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     1fa:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <pxDelayedCoRoutineList>
     1fe:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <pxDelayedCoRoutineList+0x1>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     202:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <pxOverflowDelayedCoRoutineList>
     206:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <pxOverflowDelayedCoRoutineList+0x1>
     20a:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <pxDelayedCoRoutineList+0x1>
     20e:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <pxDelayedCoRoutineList>
			pxOverflowDelayedCoRoutineList = pxTemp;
     212:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <pxOverflowDelayedCoRoutineList+0x1>
     216:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <pxOverflowDelayedCoRoutineList>
     21a:	34 c0       	rjmp	.+104    	; 0x284 <prvCheckDelayedList+0xd0>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     21c:	05 80       	ldd	r0, Z+5	; 0x05
     21e:	f6 81       	ldd	r31, Z+6	; 0x06
     220:	e0 2d       	mov	r30, r0
     222:	c6 81       	ldd	r28, Z+6	; 0x06
     224:	d7 81       	ldd	r29, Z+7	; 0x07

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
     226:	2a 81       	ldd	r18, Y+2	; 0x02
     228:	3b 81       	ldd	r19, Y+3	; 0x03
     22a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <xCoRoutineTickCount>
     22e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <xCoRoutineTickCount+0x1>
     232:	82 17       	cp	r24, r18
     234:	93 07       	cpc	r25, r19
     236:	68 f1       	brcs	.+90     	; 0x292 <prvCheckDelayedList+0xde>
			{
				/* Timeout not yet expired. */
				break;
			}

			portDISABLE_INTERRUPTS();
     238:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
     23a:	8e 01       	movw	r16, r28
     23c:	0e 5f       	subi	r16, 0xFE	; 254
     23e:	1f 4f       	sbci	r17, 0xFF	; 255
     240:	c8 01       	movw	r24, r16
     242:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
     246:	8c 89       	ldd	r24, Y+20	; 0x14
     248:	9d 89       	ldd	r25, Y+21	; 0x15
     24a:	89 2b       	or	r24, r25
     24c:	21 f0       	breq	.+8      	; 0x256 <prvCheckDelayedList+0xa2>
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
     24e:	ce 01       	movw	r24, r28
     250:	0c 96       	adiw	r24, 0x0c	; 12
     252:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>
				}
			}
			portENABLE_INTERRUPTS();
     256:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );
     258:	8e 89       	ldd	r24, Y+22	; 0x16
     25a:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <uxTopCoRoutineReadyPriority>
     25e:	98 17       	cp	r25, r24
     260:	10 f4       	brcc	.+4      	; 0x266 <prvCheckDelayedList+0xb2>
     262:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <uxTopCoRoutineReadyPriority>
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	9c 01       	movw	r18, r24
     26a:	22 0f       	add	r18, r18
     26c:	33 1f       	adc	r19, r19
     26e:	22 0f       	add	r18, r18
     270:	33 1f       	adc	r19, r19
     272:	22 0f       	add	r18, r18
     274:	33 1f       	adc	r19, r19
     276:	82 0f       	add	r24, r18
     278:	93 1f       	adc	r25, r19
     27a:	b8 01       	movw	r22, r16
     27c:	8a 5b       	subi	r24, 0xBA	; 186
     27e:	9e 4f       	sbci	r25, 0xFE	; 254
     280:	0e 94 26 04 	call	0x84c	; 0x84c <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     284:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <pxDelayedCoRoutineList>
     288:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <pxDelayedCoRoutineList+0x1>
     28c:	80 81       	ld	r24, Z
     28e:	81 11       	cpse	r24, r1
     290:	c5 cf       	rjmp	.-118    	; 0x21c <prvCheckDelayedList+0x68>
static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     292:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     296:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
     29a:	00 97       	sbiw	r24, 0x00	; 0
     29c:	09 f0       	breq	.+2      	; 0x2a0 <prvCheckDelayedList+0xec>
     29e:	9b cf       	rjmp	.-202    	; 0x1d6 <prvCheckDelayedList+0x22>

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

	xLastTickCount = xCoRoutineTickCount;
     2a0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <xCoRoutineTickCount>
     2a4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <xCoRoutineTickCount+0x1>
     2a8:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <xLastTickCount+0x1>
     2ac:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <xLastTickCount>
}
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	1f 91       	pop	r17
     2b6:	0f 91       	pop	r16
     2b8:	08 95       	ret

000002ba <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
{
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	6c 01       	movw	r12, r24
     2ca:	f6 2e       	mov	r15, r22
     2cc:	14 2f       	mov	r17, r20
BaseType_t xReturn;
CRCB_t *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
     2ce:	8a e1       	ldi	r24, 0x1A	; 26
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <pvPortMalloc>
     2d6:	ec 01       	movw	r28, r24
	if( pxCoRoutine )
     2d8:	89 2b       	or	r24, r25
     2da:	09 f4       	brne	.+2      	; 0x2de <xCoRoutineCreate+0x24>
     2dc:	42 c0       	rjmp	.+132    	; 0x362 <xCoRoutineCreate+0xa8>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     2de:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <pxCurrentCoRoutine>
     2e2:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <pxCurrentCoRoutine+0x1>
     2e6:	89 2b       	or	r24, r25
     2e8:	31 f4       	brne	.+12     	; 0x2f6 <xCoRoutineCreate+0x3c>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     2ea:	d0 93 26 01 	sts	0x0126, r29	; 0x800126 <pxCurrentCoRoutine+0x1>
     2ee:	c0 93 25 01 	sts	0x0125, r28	; 0x800125 <pxCurrentCoRoutine>
			prvInitialiseCoRoutineLists();
     2f2:	0e 94 75 00 	call	0xea	; 0xea <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	8f 15       	cp	r24, r15
     2fa:	10 f4       	brcc	.+4      	; 0x300 <xCoRoutineCreate+0x46>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     2fc:	ff 24       	eor	r15, r15
     2fe:	f3 94       	inc	r15
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     300:	19 8e       	std	Y+25, r1	; 0x19
     302:	18 8e       	std	Y+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
     304:	fe 8a       	std	Y+22, r15	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
     306:	1f 8b       	std	Y+23, r17	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     308:	fe 01       	movw	r30, r28
     30a:	c1 92       	st	Z+, r12
     30c:	d1 92       	st	Z+, r13
     30e:	8f 01       	movw	r16, r30

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     310:	cf 01       	movw	r24, r30
     312:	0e 94 22 04 	call	0x844	; 0x844 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     316:	ce 01       	movw	r24, r28
     318:	0c 96       	adiw	r24, 0x0c	; 12
     31a:	0e 94 22 04 	call	0x844	; 0x844 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     31e:	d9 87       	std	Y+9, r29	; 0x09
     320:	c8 87       	std	Y+8, r28	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     322:	db 8b       	std	Y+19, r29	; 0x13
     324:	ca 8b       	std	Y+18, r28	; 0x12

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	8f 19       	sub	r24, r15
     32c:	91 09       	sbc	r25, r1
     32e:	9d 87       	std	Y+13, r25	; 0x0d
     330:	8c 87       	std	Y+12, r24	; 0x0c

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     332:	8e 89       	ldd	r24, Y+22	; 0x16
     334:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <uxTopCoRoutineReadyPriority>
     338:	98 17       	cp	r25, r24
     33a:	10 f4       	brcc	.+4      	; 0x340 <xCoRoutineCreate+0x86>
     33c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <uxTopCoRoutineReadyPriority>
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	9c 01       	movw	r18, r24
     344:	22 0f       	add	r18, r18
     346:	33 1f       	adc	r19, r19
     348:	22 0f       	add	r18, r18
     34a:	33 1f       	adc	r19, r19
     34c:	22 0f       	add	r18, r18
     34e:	33 1f       	adc	r19, r19
     350:	82 0f       	add	r24, r18
     352:	93 1f       	adc	r25, r19
     354:	b8 01       	movw	r22, r16
     356:	8a 5b       	subi	r24, 0xBA	; 186
     358:	9e 4f       	sbci	r25, 0xFE	; 254
     35a:	0e 94 26 04 	call	0x84c	; 0x84c <vListInsertEnd>

		xReturn = pdPASS;
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	01 c0       	rjmp	.+2      	; 0x364 <xCoRoutineCreate+0xaa>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     362:	8f ef       	ldi	r24, 0xFF	; 255
	}

	return xReturn;
}
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	df 90       	pop	r13
     370:	cf 90       	pop	r12
     372:	08 95       	ret

00000374 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	8b 01       	movw	r16, r22
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     37e:	c0 91 22 01 	lds	r28, 0x0122	; 0x800122 <xCoRoutineTickCount>
     382:	d0 91 23 01 	lds	r29, 0x0123	; 0x800123 <xCoRoutineTickCount+0x1>
     386:	c8 0f       	add	r28, r24
     388:	d9 1f       	adc	r29, r25

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     38a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <pxCurrentCoRoutine>
     38e:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <pxCurrentCoRoutine+0x1>
     392:	02 96       	adiw	r24, 0x02	; 2
     394:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     398:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <pxCurrentCoRoutine>
     39c:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <pxCurrentCoRoutine+0x1>
     3a0:	d3 83       	std	Z+3, r29	; 0x03
     3a2:	c2 83       	std	Z+2, r28	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
     3a4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <xCoRoutineTickCount>
     3a8:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <xCoRoutineTickCount+0x1>
     3ac:	c8 17       	cp	r28, r24
     3ae:	d9 07       	cpc	r29, r25
     3b0:	50 f4       	brcc	.+20     	; 0x3c6 <vCoRoutineAddToDelayedList+0x52>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     3b2:	bf 01       	movw	r22, r30
     3b4:	6e 5f       	subi	r22, 0xFE	; 254
     3b6:	7f 4f       	sbci	r23, 0xFF	; 255
     3b8:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <pxOverflowDelayedCoRoutineList>
     3bc:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <pxOverflowDelayedCoRoutineList+0x1>
     3c0:	0e 94 47 04 	call	0x88e	; 0x88e <vListInsert>
     3c4:	09 c0       	rjmp	.+18     	; 0x3d8 <vCoRoutineAddToDelayedList+0x64>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     3c6:	bf 01       	movw	r22, r30
     3c8:	6e 5f       	subi	r22, 0xFE	; 254
     3ca:	7f 4f       	sbci	r23, 0xFF	; 255
     3cc:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <pxDelayedCoRoutineList>
     3d0:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <pxDelayedCoRoutineList+0x1>
     3d4:	0e 94 47 04 	call	0x88e	; 0x88e <vListInsert>
	}

	if( pxEventList )
     3d8:	01 15       	cp	r16, r1
     3da:	11 05       	cpc	r17, r1
     3dc:	49 f0       	breq	.+18     	; 0x3f0 <vCoRoutineAddToDelayedList+0x7c>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     3de:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <pxCurrentCoRoutine>
     3e2:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <pxCurrentCoRoutine+0x1>
     3e6:	64 5f       	subi	r22, 0xF4	; 244
     3e8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ea:	c8 01       	movw	r24, r16
     3ec:	0e 94 47 04 	call	0x88e	; 0x88e <vListInsert>
	}
}
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	1f 91       	pop	r17
     3f6:	0f 91       	pop	r16
     3f8:	08 95       	ret

000003fa <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     3fa:	0e 94 a4 00 	call	0x148	; 0x148 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     3fe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     402:	06 c0       	rjmp	.+12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     404:	88 23       	and	r24, r24
     406:	09 f4       	brne	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	4f c0       	rjmp	.+158    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     40a:	81 50       	subi	r24, 0x01	; 1
     40c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <uxTopCoRoutineReadyPriority>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     410:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <uxTopCoRoutineReadyPriority>
     414:	28 2f       	mov	r18, r24
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	f9 01       	movw	r30, r18
     41a:	ee 0f       	add	r30, r30
     41c:	ff 1f       	adc	r31, r31
     41e:	ee 0f       	add	r30, r30
     420:	ff 1f       	adc	r31, r31
     422:	ee 0f       	add	r30, r30
     424:	ff 1f       	adc	r31, r31
     426:	e2 0f       	add	r30, r18
     428:	f3 1f       	adc	r31, r19
     42a:	ea 5b       	subi	r30, 0xBA	; 186
     42c:	fe 4f       	sbci	r31, 0xFE	; 254
     42e:	90 81       	ld	r25, Z
     430:	99 23       	and	r25, r25
     432:	41 f3       	breq	.-48     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     434:	c9 01       	movw	r24, r18
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	82 0f       	add	r24, r18
     444:	93 1f       	adc	r25, r19
     446:	df 01       	movw	r26, r30
     448:	01 80       	ldd	r0, Z+1	; 0x01
     44a:	f2 81       	ldd	r31, Z+2	; 0x02
     44c:	e0 2d       	mov	r30, r0
     44e:	02 80       	ldd	r0, Z+2	; 0x02
     450:	f3 81       	ldd	r31, Z+3	; 0x03
     452:	e0 2d       	mov	r30, r0
     454:	12 96       	adiw	r26, 0x02	; 2
     456:	fc 93       	st	X, r31
     458:	ee 93       	st	-X, r30
     45a:	11 97       	sbiw	r26, 0x01	; 1
     45c:	87 5b       	subi	r24, 0xB7	; 183
     45e:	9e 4f       	sbci	r25, 0xFE	; 254
     460:	e8 17       	cp	r30, r24
     462:	f9 07       	cpc	r31, r25
     464:	29 f4       	brne	.+10     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     466:	82 81       	ldd	r24, Z+2	; 0x02
     468:	93 81       	ldd	r25, Z+3	; 0x03
     46a:	fd 01       	movw	r30, r26
     46c:	92 83       	std	Z+2, r25	; 0x02
     46e:	81 83       	std	Z+1, r24	; 0x01
     470:	f9 01       	movw	r30, r18
     472:	ee 0f       	add	r30, r30
     474:	ff 1f       	adc	r31, r31
     476:	ee 0f       	add	r30, r30
     478:	ff 1f       	adc	r31, r31
     47a:	ee 0f       	add	r30, r30
     47c:	ff 1f       	adc	r31, r31
     47e:	2e 0f       	add	r18, r30
     480:	3f 1f       	adc	r19, r31
     482:	f9 01       	movw	r30, r18
     484:	ea 5b       	subi	r30, 0xBA	; 186
     486:	fe 4f       	sbci	r31, 0xFE	; 254
     488:	01 80       	ldd	r0, Z+1	; 0x01
     48a:	f2 81       	ldd	r31, Z+2	; 0x02
     48c:	e0 2d       	mov	r30, r0
     48e:	86 81       	ldd	r24, Z+6	; 0x06
     490:	97 81       	ldd	r25, Z+7	; 0x07
     492:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <pxCurrentCoRoutine+0x1>
     496:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <pxCurrentCoRoutine>

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     49a:	dc 01       	movw	r26, r24
     49c:	ed 91       	ld	r30, X+
     49e:	fc 91       	ld	r31, X
     4a0:	11 97       	sbiw	r26, 0x01	; 1
     4a2:	57 96       	adiw	r26, 0x17	; 23
     4a4:	6c 91       	ld	r22, X
     4a6:	09 95       	icall
     4a8:	08 95       	ret

000004aa <xCoRoutineRemoveFromEventList>:
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
{
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
BaseType_t xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     4b2:	dc 01       	movw	r26, r24
     4b4:	15 96       	adiw	r26, 0x05	; 5
     4b6:	ed 91       	ld	r30, X+
     4b8:	fc 91       	ld	r31, X
     4ba:	16 97       	sbiw	r26, 0x06	; 6
     4bc:	c6 81       	ldd	r28, Z+6	; 0x06
     4be:	d7 81       	ldd	r29, Z+7	; 0x07
	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     4c0:	8e 01       	movw	r16, r28
     4c2:	04 5f       	subi	r16, 0xF4	; 244
     4c4:	1f 4f       	sbci	r17, 0xFF	; 255
     4c6:	c8 01       	movw	r24, r16
     4c8:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>
	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     4cc:	b8 01       	movw	r22, r16
     4ce:	87 e2       	ldi	r24, 0x27	; 39
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 26 04 	call	0x84c	; 0x84c <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     4d6:	9e 89       	ldd	r25, Y+22	; 0x16
     4d8:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <pxCurrentCoRoutine>
     4dc:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <pxCurrentCoRoutine+0x1>
     4e0:	86 89       	ldd	r24, Z+22	; 0x16
     4e2:	98 17       	cp	r25, r24
     4e4:	10 f0       	brcs	.+4      	; 0x4ea <xCoRoutineRemoveFromEventList+0x40>
	{
		xReturn = pdTRUE;
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <xCoRoutineRemoveFromEventList+0x42>
	}
	else
	{
		xReturn = pdFALSE;
     4ea:	80 e0       	ldi	r24, 0x00	; 0
	}

	return xReturn;
}
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	08 95       	ret

000004f6 <prvTestWaitCondition>:

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
     4f6:	41 11       	cpse	r20, r1
     4f8:	06 c0       	rjmp	.+12     	; 0x506 <prvTestWaitCondition+0x10>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     4fa:	68 23       	and	r22, r24
     4fc:	79 23       	and	r23, r25
     4fe:	67 2b       	or	r22, r23
     500:	49 f4       	brne	.+18     	; 0x514 <prvTestWaitCondition+0x1e>
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	08 95       	ret
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     506:	86 23       	and	r24, r22
     508:	97 23       	and	r25, r23
     50a:	68 17       	cp	r22, r24
     50c:	79 07       	cpc	r23, r25
     50e:	21 f0       	breq	.+8      	; 0x518 <prvTestWaitCondition+0x22>
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	08 95       	ret
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
		{
			xWaitConditionMet = pdTRUE;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	08 95       	ret
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
		{
			xWaitConditionMet = pdTRUE;
     518:	81 e0       	ldi	r24, 0x01	; 1
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
}
     51a:	08 95       	ret

0000051c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
     520:	8b e0       	ldi	r24, 0x0B	; 11
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <pvPortMalloc>
     528:	ec 01       	movw	r28, r24

		if( pxEventBits != NULL )
     52a:	00 97       	sbiw	r24, 0x00	; 0
     52c:	31 f0       	breq	.+12     	; 0x53a <xEventGroupCreate+0x1e>
		{
			pxEventBits->uxEventBits = 0;
     52e:	fc 01       	movw	r30, r24
     530:	11 92       	st	Z+, r1
     532:	11 92       	st	Z+, r1
     534:	cf 01       	movw	r24, r30
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     536:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
     53a:	ce 01       	movw	r24, r28
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
     542:	af 92       	push	r10
     544:	bf 92       	push	r11
     546:	cf 92       	push	r12
     548:	df 92       	push	r13
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	7c 01       	movw	r14, r24
     558:	5b 01       	movw	r10, r22
     55a:	c4 2e       	mov	r12, r20
     55c:	d2 2e       	mov	r13, r18
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     55e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     562:	f7 01       	movw	r30, r14
     564:	c0 81       	ld	r28, Z
     566:	d1 81       	ldd	r29, Z+1	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
     568:	4d 2d       	mov	r20, r13
     56a:	b5 01       	movw	r22, r10
     56c:	ce 01       	movw	r24, r28
     56e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <prvTestWaitCondition>

		if( xWaitConditionMet != pdFALSE )
     572:	88 23       	and	r24, r24
     574:	69 f0       	breq	.+26     	; 0x590 <xEventGroupWaitBits+0x4e>
			block. */
			uxReturn = uxCurrentEventBits;
			xTicksToWait = ( TickType_t ) 0;

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
     576:	cc 20       	and	r12, r12
     578:	09 f1       	breq	.+66     	; 0x5bc <xEventGroupWaitBits+0x7a>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     57a:	c5 01       	movw	r24, r10
     57c:	80 95       	com	r24
     57e:	90 95       	com	r25
     580:	8c 23       	and	r24, r28
     582:	9d 23       	and	r25, r29
     584:	f7 01       	movw	r30, r14
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
		if( xWaitConditionMet != pdFALSE )
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
			xTicksToWait = ( TickType_t ) 0;
     58a:	00 e0       	ldi	r16, 0x00	; 0
     58c:	10 e0       	ldi	r17, 0x00	; 0
     58e:	18 c0       	rjmp	.+48     	; 0x5c0 <xEventGroupWaitBits+0x7e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
     590:	01 15       	cp	r16, r1
     592:	11 05       	cpc	r17, r1
     594:	a9 f0       	breq	.+42     	; 0x5c0 <xEventGroupWaitBits+0x7e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
     596:	c1 10       	cpse	r12, r1
     598:	03 c0       	rjmp	.+6      	; 0x5a0 <xEventGroupWaitBits+0x5e>
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
EventBits_t uxReturn, uxControlBits = 0;
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <xEventGroupWaitBits+0x62>
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	71 e0       	ldi	r23, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
     5a4:	d1 10       	cpse	r13, r1
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
     5a6:	74 60       	ori	r23, 0x04	; 4
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     5a8:	6a 29       	or	r22, r10
     5aa:	7b 29       	or	r23, r11
     5ac:	a8 01       	movw	r20, r16
     5ae:	c7 01       	movw	r24, r14
     5b0:	02 96       	adiw	r24, 0x02	; 2
     5b2:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
     5b6:	c0 e0       	ldi	r28, 0x00	; 0
     5b8:	d0 e0       	ldi	r29, 0x00	; 0
     5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <xEventGroupWaitBits+0x7e>
		if( xWaitConditionMet != pdFALSE )
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
			xTicksToWait = ( TickType_t ) 0;
     5bc:	00 e0       	ldi	r16, 0x00	; 0
     5be:	10 e0       	ldi	r17, 0x00	; 0
			uxReturn = 0;

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     5c0:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <xTaskResumeAll>

	if( xTicksToWait != ( TickType_t ) 0 )
     5c4:	01 2b       	or	r16, r17
     5c6:	19 f1       	breq	.+70     	; 0x60e <xEventGroupWaitBits+0xcc>
	{
		if( xAlreadyYielded == pdFALSE )
     5c8:	81 11       	cpse	r24, r1
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <xEventGroupWaitBits+0x8e>
		{
			portYIELD_WITHIN_API();
     5cc:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     5d0:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <uxTaskResetEventItemValue>
     5d4:	ec 01       	movw	r28, r24

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     5d6:	91 fd       	sbrc	r25, 1
     5d8:	19 c0       	rjmp	.+50     	; 0x60c <xEventGroupWaitBits+0xca>
		{
			taskENTER_CRITICAL();
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     5e0:	f7 01       	movw	r30, r14
     5e2:	c0 81       	ld	r28, Z
     5e4:	d1 81       	ldd	r29, Z+1	; 0x01

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
     5e6:	4d 2d       	mov	r20, r13
     5e8:	b5 01       	movw	r22, r10
     5ea:	ce 01       	movw	r24, r28
     5ec:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <prvTestWaitCondition>
     5f0:	88 23       	and	r24, r24
     5f2:	51 f0       	breq	.+20     	; 0x608 <xEventGroupWaitBits+0xc6>
				{
					if( xClearOnExit != pdFALSE )
     5f4:	cc 20       	and	r12, r12
     5f6:	41 f0       	breq	.+16     	; 0x608 <xEventGroupWaitBits+0xc6>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     5f8:	b5 01       	movw	r22, r10
     5fa:	60 95       	com	r22
     5fc:	70 95       	com	r23
     5fe:	6c 23       	and	r22, r28
     600:	7d 23       	and	r23, r29
     602:	f7 01       	movw	r30, r14
     604:	71 83       	std	Z+1, r23	; 0x01
     606:	60 83       	st	Z, r22
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     608:	0f 90       	pop	r0
     60a:	0f be       	out	0x3f, r0	; 63
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     60c:	dd 27       	eor	r29, r29
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
}
     60e:	ce 01       	movw	r24, r28
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	df 90       	pop	r13
     61e:	cf 90       	pop	r12
     620:	bf 90       	pop	r11
     622:	af 90       	pop	r10
     624:	08 95       	ret

00000626 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
     626:	fc 01       	movw	r30, r24
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
     62e:	80 81       	ld	r24, Z
     630:	91 81       	ldd	r25, Z+1	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     632:	60 95       	com	r22
     634:	70 95       	com	r23
     636:	68 23       	and	r22, r24
     638:	79 23       	and	r23, r25
     63a:	71 83       	std	Z+1, r23	; 0x01
     63c:	60 83       	st	Z, r22
	}
	taskEXIT_CRITICAL();
     63e:	0f 90       	pop	r0
     640:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
     642:	08 95       	ret

00000644 <xEventGroupGetBitsFromISR>:
		uxReturn = pxEventBits->uxEventBits;
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
}
     644:	fc 01       	movw	r30, r24
     646:	80 81       	ld	r24, Z
     648:	91 81       	ldd	r25, Z+1	; 0x01
     64a:	08 95       	ret

0000064c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	7c 01       	movw	r14, r24
     65e:	8b 01       	movw	r16, r22
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     660:	ec 01       	movw	r28, r24
     662:	25 96       	adiw	r28, 0x05	; 5
	vTaskSuspendAll();
     664:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
     668:	d7 01       	movw	r26, r14
     66a:	17 96       	adiw	r26, 0x07	; 7
     66c:	ed 91       	ld	r30, X+
     66e:	fc 91       	ld	r31, X
     670:	18 97       	sbiw	r26, 0x08	; 8

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
     672:	8d 91       	ld	r24, X+
     674:	9c 91       	ld	r25, X
     676:	11 97       	sbiw	r26, 0x01	; 1
     678:	08 2b       	or	r16, r24
     67a:	19 2b       	or	r17, r25
     67c:	0d 93       	st	X+, r16
     67e:	1c 93       	st	X, r17
EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     680:	00 e0       	ldi	r16, 0x00	; 0
     682:	10 e0       	ldi	r17, 0x00	; 0

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     684:	2d c0       	rjmp	.+90     	; 0x6e0 <xEventGroupSetBits+0x94>
		{
			pxNext = listGET_NEXT( pxListItem );
     686:	c2 80       	ldd	r12, Z+2	; 0x02
     688:	d3 80       	ldd	r13, Z+3	; 0x03
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     68a:	80 81       	ld	r24, Z
     68c:	91 81       	ldd	r25, Z+1	; 0x01
			xMatchFound = pdFALSE;

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     68e:	9c 01       	movw	r18, r24
     690:	33 27       	eor	r19, r19

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     692:	92 fd       	sbrc	r25, 2
     694:	09 c0       	rjmp	.+18     	; 0x6a8 <xEventGroupSetBits+0x5c>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     696:	d7 01       	movw	r26, r14
     698:	4d 91       	ld	r20, X+
     69a:	5c 91       	ld	r21, X
     69c:	42 23       	and	r20, r18
     69e:	53 23       	and	r21, r19
     6a0:	45 2b       	or	r20, r21
     6a2:	61 f4       	brne	.+24     	; 0x6bc <xEventGroupSetBits+0x70>
		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
			xMatchFound = pdFALSE;
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	0d c0       	rjmp	.+26     	; 0x6c2 <xEventGroupSetBits+0x76>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     6a8:	d7 01       	movw	r26, r14
     6aa:	4d 91       	ld	r20, X+
     6ac:	5c 91       	ld	r21, X
     6ae:	42 23       	and	r20, r18
     6b0:	53 23       	and	r21, r19
     6b2:	24 17       	cp	r18, r20
     6b4:	35 07       	cpc	r19, r21
     6b6:	21 f0       	breq	.+8      	; 0x6c0 <xEventGroupSetBits+0x74>
		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
			xMatchFound = pdFALSE;
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <xEventGroupSetBits+0x76>
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
				{
					xMatchFound = pdTRUE;
     6bc:	41 e0       	ldi	r20, 0x01	; 1
     6be:	01 c0       	rjmp	.+2      	; 0x6c2 <xEventGroupSetBits+0x76>
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
     6c0:	41 e0       	ldi	r20, 0x01	; 1
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
     6c2:	44 23       	and	r20, r20
     6c4:	59 f0       	breq	.+22     	; 0x6dc <xEventGroupSetBits+0x90>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     6c6:	90 ff       	sbrs	r25, 0
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <xEventGroupSetBits+0x82>
				{
					uxBitsToClear |= uxBitsWaitedFor;
     6ca:	02 2b       	or	r16, r18
     6cc:	13 2b       	or	r17, r19
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     6ce:	d7 01       	movw	r26, r14
     6d0:	6d 91       	ld	r22, X+
     6d2:	7c 91       	ld	r23, X
     6d4:	72 60       	ori	r23, 0x02	; 2
     6d6:	cf 01       	movw	r24, r30
     6d8:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <xTaskRemoveFromUnorderedEventList>
		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
			xMatchFound = pdFALSE;
     6dc:	ec 2d       	mov	r30, r12
     6de:	fd 2d       	mov	r31, r13

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     6e0:	ec 17       	cp	r30, r28
     6e2:	fd 07       	cpc	r31, r29
     6e4:	81 f6       	brne	.-96     	; 0x686 <xEventGroupSetBits+0x3a>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     6e6:	00 95       	com	r16
     6e8:	10 95       	com	r17
     6ea:	f7 01       	movw	r30, r14
     6ec:	80 81       	ld	r24, Z
     6ee:	91 81       	ldd	r25, Z+1	; 0x01
     6f0:	08 23       	and	r16, r24
     6f2:	19 23       	and	r17, r25
     6f4:	11 83       	std	Z+1, r17	; 0x01
     6f6:	00 83       	st	Z, r16
	}
	( void ) xTaskResumeAll();
     6f8:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
}
     6fc:	d7 01       	movw	r26, r14
     6fe:	8d 91       	ld	r24, X+
     700:	9c 91       	ld	r25, X
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	df 90       	pop	r13
     710:	cf 90       	pop	r12
     712:	08 95       	ret

00000714 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
     714:	af 92       	push	r10
     716:	bf 92       	push	r11
     718:	cf 92       	push	r12
     71a:	df 92       	push	r13
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	8c 01       	movw	r16, r24
     72a:	eb 01       	movw	r28, r22
     72c:	7a 01       	movw	r14, r20
     72e:	69 01       	movw	r12, r18
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     730:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
     734:	f8 01       	movw	r30, r16
     736:	a0 80       	ld	r10, Z
     738:	b1 80       	ldd	r11, Z+1	; 0x01

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
     73a:	be 01       	movw	r22, r28
     73c:	c8 01       	movw	r24, r16
     73e:	0e 94 26 03 	call	0x64c	; 0x64c <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
     742:	ca 29       	or	r28, r10
     744:	db 29       	or	r29, r11
     746:	ce 01       	movw	r24, r28
     748:	8e 21       	and	r24, r14
     74a:	9f 21       	and	r25, r15
     74c:	e8 16       	cp	r14, r24
     74e:	f9 06       	cpc	r15, r25
     750:	69 f4       	brne	.+26     	; 0x76c <xEventGroupSync+0x58>
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     752:	f8 01       	movw	r30, r16
     754:	20 81       	ld	r18, Z
     756:	31 81       	ldd	r19, Z+1	; 0x01
     758:	c7 01       	movw	r24, r14
     75a:	80 95       	com	r24
     75c:	90 95       	com	r25
     75e:	82 23       	and	r24, r18
     760:	93 23       	and	r25, r19
     762:	91 83       	std	Z+1, r25	; 0x01
     764:	80 83       	st	Z, r24

			xTicksToWait = 0;
     766:	c1 2c       	mov	r12, r1
     768:	d1 2c       	mov	r13, r1
     76a:	10 c0       	rjmp	.+32     	; 0x78c <xEventGroupSync+0x78>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
     76c:	c1 14       	cp	r12, r1
     76e:	d1 04       	cpc	r13, r1
     770:	51 f0       	breq	.+20     	; 0x786 <xEventGroupSync+0x72>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
     772:	a6 01       	movw	r20, r12
     774:	b7 01       	movw	r22, r14
     776:	75 60       	ori	r23, 0x05	; 5
     778:	c8 01       	movw	r24, r16
     77a:	02 96       	adiw	r24, 0x02	; 2
     77c:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
     780:	c0 e0       	ldi	r28, 0x00	; 0
     782:	d0 e0       	ldi	r29, 0x00	; 0
     784:	03 c0       	rjmp	.+6      	; 0x78c <xEventGroupSync+0x78>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     786:	f8 01       	movw	r30, r16
     788:	c0 81       	ld	r28, Z
     78a:	d1 81       	ldd	r29, Z+1	; 0x01
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     78c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <xTaskResumeAll>

	if( xTicksToWait != ( TickType_t ) 0 )
     790:	cd 28       	or	r12, r13
     792:	f9 f0       	breq	.+62     	; 0x7d2 <xEventGroupSync+0xbe>
	{
		if( xAlreadyYielded == pdFALSE )
     794:	81 11       	cpse	r24, r1
     796:	02 c0       	rjmp	.+4      	; 0x79c <xEventGroupSync+0x88>
		{
			portYIELD_WITHIN_API();
     798:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     79c:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <uxTaskResetEventItemValue>

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     7a0:	91 fd       	sbrc	r25, 1
     7a2:	15 c0       	rjmp	.+42     	; 0x7ce <xEventGroupSync+0xba>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
     7aa:	f8 01       	movw	r30, r16
     7ac:	80 81       	ld	r24, Z
     7ae:	91 81       	ldd	r25, Z+1	; 0x01

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
     7b0:	97 01       	movw	r18, r14
     7b2:	28 23       	and	r18, r24
     7b4:	39 23       	and	r19, r25
     7b6:	e2 16       	cp	r14, r18
     7b8:	f3 06       	cpc	r15, r19
     7ba:	39 f4       	brne	.+14     	; 0x7ca <xEventGroupSync+0xb6>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     7bc:	a7 01       	movw	r20, r14
     7be:	40 95       	com	r20
     7c0:	50 95       	com	r21
     7c2:	48 23       	and	r20, r24
     7c4:	59 23       	and	r21, r25
     7c6:	51 83       	std	Z+1, r21	; 0x01
     7c8:	40 83       	st	Z, r20
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     7ca:	0f 90       	pop	r0
     7cc:	0f be       	out	0x3f, r0	; 63
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     7ce:	ec 01       	movw	r28, r24
     7d0:	dd 27       	eor	r29, r29
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
}
     7d2:	ce 01       	movw	r24, r28
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	bf 90       	pop	r11
     7e6:	af 90       	pop	r10
     7e8:	08 95       	ret

000007ea <vEventGroupDelete>:
	return pxEventBits->uxEventBits;
}
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	ec 01       	movw	r28, r24
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );

	vTaskSuspendAll();
     7f0:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     7f4:	06 c0       	rjmp	.+12     	; 0x802 <vEventGroupDelete+0x18>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	72 e0       	ldi	r23, 0x02	; 2
     7fa:	8f 81       	ldd	r24, Y+7	; 0x07
     7fc:	98 85       	ldd	r25, Y+8	; 0x08
     7fe:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	81 11       	cpse	r24, r1
     806:	f7 cf       	rjmp	.-18     	; 0x7f6 <vEventGroupDelete+0xc>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
     808:	ce 01       	movw	r24, r28
     80a:	0e 94 31 06 	call	0xc62	; 0xc62 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
     80e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <xTaskResumeAll>
}
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <vEventGroupSetBitsCallback>:

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     818:	ba 01       	movw	r22, r20
     81a:	0e 94 26 03 	call	0x64c	; 0x64c <xEventGroupSetBits>
     81e:	08 95       	ret

00000820 <vEventGroupClearBitsCallback>:

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
     820:	ba 01       	movw	r22, r20
     822:	0e 94 13 03 	call	0x626	; 0x626 <xEventGroupClearBits>
     826:	08 95       	ret

00000828 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     828:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     82a:	03 96       	adiw	r24, 0x03	; 3
     82c:	92 83       	std	Z+2, r25	; 0x02
     82e:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     830:	2f ef       	ldi	r18, 0xFF	; 255
     832:	3f ef       	ldi	r19, 0xFF	; 255
     834:	34 83       	std	Z+4, r19	; 0x04
     836:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     838:	96 83       	std	Z+6, r25	; 0x06
     83a:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     83c:	90 87       	std	Z+8, r25	; 0x08
     83e:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     840:	10 82       	st	Z, r1
     842:	08 95       	ret

00000844 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     844:	fc 01       	movw	r30, r24
     846:	11 86       	std	Z+9, r1	; 0x09
     848:	10 86       	std	Z+8, r1	; 0x08
     84a:	08 95       	ret

0000084c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	9c 01       	movw	r18, r24
     852:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     854:	dc 01       	movw	r26, r24
     856:	11 96       	adiw	r26, 0x01	; 1
     858:	cd 91       	ld	r28, X+
     85a:	dc 91       	ld	r29, X
     85c:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     85e:	d3 83       	std	Z+3, r29	; 0x03
     860:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     862:	8c 81       	ldd	r24, Y+4	; 0x04
     864:	9d 81       	ldd	r25, Y+5	; 0x05
     866:	95 83       	std	Z+5, r25	; 0x05
     868:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     86a:	8c 81       	ldd	r24, Y+4	; 0x04
     86c:	9d 81       	ldd	r25, Y+5	; 0x05
     86e:	dc 01       	movw	r26, r24
     870:	13 96       	adiw	r26, 0x03	; 3
     872:	7c 93       	st	X, r23
     874:	6e 93       	st	-X, r22
     876:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     878:	7d 83       	std	Y+5, r23	; 0x05
     87a:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     87c:	31 87       	std	Z+9, r19	; 0x09
     87e:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     880:	f9 01       	movw	r30, r18
     882:	80 81       	ld	r24, Z
     884:	8f 5f       	subi	r24, 0xFF	; 255
     886:	80 83       	st	Z, r24
}
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     894:	48 81       	ld	r20, Y
     896:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     898:	4f 3f       	cpi	r20, 0xFF	; 255
     89a:	2f ef       	ldi	r18, 0xFF	; 255
     89c:	52 07       	cpc	r21, r18
     89e:	21 f4       	brne	.+8      	; 0x8a8 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     8a0:	fc 01       	movw	r30, r24
     8a2:	a7 81       	ldd	r26, Z+7	; 0x07
     8a4:	b0 85       	ldd	r27, Z+8	; 0x08
     8a6:	0d c0       	rjmp	.+26     	; 0x8c2 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     8a8:	dc 01       	movw	r26, r24
     8aa:	13 96       	adiw	r26, 0x03	; 3
     8ac:	01 c0       	rjmp	.+2      	; 0x8b0 <vListInsert+0x22>
     8ae:	df 01       	movw	r26, r30
     8b0:	12 96       	adiw	r26, 0x02	; 2
     8b2:	ed 91       	ld	r30, X+
     8b4:	fc 91       	ld	r31, X
     8b6:	13 97       	sbiw	r26, 0x03	; 3
     8b8:	20 81       	ld	r18, Z
     8ba:	31 81       	ldd	r19, Z+1	; 0x01
     8bc:	42 17       	cp	r20, r18
     8be:	53 07       	cpc	r21, r19
     8c0:	b0 f7       	brcc	.-20     	; 0x8ae <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     8c2:	12 96       	adiw	r26, 0x02	; 2
     8c4:	ed 91       	ld	r30, X+
     8c6:	fc 91       	ld	r31, X
     8c8:	13 97       	sbiw	r26, 0x03	; 3
     8ca:	fb 83       	std	Y+3, r31	; 0x03
     8cc:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     8ce:	d5 83       	std	Z+5, r29	; 0x05
     8d0:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     8d2:	bd 83       	std	Y+5, r27	; 0x05
     8d4:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     8d6:	13 96       	adiw	r26, 0x03	; 3
     8d8:	dc 93       	st	X, r29
     8da:	ce 93       	st	-X, r28
     8dc:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     8de:	99 87       	std	Y+9, r25	; 0x09
     8e0:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     8e2:	fc 01       	movw	r30, r24
     8e4:	20 81       	ld	r18, Z
     8e6:	2f 5f       	subi	r18, 0xFF	; 255
     8e8:	20 83       	st	Z, r18
}
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret

000008f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     8f6:	a0 85       	ldd	r26, Z+8	; 0x08
     8f8:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     8fa:	c2 81       	ldd	r28, Z+2	; 0x02
     8fc:	d3 81       	ldd	r29, Z+3	; 0x03
     8fe:	84 81       	ldd	r24, Z+4	; 0x04
     900:	95 81       	ldd	r25, Z+5	; 0x05
     902:	9d 83       	std	Y+5, r25	; 0x05
     904:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     906:	c4 81       	ldd	r28, Z+4	; 0x04
     908:	d5 81       	ldd	r29, Z+5	; 0x05
     90a:	82 81       	ldd	r24, Z+2	; 0x02
     90c:	93 81       	ldd	r25, Z+3	; 0x03
     90e:	9b 83       	std	Y+3, r25	; 0x03
     910:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     912:	11 96       	adiw	r26, 0x01	; 1
     914:	8d 91       	ld	r24, X+
     916:	9c 91       	ld	r25, X
     918:	12 97       	sbiw	r26, 0x02	; 2
     91a:	e8 17       	cp	r30, r24
     91c:	f9 07       	cpc	r31, r25
     91e:	31 f4       	brne	.+12     	; 0x92c <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     920:	84 81       	ldd	r24, Z+4	; 0x04
     922:	95 81       	ldd	r25, Z+5	; 0x05
     924:	12 96       	adiw	r26, 0x02	; 2
     926:	9c 93       	st	X, r25
     928:	8e 93       	st	-X, r24
     92a:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     92c:	11 86       	std	Z+9, r1	; 0x09
     92e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     930:	8c 91       	ld	r24, X
     932:	81 50       	subi	r24, 0x01	; 1
     934:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

0000093c <prvSetupTimerInterrupt>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
     93c:	86 e0       	ldi	r24, 0x06	; 6
     93e:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = ucLowByte;
     940:	8f eb       	ldi	r24, 0xBF	; 191
     942:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
     944:	8b e0       	ldi	r24, 0x0B	; 11
     946:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
     948:	87 b7       	in	r24, 0x37	; 55
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
     94a:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
     94c:	87 bf       	out	0x37, r24	; 55
     94e:	08 95       	ret

00000950 <pxPortInitialiseStack>:
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
     950:	31 e1       	ldi	r19, 0x11	; 17
     952:	fc 01       	movw	r30, r24
     954:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
     956:	31 97       	sbiw	r30, 0x01	; 1
     958:	22 e2       	ldi	r18, 0x22	; 34
     95a:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
     95c:	31 97       	sbiw	r30, 0x01	; 1
     95e:	a3 e3       	ldi	r26, 0x33	; 51
     960:	a0 83       	st	Z, r26
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     962:	31 97       	sbiw	r30, 0x01	; 1
     964:	60 83       	st	Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     966:	31 97       	sbiw	r30, 0x01	; 1
     968:	70 83       	st	Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
     96a:	31 97       	sbiw	r30, 0x01	; 1
     96c:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
     96e:	31 97       	sbiw	r30, 0x01	; 1
     970:	60 e8       	ldi	r22, 0x80	; 128
     972:	60 83       	st	Z, r22
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
     974:	31 97       	sbiw	r30, 0x01	; 1
     976:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
     978:	31 97       	sbiw	r30, 0x01	; 1
     97a:	62 e0       	ldi	r22, 0x02	; 2
     97c:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
     97e:	31 97       	sbiw	r30, 0x01	; 1
     980:	63 e0       	ldi	r22, 0x03	; 3
     982:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
     984:	31 97       	sbiw	r30, 0x01	; 1
     986:	64 e0       	ldi	r22, 0x04	; 4
     988:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
     98a:	31 97       	sbiw	r30, 0x01	; 1
     98c:	65 e0       	ldi	r22, 0x05	; 5
     98e:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
     990:	31 97       	sbiw	r30, 0x01	; 1
     992:	66 e0       	ldi	r22, 0x06	; 6
     994:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
     996:	31 97       	sbiw	r30, 0x01	; 1
     998:	67 e0       	ldi	r22, 0x07	; 7
     99a:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
     99c:	31 97       	sbiw	r30, 0x01	; 1
     99e:	68 e0       	ldi	r22, 0x08	; 8
     9a0:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
     9a2:	31 97       	sbiw	r30, 0x01	; 1
     9a4:	69 e0       	ldi	r22, 0x09	; 9
     9a6:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
     9a8:	31 97       	sbiw	r30, 0x01	; 1
     9aa:	60 e1       	ldi	r22, 0x10	; 16
     9ac:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
     9ae:	31 97       	sbiw	r30, 0x01	; 1
     9b0:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
     9b2:	31 97       	sbiw	r30, 0x01	; 1
     9b4:	32 e1       	ldi	r19, 0x12	; 18
     9b6:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
     9b8:	31 97       	sbiw	r30, 0x01	; 1
     9ba:	33 e1       	ldi	r19, 0x13	; 19
     9bc:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
     9be:	31 97       	sbiw	r30, 0x01	; 1
     9c0:	34 e1       	ldi	r19, 0x14	; 20
     9c2:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
     9c4:	31 97       	sbiw	r30, 0x01	; 1
     9c6:	35 e1       	ldi	r19, 0x15	; 21
     9c8:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
     9ca:	31 97       	sbiw	r30, 0x01	; 1
     9cc:	36 e1       	ldi	r19, 0x16	; 22
     9ce:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
     9d0:	31 97       	sbiw	r30, 0x01	; 1
     9d2:	37 e1       	ldi	r19, 0x17	; 23
     9d4:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
     9d6:	31 97       	sbiw	r30, 0x01	; 1
     9d8:	38 e1       	ldi	r19, 0x18	; 24
     9da:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
     9dc:	31 97       	sbiw	r30, 0x01	; 1
     9de:	39 e1       	ldi	r19, 0x19	; 25
     9e0:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
     9e2:	31 97       	sbiw	r30, 0x01	; 1
     9e4:	30 e2       	ldi	r19, 0x20	; 32
     9e6:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
     9e8:	31 97       	sbiw	r30, 0x01	; 1
     9ea:	31 e2       	ldi	r19, 0x21	; 33
     9ec:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
     9ee:	31 97       	sbiw	r30, 0x01	; 1
     9f0:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	23 e2       	ldi	r18, 0x23	; 35
     9f6:	20 83       	st	Z, r18
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	40 83       	st	Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     9fc:	31 97       	sbiw	r30, 0x01	; 1
     9fe:	50 83       	st	Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
     a00:	31 97       	sbiw	r30, 0x01	; 1
     a02:	26 e2       	ldi	r18, 0x26	; 38
     a04:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
     a06:	31 97       	sbiw	r30, 0x01	; 1
     a08:	27 e2       	ldi	r18, 0x27	; 39
     a0a:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
     a0c:	31 97       	sbiw	r30, 0x01	; 1
     a0e:	28 e2       	ldi	r18, 0x28	; 40
     a10:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
     a12:	31 97       	sbiw	r30, 0x01	; 1
     a14:	29 e2       	ldi	r18, 0x29	; 41
     a16:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
     a18:	31 97       	sbiw	r30, 0x01	; 1
     a1a:	20 e3       	ldi	r18, 0x30	; 48
     a1c:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
     a1e:	31 97       	sbiw	r30, 0x01	; 1
     a20:	21 e3       	ldi	r18, 0x31	; 49
     a22:	20 83       	st	Z, r18
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}
     a24:	86 97       	sbiw	r24, 0x26	; 38
     a26:	08 95       	ret

00000a28 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
     a28:	0e 94 9e 04 	call	0x93c	; 0x93c <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
     a2c:	a0 91 ad 0d 	lds	r26, 0x0DAD	; 0x800dad <pxCurrentTCB>
     a30:	b0 91 ae 0d 	lds	r27, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
     a34:	cd 91       	ld	r28, X+
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	dd 91       	ld	r29, X+
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	ff 91       	pop	r31
     a3e:	ef 91       	pop	r30
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	bf 91       	pop	r27
     a46:	af 91       	pop	r26
     a48:	9f 91       	pop	r25
     a4a:	8f 91       	pop	r24
     a4c:	7f 91       	pop	r23
     a4e:	6f 91       	pop	r22
     a50:	5f 91       	pop	r21
     a52:	4f 91       	pop	r20
     a54:	3f 91       	pop	r19
     a56:	2f 91       	pop	r18
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	bf 90       	pop	r11
     a66:	af 90       	pop	r10
     a68:	9f 90       	pop	r9
     a6a:	8f 90       	pop	r8
     a6c:	7f 90       	pop	r7
     a6e:	6f 90       	pop	r6
     a70:	5f 90       	pop	r5
     a72:	4f 90       	pop	r4
     a74:	3f 90       	pop	r3
     a76:	2f 90       	pop	r2
     a78:	1f 90       	pop	r1
     a7a:	0f 90       	pop	r0
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
     a80:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	08 95       	ret

00000a86 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     a86:	08 95       	ret

00000a88 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     a88:	0f 92       	push	r0
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	f8 94       	cli
     a8e:	0f 92       	push	r0
     a90:	1f 92       	push	r1
     a92:	11 24       	eor	r1, r1
     a94:	2f 92       	push	r2
     a96:	3f 92       	push	r3
     a98:	4f 92       	push	r4
     a9a:	5f 92       	push	r5
     a9c:	6f 92       	push	r6
     a9e:	7f 92       	push	r7
     aa0:	8f 92       	push	r8
     aa2:	9f 92       	push	r9
     aa4:	af 92       	push	r10
     aa6:	bf 92       	push	r11
     aa8:	cf 92       	push	r12
     aaa:	df 92       	push	r13
     aac:	ef 92       	push	r14
     aae:	ff 92       	push	r15
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	2f 93       	push	r18
     ab6:	3f 93       	push	r19
     ab8:	4f 93       	push	r20
     aba:	5f 93       	push	r21
     abc:	6f 93       	push	r22
     abe:	7f 93       	push	r23
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25
     ac4:	af 93       	push	r26
     ac6:	bf 93       	push	r27
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	ef 93       	push	r30
     ace:	ff 93       	push	r31
     ad0:	a0 91 ad 0d 	lds	r26, 0x0DAD	; 0x800dad <pxCurrentTCB>
     ad4:	b0 91 ae 0d 	lds	r27, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
     ad8:	0d b6       	in	r0, 0x3d	; 61
     ada:	0d 92       	st	X+, r0
     adc:	0e b6       	in	r0, 0x3e	; 62
     ade:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     ae0:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     ae4:	a0 91 ad 0d 	lds	r26, 0x0DAD	; 0x800dad <pxCurrentTCB>
     ae8:	b0 91 ae 0d 	lds	r27, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
     aec:	cd 91       	ld	r28, X+
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	dd 91       	ld	r29, X+
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	ff 91       	pop	r31
     af6:	ef 91       	pop	r30
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	bf 91       	pop	r27
     afe:	af 91       	pop	r26
     b00:	9f 91       	pop	r25
     b02:	8f 91       	pop	r24
     b04:	7f 91       	pop	r23
     b06:	6f 91       	pop	r22
     b08:	5f 91       	pop	r21
     b0a:	4f 91       	pop	r20
     b0c:	3f 91       	pop	r19
     b0e:	2f 91       	pop	r18
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ff 90       	pop	r15
     b16:	ef 90       	pop	r14
     b18:	df 90       	pop	r13
     b1a:	cf 90       	pop	r12
     b1c:	bf 90       	pop	r11
     b1e:	af 90       	pop	r10
     b20:	9f 90       	pop	r9
     b22:	8f 90       	pop	r8
     b24:	7f 90       	pop	r7
     b26:	6f 90       	pop	r6
     b28:	5f 90       	pop	r5
     b2a:	4f 90       	pop	r4
     b2c:	3f 90       	pop	r3
     b2e:	2f 90       	pop	r2
     b30:	1f 90       	pop	r1
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	0f 90       	pop	r0

	asm volatile ( "ret" );
     b38:	08 95       	ret

00000b3a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     b3a:	0f 92       	push	r0
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	0f 92       	push	r0
     b42:	1f 92       	push	r1
     b44:	11 24       	eor	r1, r1
     b46:	2f 92       	push	r2
     b48:	3f 92       	push	r3
     b4a:	4f 92       	push	r4
     b4c:	5f 92       	push	r5
     b4e:	6f 92       	push	r6
     b50:	7f 92       	push	r7
     b52:	8f 92       	push	r8
     b54:	9f 92       	push	r9
     b56:	af 92       	push	r10
     b58:	bf 92       	push	r11
     b5a:	cf 92       	push	r12
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	2f 93       	push	r18
     b68:	3f 93       	push	r19
     b6a:	4f 93       	push	r20
     b6c:	5f 93       	push	r21
     b6e:	6f 93       	push	r22
     b70:	7f 93       	push	r23
     b72:	8f 93       	push	r24
     b74:	9f 93       	push	r25
     b76:	af 93       	push	r26
     b78:	bf 93       	push	r27
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	ef 93       	push	r30
     b80:	ff 93       	push	r31
     b82:	a0 91 ad 0d 	lds	r26, 0x0DAD	; 0x800dad <pxCurrentTCB>
     b86:	b0 91 ae 0d 	lds	r27, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
     b8a:	0d b6       	in	r0, 0x3d	; 61
     b8c:	0d 92       	st	X+, r0
     b8e:	0e b6       	in	r0, 0x3e	; 62
     b90:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     b92:	0e 94 80 0c 	call	0x1900	; 0x1900 <xTaskIncrementTick>
     b96:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     b98:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     b9c:	a0 91 ad 0d 	lds	r26, 0x0DAD	; 0x800dad <pxCurrentTCB>
     ba0:	b0 91 ae 0d 	lds	r27, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
     ba4:	cd 91       	ld	r28, X+
     ba6:	cd bf       	out	0x3d, r28	; 61
     ba8:	dd 91       	ld	r29, X+
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	ff 91       	pop	r31
     bae:	ef 91       	pop	r30
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	bf 91       	pop	r27
     bb6:	af 91       	pop	r26
     bb8:	9f 91       	pop	r25
     bba:	8f 91       	pop	r24
     bbc:	7f 91       	pop	r23
     bbe:	6f 91       	pop	r22
     bc0:	5f 91       	pop	r21
     bc2:	4f 91       	pop	r20
     bc4:	3f 91       	pop	r19
     bc6:	2f 91       	pop	r18
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	df 90       	pop	r13
     bd2:	cf 90       	pop	r12
     bd4:	bf 90       	pop	r11
     bd6:	af 90       	pop	r10
     bd8:	9f 90       	pop	r9
     bda:	8f 90       	pop	r8
     bdc:	7f 90       	pop	r7
     bde:	6f 90       	pop	r6
     be0:	5f 90       	pop	r5
     be2:	4f 90       	pop	r4
     be4:	3f 90       	pop	r3
     be6:	2f 90       	pop	r2
     be8:	1f 90       	pop	r1
     bea:	0f 90       	pop	r0
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	0f 90       	pop	r0

	asm volatile ( "ret" );
     bf0:	08 95       	ret

00000bf2 <__vector_12>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     bf2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <vPortYieldFromTick>
		asm volatile ( "reti" );
     bf6:	18 95       	reti

00000bf8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
     bfe:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     c02:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <pucAlignedHeap.2068>
     c06:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <pucAlignedHeap.2068+0x1>
     c0a:	89 2b       	or	r24, r25
     c0c:	31 f4       	brne	.+12     	; 0xc1a <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     c0e:	8d e5       	ldi	r24, 0x5D	; 93
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <pucAlignedHeap.2068+0x1>
     c16:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <pucAlignedHeap.2068>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     c1a:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <xNextFreeByte>
     c1e:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <xNextFreeByte+0x1>
     c22:	c9 01       	movw	r24, r18
     c24:	8c 0f       	add	r24, r28
     c26:	9d 1f       	adc	r25, r29
     c28:	8f 3f       	cpi	r24, 0xFF	; 255
     c2a:	4b e0       	ldi	r20, 0x0B	; 11
     c2c:	94 07       	cpc	r25, r20
     c2e:	70 f4       	brcc	.+28     	; 0xc4c <pvPortMalloc+0x54>
     c30:	28 17       	cp	r18, r24
     c32:	39 07       	cpc	r19, r25
     c34:	70 f4       	brcc	.+28     	; 0xc52 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     c36:	c0 91 58 01 	lds	r28, 0x0158	; 0x800158 <pucAlignedHeap.2068>
     c3a:	d0 91 59 01 	lds	r29, 0x0159	; 0x800159 <pucAlignedHeap.2068+0x1>
     c3e:	c2 0f       	add	r28, r18
     c40:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     c42:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <xNextFreeByte+0x1>
     c46:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <xNextFreeByte>
     c4a:	05 c0       	rjmp	.+10     	; 0xc56 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     c4c:	c0 e0       	ldi	r28, 0x00	; 0
     c4e:	d0 e0       	ldi	r29, 0x00	; 0
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <pvPortMalloc+0x5e>
     c52:	c0 e0       	ldi	r28, 0x00	; 0
     c54:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     c56:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     c5a:	ce 01       	movw	r24, r28
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	08 95       	ret

00000c62 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     c62:	08 95       	ret

00000c64 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     c64:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <xNextFreeByte+0x1>
     c68:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <xNextFreeByte>
     c6c:	08 95       	ret

00000c6e <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
     c6e:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <xNextFreeByte>
     c72:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <xNextFreeByte+0x1>
}
     c76:	8f ef       	ldi	r24, 0xFF	; 255
     c78:	9b e0       	ldi	r25, 0x0B	; 11
     c7a:	82 1b       	sub	r24, r18
     c7c:	93 0b       	sbc	r25, r19
     c7e:	08 95       	ret

00000c80 <prvIsQueueEmpty>:

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     c86:	fc 01       	movw	r30, r24
     c88:	82 8d       	ldd	r24, Z+26	; 0x1a
     c8a:	81 11       	cpse	r24, r1
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <prvIsQueueEmpty+0x12>
		{
			xReturn = pdTRUE;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <prvIsQueueEmpty+0x14>
		}
		else
		{
			xReturn = pdFALSE;
     c92:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	taskEXIT_CRITICAL();
     c94:	0f 90       	pop	r0
     c96:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
     c98:	08 95       	ret

00000c9a <prvIsQueueFull>:

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     ca0:	fc 01       	movw	r30, r24
     ca2:	22 8d       	ldd	r18, Z+26	; 0x1a
     ca4:	83 8d       	ldd	r24, Z+27	; 0x1b
     ca6:	28 13       	cpse	r18, r24
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <prvIsQueueFull+0x14>
		{
			xReturn = pdTRUE;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <prvIsQueueFull+0x16>
		}
		else
		{
			xReturn = pdFALSE;
     cae:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	taskEXIT_CRITICAL();
     cb0:	0f 90       	pop	r0
     cb2:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
     cb4:	08 95       	ret

00000cb6 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	ec 01       	movw	r28, r24
     cc0:	04 2f       	mov	r16, r20
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     cc2:	1a 8d       	ldd	r17, Y+26	; 0x1a

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     cc4:	4c 8d       	ldd	r20, Y+28	; 0x1c
     cc6:	44 23       	and	r20, r20
     cc8:	b9 f1       	breq	.+110    	; 0xd38 <prvCopyDataToQueue+0x82>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
     cca:	01 11       	cpse	r16, r1
     ccc:	16 c0       	rjmp	.+44     	; 0xcfa <prvCopyDataToQueue+0x44>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	9d 81       	ldd	r25, Y+5	; 0x05
     cd4:	0e 94 85 14 	call	0x290a	; 0x290a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     cd8:	2c 8d       	ldd	r18, Y+28	; 0x1c
     cda:	8c 81       	ldd	r24, Y+4	; 0x04
     cdc:	9d 81       	ldd	r25, Y+5	; 0x05
     cde:	82 0f       	add	r24, r18
     ce0:	91 1d       	adc	r25, r1
     ce2:	9d 83       	std	Y+5, r25	; 0x05
     ce4:	8c 83       	std	Y+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     ce6:	2a 81       	ldd	r18, Y+2	; 0x02
     ce8:	3b 81       	ldd	r19, Y+3	; 0x03
     cea:	82 17       	cp	r24, r18
     cec:	93 07       	cpc	r25, r19
     cee:	20 f1       	brcs	.+72     	; 0xd38 <prvCopyDataToQueue+0x82>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     cf0:	88 81       	ld	r24, Y
     cf2:	99 81       	ldd	r25, Y+1	; 0x01
     cf4:	9d 83       	std	Y+5, r25	; 0x05
     cf6:	8c 83       	std	Y+4, r24	; 0x04
     cf8:	1f c0       	rjmp	.+62     	; 0xd38 <prvCopyDataToQueue+0x82>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	8e 81       	ldd	r24, Y+6	; 0x06
     cfe:	9f 81       	ldd	r25, Y+7	; 0x07
     d00:	0e 94 85 14 	call	0x290a	; 0x290a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     d04:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	91 95       	neg	r25
     d0a:	81 95       	neg	r24
     d0c:	91 09       	sbc	r25, r1
     d0e:	2e 81       	ldd	r18, Y+6	; 0x06
     d10:	3f 81       	ldd	r19, Y+7	; 0x07
     d12:	28 0f       	add	r18, r24
     d14:	39 1f       	adc	r19, r25
     d16:	3f 83       	std	Y+7, r19	; 0x07
     d18:	2e 83       	std	Y+6, r18	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     d1a:	48 81       	ld	r20, Y
     d1c:	59 81       	ldd	r21, Y+1	; 0x01
     d1e:	24 17       	cp	r18, r20
     d20:	35 07       	cpc	r19, r21
     d22:	30 f4       	brcc	.+12     	; 0xd30 <prvCopyDataToQueue+0x7a>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     d24:	2a 81       	ldd	r18, Y+2	; 0x02
     d26:	3b 81       	ldd	r19, Y+3	; 0x03
     d28:	82 0f       	add	r24, r18
     d2a:	93 1f       	adc	r25, r19
     d2c:	9f 83       	std	Y+7, r25	; 0x07
     d2e:	8e 83       	std	Y+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
     d30:	02 30       	cpi	r16, 0x02	; 2
     d32:	11 f4       	brne	.+4      	; 0xd38 <prvCopyDataToQueue+0x82>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     d34:	11 11       	cpse	r17, r1
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
     d36:	11 50       	subi	r17, 0x01	; 1
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
     d38:	1f 5f       	subi	r17, 0xFF	; 255
     d3a:	1a 8f       	std	Y+26, r17	; 0x1a

	return xReturn;
}
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	08 95       	ret

00000d48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
     d48:	fc 01       	movw	r30, r24
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
     d4a:	44 8d       	ldd	r20, Z+28	; 0x1c
     d4c:	44 23       	and	r20, r20
     d4e:	a9 f0       	breq	.+42     	; 0xd7a <prvCopyDataFromQueue+0x32>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     d50:	50 e0       	ldi	r21, 0x00	; 0
     d52:	26 81       	ldd	r18, Z+6	; 0x06
     d54:	37 81       	ldd	r19, Z+7	; 0x07
     d56:	24 0f       	add	r18, r20
     d58:	35 1f       	adc	r19, r21
     d5a:	37 83       	std	Z+7, r19	; 0x07
     d5c:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     d5e:	82 81       	ldd	r24, Z+2	; 0x02
     d60:	93 81       	ldd	r25, Z+3	; 0x03
     d62:	28 17       	cp	r18, r24
     d64:	39 07       	cpc	r19, r25
     d66:	20 f0       	brcs	.+8      	; 0xd70 <prvCopyDataFromQueue+0x28>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     d68:	80 81       	ld	r24, Z
     d6a:	91 81       	ldd	r25, Z+1	; 0x01
     d6c:	97 83       	std	Z+7, r25	; 0x07
     d6e:	86 83       	std	Z+6, r24	; 0x06
     d70:	cb 01       	movw	r24, r22
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     d72:	66 81       	ldd	r22, Z+6	; 0x06
     d74:	77 81       	ldd	r23, Z+7	; 0x07
     d76:	0e 94 85 14 	call	0x290a	; 0x290a <memcpy>
     d7a:	08 95       	ret

00000d7c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
     d8a:	1e 8d       	ldd	r17, Y+30	; 0x1e

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
     d8c:	0b c0       	rjmp	.+22     	; 0xda4 <prvUnlockQueue+0x28>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     d8e:	89 89       	ldd	r24, Y+17	; 0x11
     d90:	88 23       	and	r24, r24
     d92:	51 f0       	breq	.+20     	; 0xda8 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     d94:	ce 01       	movw	r24, r28
     d96:	41 96       	adiw	r24, 0x11	; 17
     d98:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <xTaskRemoveFromEventList>
     d9c:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
     d9e:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
     da2:	11 50       	subi	r17, 0x01	; 1
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
     da4:	11 16       	cp	r1, r17
     da6:	9c f3       	brlt	.-26     	; 0xd8e <prvUnlockQueue+0x12>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
     da8:	8f ef       	ldi	r24, 0xFF	; 255
     daa:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
     dac:	0f 90       	pop	r0
     dae:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
     db6:	1d 8d       	ldd	r17, Y+29	; 0x1d

		while( cRxLock > queueLOCKED_UNMODIFIED )
     db8:	0b c0       	rjmp	.+22     	; 0xdd0 <prvUnlockQueue+0x54>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     dba:	88 85       	ldd	r24, Y+8	; 0x08
     dbc:	88 23       	and	r24, r24
     dbe:	51 f0       	breq	.+20     	; 0xdd4 <prvUnlockQueue+0x58>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     dc0:	ce 01       	movw	r24, r28
     dc2:	08 96       	adiw	r24, 0x08	; 8
     dc4:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <xTaskRemoveFromEventList>
     dc8:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
     dca:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
     dce:	11 50       	subi	r17, 0x01	; 1
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
     dd0:	11 16       	cp	r1, r17
     dd2:	9c f3       	brlt	.-26     	; 0xdba <prvUnlockQueue+0x3e>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
     dd8:	0f 90       	pop	r0
     dda:	0f be       	out	0x3f, r0	; 63
}
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	08 95       	ret

00000de4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	ec 01       	movw	r28, r24
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     df0:	e8 81       	ld	r30, Y
     df2:	f9 81       	ldd	r31, Y+1	; 0x01
     df4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	2c 8d       	ldd	r18, Y+28	; 0x1c
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	82 9f       	mul	r24, r18
     dfe:	a0 01       	movw	r20, r0
     e00:	83 9f       	mul	r24, r19
     e02:	50 0d       	add	r21, r0
     e04:	92 9f       	mul	r25, r18
     e06:	50 0d       	add	r21, r0
     e08:	11 24       	eor	r1, r1
     e0a:	4e 0f       	add	r20, r30
     e0c:	5f 1f       	adc	r21, r31
     e0e:	5b 83       	std	Y+3, r21	; 0x03
     e10:	4a 83       	std	Y+2, r20	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     e12:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
     e14:	fd 83       	std	Y+5, r31	; 0x05
     e16:	ec 83       	std	Y+4, r30	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	28 9f       	mul	r18, r24
     e1c:	a0 01       	movw	r20, r0
     e1e:	29 9f       	mul	r18, r25
     e20:	50 0d       	add	r21, r0
     e22:	38 9f       	mul	r19, r24
     e24:	50 0d       	add	r21, r0
     e26:	11 24       	eor	r1, r1
     e28:	cf 01       	movw	r24, r30
     e2a:	84 0f       	add	r24, r20
     e2c:	95 1f       	adc	r25, r21
     e2e:	9f 83       	std	Y+7, r25	; 0x07
     e30:	8e 83       	std	Y+6, r24	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
     e32:	8f ef       	ldi	r24, 0xFF	; 255
     e34:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
     e36:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
     e38:	61 11       	cpse	r22, r1
     e3a:	0c c0       	rjmp	.+24     	; 0xe54 <xQueueGenericReset+0x70>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     e3c:	88 85       	ldd	r24, Y+8	; 0x08
     e3e:	88 23       	and	r24, r24
     e40:	89 f0       	breq	.+34     	; 0xe64 <xQueueGenericReset+0x80>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     e42:	ce 01       	movw	r24, r28
     e44:	08 96       	adiw	r24, 0x08	; 8
     e46:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <xTaskRemoveFromEventList>
     e4a:	88 23       	and	r24, r24
     e4c:	59 f0       	breq	.+22     	; 0xe64 <xQueueGenericReset+0x80>
				{
					queueYIELD_IF_USING_PREEMPTION();
     e4e:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>
     e52:	08 c0       	rjmp	.+16     	; 0xe64 <xQueueGenericReset+0x80>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     e54:	ce 01       	movw	r24, r28
     e56:	08 96       	adiw	r24, 0x08	; 8
     e58:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     e5c:	ce 01       	movw	r24, r28
     e5e:	41 96       	adiw	r24, 0x11	; 17
     e60:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
     e64:	0f 90       	pop	r0
     e66:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	08 95       	ret

00000e70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	f8 01       	movw	r30, r16
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
     e76:	61 11       	cpse	r22, r1
     e78:	03 c0       	rjmp	.+6      	; 0xe80 <prvInitialiseNewQueue+0x10>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
     e7a:	11 83       	std	Z+1, r17	; 0x01
     e7c:	00 83       	st	Z, r16
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <prvInitialiseNewQueue+0x14>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
     e80:	51 83       	std	Z+1, r21	; 0x01
     e82:	40 83       	st	Z, r20
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
     e84:	83 8f       	std	Z+27, r24	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
     e86:	64 8f       	std	Z+28, r22	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     e88:	61 e0       	ldi	r22, 0x01	; 1
     e8a:	cf 01       	movw	r24, r30
     e8c:	0e 94 f2 06 	call	0xde4	; 0xde4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	08 95       	ret

00000e96 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	e8 2e       	mov	r14, r24
     ea6:	f6 2e       	mov	r15, r22
     ea8:	d4 2e       	mov	r13, r20
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
     eaa:	66 23       	and	r22, r22
     eac:	21 f0       	breq	.+8      	; 0xeb6 <xQueueGenericCreate+0x20>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     eae:	86 9f       	mul	r24, r22
     eb0:	c0 01       	movw	r24, r0
     eb2:	11 24       	eor	r1, r1
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <xQueueGenericCreate+0x24>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
     eba:	4f 96       	adiw	r24, 0x1f	; 31
     ebc:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <pvPortMalloc>
     ec0:	ec 01       	movw	r28, r24

		if( pxNewQueue != NULL )
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	49 f0       	breq	.+18     	; 0xed8 <xQueueGenericCreate+0x42>
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
     ec6:	8c 01       	movw	r16, r24
     ec8:	2d 2d       	mov	r18, r13
     eca:	ac 01       	movw	r20, r24
     ecc:	41 5e       	subi	r20, 0xE1	; 225
     ece:	5f 4f       	sbci	r21, 0xFF	; 255
     ed0:	6f 2d       	mov	r22, r15
     ed2:	8e 2d       	mov	r24, r14
     ed4:	0e 94 38 07 	call	0xe70	; 0xe70 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
	}
     ed8:	ce 01       	movw	r24, r28
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	df 90       	pop	r13
     ee8:	08 95       	ret

00000eea <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     eea:	cf 92       	push	r12
     eec:	df 92       	push	r13
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	00 d0       	rcall	.+0      	; 0xefc <xQueueGenericSend+0x12>
     efc:	00 d0       	rcall	.+0      	; 0xefe <xQueueGenericSend+0x14>
     efe:	1f 92       	push	r1
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	8c 01       	movw	r16, r24
     f06:	7b 01       	movw	r14, r22
     f08:	5d 83       	std	Y+5, r21	; 0x05
     f0a:	4c 83       	std	Y+4, r20	; 0x04
     f0c:	c2 2e       	mov	r12, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
     f0e:	d1 2c       	mov	r13, r1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     f16:	f8 01       	movw	r30, r16
     f18:	92 8d       	ldd	r25, Z+26	; 0x1a
     f1a:	83 8d       	ldd	r24, Z+27	; 0x1b
     f1c:	98 17       	cp	r25, r24
     f1e:	18 f0       	brcs	.+6      	; 0xf26 <xQueueGenericSend+0x3c>
     f20:	f2 e0       	ldi	r31, 0x02	; 2
     f22:	cf 12       	cpse	r12, r31
     f24:	19 c0       	rjmp	.+50     	; 0xf58 <xQueueGenericSend+0x6e>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     f26:	4c 2d       	mov	r20, r12
     f28:	b7 01       	movw	r22, r14
     f2a:	c8 01       	movw	r24, r16
     f2c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     f30:	f8 01       	movw	r30, r16
     f32:	91 89       	ldd	r25, Z+17	; 0x11
     f34:	99 23       	and	r25, r25
     f36:	49 f0       	breq	.+18     	; 0xf4a <xQueueGenericSend+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     f38:	c8 01       	movw	r24, r16
     f3a:	41 96       	adiw	r24, 0x11	; 17
     f3c:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <xTaskRemoveFromEventList>
     f40:	88 23       	and	r24, r24
     f42:	31 f0       	breq	.+12     	; 0xf50 <xQueueGenericSend+0x66>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
     f44:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <xQueueGenericSend+0x66>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
     f4a:	81 11       	cpse	r24, r1
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
     f4c:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
     f50:	0f 90       	pop	r0
     f52:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	4d c0       	rjmp	.+154    	; 0xff2 <xQueueGenericSend+0x108>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	9d 81       	ldd	r25, Y+5	; 0x05
     f5c:	89 2b       	or	r24, r25
     f5e:	21 f4       	brne	.+8      	; 0xf68 <xQueueGenericSend+0x7e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	45 c0       	rjmp	.+138    	; 0xff2 <xQueueGenericSend+0x108>
				}
				else if( xEntryTimeSet == pdFALSE )
     f68:	d1 10       	cpse	r13, r1
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     f6c:	ce 01       	movw	r24, r28
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
     f74:	dd 24       	eor	r13, r13
     f76:	d3 94       	inc	r13
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     f7c:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	0f 92       	push	r0
     f86:	f8 01       	movw	r30, r16
     f88:	85 8d       	ldd	r24, Z+29	; 0x1d
     f8a:	8f 3f       	cpi	r24, 0xFF	; 255
     f8c:	09 f4       	brne	.+2      	; 0xf90 <xQueueGenericSend+0xa6>
     f8e:	15 8e       	std	Z+29, r1	; 0x1d
     f90:	f8 01       	movw	r30, r16
     f92:	86 8d       	ldd	r24, Z+30	; 0x1e
     f94:	8f 3f       	cpi	r24, 0xFF	; 255
     f96:	09 f4       	brne	.+2      	; 0xf9a <xQueueGenericSend+0xb0>
     f98:	16 8e       	std	Z+30, r1	; 0x1e
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     f9e:	be 01       	movw	r22, r28
     fa0:	6c 5f       	subi	r22, 0xFC	; 252
     fa2:	7f 4f       	sbci	r23, 0xFF	; 255
     fa4:	ce 01       	movw	r24, r28
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <xTaskCheckForTimeOut>
     fac:	81 11       	cpse	r24, r1
     fae:	1b c0       	rjmp	.+54     	; 0xfe6 <xQueueGenericSend+0xfc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     fb0:	c8 01       	movw	r24, r16
     fb2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <prvIsQueueFull>
     fb6:	88 23       	and	r24, r24
     fb8:	81 f0       	breq	.+32     	; 0xfda <xQueueGenericSend+0xf0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     fba:	6c 81       	ldd	r22, Y+4	; 0x04
     fbc:	7d 81       	ldd	r23, Y+5	; 0x05
     fbe:	c8 01       	movw	r24, r16
     fc0:	08 96       	adiw	r24, 0x08	; 8
     fc2:	0e 94 57 0e 	call	0x1cae	; 0x1cae <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     fc6:	c8 01       	movw	r24, r16
     fc8:	0e 94 be 06 	call	0xd7c	; 0xd7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
     fcc:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <xTaskResumeAll>
     fd0:	81 11       	cpse	r24, r1
     fd2:	9e cf       	rjmp	.-196    	; 0xf10 <xQueueGenericSend+0x26>
				{
					portYIELD_WITHIN_API();
     fd4:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>
     fd8:	9b cf       	rjmp	.-202    	; 0xf10 <xQueueGenericSend+0x26>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     fda:	c8 01       	movw	r24, r16
     fdc:	0e 94 be 06 	call	0xd7c	; 0xd7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
     fe0:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <xTaskResumeAll>
     fe4:	95 cf       	rjmp	.-214    	; 0xf10 <xQueueGenericSend+0x26>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     fe6:	c8 01       	movw	r24, r16
     fe8:	0e 94 be 06 	call	0xd7c	; 0xd7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
     fec:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
     ff0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	df 90       	pop	r13
    100a:	cf 90       	pop	r12
    100c:	08 95       	ret

0000100e <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	8a 01       	movw	r16, r20
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    101c:	fc 01       	movw	r30, r24
    101e:	52 8d       	ldd	r21, Z+26	; 0x1a
    1020:	33 8d       	ldd	r19, Z+27	; 0x1b
    1022:	53 17       	cp	r21, r19
    1024:	10 f0       	brcs	.+4      	; 0x102a <xQueueGenericSendFromISR+0x1c>
    1026:	22 30       	cpi	r18, 0x02	; 2
    1028:	f1 f4       	brne	.+60     	; 0x1066 <xQueueGenericSendFromISR+0x58>
    102a:	42 2f       	mov	r20, r18
    102c:	78 01       	movw	r14, r16
    102e:	ec 01       	movw	r28, r24
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    1030:	1e 8d       	ldd	r17, Y+30	; 0x1e
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1032:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    1036:	1f 3f       	cpi	r17, 0xFF	; 255
    1038:	81 f4       	brne	.+32     	; 0x105a <xQueueGenericSendFromISR+0x4c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    103a:	89 89       	ldd	r24, Y+17	; 0x11
    103c:	88 23       	and	r24, r24
    103e:	a9 f0       	breq	.+42     	; 0x106a <xQueueGenericSendFromISR+0x5c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1040:	ce 01       	movw	r24, r28
    1042:	41 96       	adiw	r24, 0x11	; 17
    1044:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <xTaskRemoveFromEventList>
    1048:	88 23       	and	r24, r24
    104a:	89 f0       	breq	.+34     	; 0x106e <xQueueGenericSendFromISR+0x60>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    104c:	e1 14       	cp	r14, r1
    104e:	f1 04       	cpc	r15, r1
    1050:	81 f0       	breq	.+32     	; 0x1072 <xQueueGenericSendFromISR+0x64>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	f7 01       	movw	r30, r14
    1056:	80 83       	st	Z, r24
    1058:	0d c0       	rjmp	.+26     	; 0x1074 <xQueueGenericSendFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    105a:	ff 24       	eor	r15, r15
    105c:	f3 94       	inc	r15
    105e:	f1 0e       	add	r15, r17
    1060:	fe 8e       	std	Y+30, r15	; 0x1e
			}

			xReturn = pdPASS;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	07 c0       	rjmp	.+14     	; 0x1074 <xQueueGenericSendFromISR+0x66>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	05 c0       	rjmp	.+10     	; 0x1074 <xQueueGenericSendFromISR+0x66>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <xQueueGenericSendFromISR+0x66>
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <xQueueGenericSendFromISR+0x66>
    1072:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	08 95       	ret

00001082 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	fc 01       	movw	r30, r24
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1088:	82 8d       	ldd	r24, Z+26	; 0x1a

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    108a:	93 8d       	ldd	r25, Z+27	; 0x1b
    108c:	89 17       	cp	r24, r25
    108e:	c0 f4       	brcc	.+48     	; 0x10c0 <xQueueGiveFromISR+0x3e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    1090:	96 8d       	ldd	r25, Z+30	; 0x1e
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    1092:	8f 5f       	subi	r24, 0xFF	; 255
    1094:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    1096:	9f 3f       	cpi	r25, 0xFF	; 255
    1098:	79 f4       	brne	.+30     	; 0x10b8 <xQueueGiveFromISR+0x36>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    109a:	81 89       	ldd	r24, Z+17	; 0x11
    109c:	88 23       	and	r24, r24
    109e:	91 f0       	breq	.+36     	; 0x10c4 <xQueueGiveFromISR+0x42>
    10a0:	eb 01       	movw	r28, r22
    10a2:	cf 01       	movw	r24, r30
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    10a4:	41 96       	adiw	r24, 0x11	; 17
    10a6:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <xTaskRemoveFromEventList>
    10aa:	88 23       	and	r24, r24
    10ac:	69 f0       	breq	.+26     	; 0x10c8 <xQueueGiveFromISR+0x46>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    10ae:	20 97       	sbiw	r28, 0x00	; 0
    10b0:	69 f0       	breq	.+26     	; 0x10cc <xQueueGiveFromISR+0x4a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	88 83       	st	Y, r24
    10b6:	0b c0       	rjmp	.+22     	; 0x10ce <xQueueGiveFromISR+0x4c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    10b8:	9f 5f       	subi	r25, 0xFF	; 255
    10ba:	96 8f       	std	Z+30, r25	; 0x1e
			}

			xReturn = pdPASS;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	07 c0       	rjmp	.+14     	; 0x10ce <xQueueGiveFromISR+0x4c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	05 c0       	rjmp	.+10     	; 0x10ce <xQueueGiveFromISR+0x4c>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <xQueueGiveFromISR+0x4c>
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <xQueueGiveFromISR+0x4c>
    10cc:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret

000010d4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    10d4:	8f 92       	push	r8
    10d6:	9f 92       	push	r9
    10d8:	bf 92       	push	r11
    10da:	cf 92       	push	r12
    10dc:	df 92       	push	r13
    10de:	ef 92       	push	r14
    10e0:	ff 92       	push	r15
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <xQueueGenericReceive+0x18>
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <xQueueGenericReceive+0x1a>
    10ee:	1f 92       	push	r1
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	8c 01       	movw	r16, r24
    10f6:	6b 01       	movw	r12, r22
    10f8:	5d 83       	std	Y+5, r21	; 0x05
    10fa:	4c 83       	std	Y+4, r20	; 0x04
    10fc:	b2 2e       	mov	r11, r18
BaseType_t xEntryTimeSet = pdFALSE;
    10fe:	e1 2c       	mov	r14, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1106:	f8 01       	movw	r30, r16
    1108:	f2 8c       	ldd	r15, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    110a:	ff 20       	and	r15, r15
    110c:	41 f1       	breq	.+80     	; 0x115e <__stack+0x5f>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    110e:	86 80       	ldd	r8, Z+6	; 0x06
    1110:	97 80       	ldd	r9, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1112:	b6 01       	movw	r22, r12
    1114:	c8 01       	movw	r24, r16
    1116:	0e 94 a4 06 	call	0xd48	; 0xd48 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    111a:	b1 10       	cpse	r11, r1
    111c:	0f c0       	rjmp	.+30     	; 0x113c <__stack+0x3d>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    111e:	fa 94       	dec	r15
    1120:	f8 01       	movw	r30, r16
    1122:	f2 8e       	std	Z+26, r15	; 0x1a
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1124:	80 85       	ldd	r24, Z+8	; 0x08
    1126:	88 23       	and	r24, r24
    1128:	b1 f0       	breq	.+44     	; 0x1156 <__stack+0x57>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    112a:	c8 01       	movw	r24, r16
    112c:	08 96       	adiw	r24, 0x08	; 8
    112e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <xTaskRemoveFromEventList>
    1132:	88 23       	and	r24, r24
    1134:	81 f0       	breq	.+32     	; 0x1156 <__stack+0x57>
						{
							queueYIELD_IF_USING_PREEMPTION();
    1136:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>
    113a:	0d c0       	rjmp	.+26     	; 0x1156 <__stack+0x57>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    113c:	f8 01       	movw	r30, r16
    113e:	97 82       	std	Z+7, r9	; 0x07
    1140:	86 82       	std	Z+6, r8	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1142:	81 89       	ldd	r24, Z+17	; 0x11
    1144:	88 23       	and	r24, r24
    1146:	39 f0       	breq	.+14     	; 0x1156 <__stack+0x57>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1148:	c8 01       	movw	r24, r16
    114a:	41 96       	adiw	r24, 0x11	; 17
    114c:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <xTaskRemoveFromEventList>
    1150:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1152:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1156:	0f 90       	pop	r0
    1158:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	53 c0       	rjmp	.+166    	; 0x1204 <__stack+0x105>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	9d 81       	ldd	r25, Y+5	; 0x05
    1162:	89 2b       	or	r24, r25
    1164:	21 f4       	brne	.+8      	; 0x116e <__stack+0x6f>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1166:	0f 90       	pop	r0
    1168:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	4b c0       	rjmp	.+150    	; 0x1204 <__stack+0x105>
				}
				else if( xEntryTimeSet == pdFALSE )
    116e:	e1 10       	cpse	r14, r1
    1170:	06 c0       	rjmp	.+12     	; 0x117e <__stack+0x7f>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1172:	ce 01       	movw	r24, r28
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    117a:	ee 24       	eor	r14, r14
    117c:	e3 94       	inc	r14
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    117e:	0f 90       	pop	r0
    1180:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1182:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	0f 92       	push	r0
    118c:	f8 01       	movw	r30, r16
    118e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1190:	8f 3f       	cpi	r24, 0xFF	; 255
    1192:	09 f4       	brne	.+2      	; 0x1196 <__stack+0x97>
    1194:	15 8e       	std	Z+29, r1	; 0x1d
    1196:	f8 01       	movw	r30, r16
    1198:	86 8d       	ldd	r24, Z+30	; 0x1e
    119a:	8f 3f       	cpi	r24, 0xFF	; 255
    119c:	09 f4       	brne	.+2      	; 0x11a0 <__stack+0xa1>
    119e:	16 8e       	std	Z+30, r1	; 0x1e
    11a0:	0f 90       	pop	r0
    11a2:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    11a4:	be 01       	movw	r22, r28
    11a6:	6c 5f       	subi	r22, 0xFC	; 252
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	ce 01       	movw	r24, r28
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <xTaskCheckForTimeOut>
    11b2:	81 11       	cpse	r24, r1
    11b4:	1b c0       	rjmp	.+54     	; 0x11ec <__stack+0xed>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    11b6:	c8 01       	movw	r24, r16
    11b8:	0e 94 40 06 	call	0xc80	; 0xc80 <prvIsQueueEmpty>
    11bc:	88 23       	and	r24, r24
    11be:	81 f0       	breq	.+32     	; 0x11e0 <__stack+0xe1>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    11c0:	6c 81       	ldd	r22, Y+4	; 0x04
    11c2:	7d 81       	ldd	r23, Y+5	; 0x05
    11c4:	c8 01       	movw	r24, r16
    11c6:	41 96       	adiw	r24, 0x11	; 17
    11c8:	0e 94 57 0e 	call	0x1cae	; 0x1cae <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    11cc:	c8 01       	movw	r24, r16
    11ce:	0e 94 be 06 	call	0xd7c	; 0xd7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    11d2:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <xTaskResumeAll>
    11d6:	81 11       	cpse	r24, r1
    11d8:	93 cf       	rjmp	.-218    	; 0x1100 <__stack+0x1>
				{
					portYIELD_WITHIN_API();
    11da:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>
    11de:	90 cf       	rjmp	.-224    	; 0x1100 <__stack+0x1>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    11e0:	c8 01       	movw	r24, r16
    11e2:	0e 94 be 06 	call	0xd7c	; 0xd7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
    11e6:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <xTaskResumeAll>
    11ea:	8a cf       	rjmp	.-236    	; 0x1100 <__stack+0x1>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    11ec:	c8 01       	movw	r24, r16
    11ee:	0e 94 be 06 	call	0xd7c	; 0xd7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
    11f2:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    11f6:	c8 01       	movw	r24, r16
    11f8:	0e 94 40 06 	call	0xc80	; 0xc80 <prvIsQueueEmpty>
    11fc:	88 23       	and	r24, r24
    11fe:	09 f4       	brne	.+2      	; 0x1202 <__stack+0x103>
    1200:	7f cf       	rjmp	.-258    	; 0x1100 <__stack+0x1>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    1202:	80 e0       	ldi	r24, 0x00	; 0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	ff 90       	pop	r15
    1218:	ef 90       	pop	r14
    121a:	df 90       	pop	r13
    121c:	cf 90       	pop	r12
    121e:	bf 90       	pop	r11
    1220:	9f 90       	pop	r9
    1222:	8f 90       	pop	r8
    1224:	08 95       	ret

00001226 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    1226:	ef 92       	push	r14
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1232:	fc 01       	movw	r30, r24
    1234:	c2 8d       	ldd	r28, Z+26	; 0x1a

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1236:	cc 23       	and	r28, r28
    1238:	f9 f0       	breq	.+62     	; 0x1278 <xQueueReceiveFromISR+0x52>
    123a:	7a 01       	movw	r14, r20
    123c:	8c 01       	movw	r16, r24
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    123e:	d5 8d       	ldd	r29, Z+29	; 0x1d

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1240:	0e 94 a4 06 	call	0xd48	; 0xd48 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1244:	c1 50       	subi	r28, 0x01	; 1
    1246:	f8 01       	movw	r30, r16
    1248:	c2 8f       	std	Z+26, r28	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    124a:	df 3f       	cpi	r29, 0xFF	; 255
    124c:	81 f4       	brne	.+32     	; 0x126e <xQueueReceiveFromISR+0x48>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    124e:	80 85       	ldd	r24, Z+8	; 0x08
    1250:	88 23       	and	r24, r24
    1252:	a1 f0       	breq	.+40     	; 0x127c <xQueueReceiveFromISR+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1254:	c8 01       	movw	r24, r16
    1256:	08 96       	adiw	r24, 0x08	; 8
    1258:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <xTaskRemoveFromEventList>
    125c:	88 23       	and	r24, r24
    125e:	81 f0       	breq	.+32     	; 0x1280 <xQueueReceiveFromISR+0x5a>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    1260:	e1 14       	cp	r14, r1
    1262:	f1 04       	cpc	r15, r1
    1264:	79 f0       	breq	.+30     	; 0x1284 <xQueueReceiveFromISR+0x5e>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	f7 01       	movw	r30, r14
    126a:	80 83       	st	Z, r24
    126c:	0c c0       	rjmp	.+24     	; 0x1286 <xQueueReceiveFromISR+0x60>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    126e:	df 5f       	subi	r29, 0xFF	; 255
    1270:	f8 01       	movw	r30, r16
    1272:	d5 8f       	std	Z+29, r29	; 0x1d
			}

			xReturn = pdPASS;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	07 c0       	rjmp	.+14     	; 0x1286 <xQueueReceiveFromISR+0x60>
		}
		else
		{
			xReturn = pdFAIL;
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	05 c0       	rjmp	.+10     	; 0x1286 <xQueueReceiveFromISR+0x60>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
			}

			xReturn = pdPASS;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	03 c0       	rjmp	.+6      	; 0x1286 <xQueueReceiveFromISR+0x60>
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	01 c0       	rjmp	.+2      	; 0x1286 <xQueueReceiveFromISR+0x60>
    1284:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	ff 90       	pop	r15
    1290:	ef 90       	pop	r14
    1292:	08 95       	ret

00001294 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    129c:	fc 01       	movw	r30, r24
    129e:	22 8d       	ldd	r18, Z+26	; 0x1a
    12a0:	22 23       	and	r18, r18
    12a2:	49 f0       	breq	.+18     	; 0x12b6 <xQueuePeekFromISR+0x22>
    12a4:	ec 01       	movw	r28, r24
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    12a6:	06 81       	ldd	r16, Z+6	; 0x06
    12a8:	17 81       	ldd	r17, Z+7	; 0x07
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    12aa:	0e 94 a4 06 	call	0xd48	; 0xd48 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    12ae:	1f 83       	std	Y+7, r17	; 0x07
    12b0:	0e 83       	std	Y+6, r16	; 0x06

			xReturn = pdPASS;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <xQueuePeekFromISR+0x24>
		}
		else
		{
			xReturn = pdFAIL;
    12b6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	08 95       	ret

000012c2 <uxQueueMessagesWaiting>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    12c8:	fc 01       	movw	r30, r24
    12ca:	82 8d       	ldd	r24, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    12cc:	0f 90       	pop	r0
    12ce:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    12d0:	08 95       	ret

000012d2 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    12d2:	fc 01       	movw	r30, r24
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    12da:	93 8d       	ldd	r25, Z+27	; 0x1b
    12dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    12de:	98 1b       	sub	r25, r24
    12e0:	89 2f       	mov	r24, r25
	}
	taskEXIT_CRITICAL();
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    12e6:	08 95       	ret

000012e8 <uxQueueMessagesWaitingFromISR>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    12e8:	fc 01       	movw	r30, r24
    12ea:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    12ec:	08 95       	ret

000012ee <vQueueDelete>:

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    12ee:	0e 94 31 06 	call	0xc62	; 0xc62 <vPortFree>
    12f2:	08 95       	ret

000012f4 <xQueueIsQueueEmptyFromISR>:
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    12f4:	fc 01       	movw	r30, r24
    12f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    12f8:	81 11       	cpse	r24, r1
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <xQueueIsQueueEmptyFromISR+0xc>
	{
		xReturn = pdTRUE;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	08 95       	ret
	}
	else
	{
		xReturn = pdFALSE;
    1300:	80 e0       	ldi	r24, 0x00	; 0
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1302:	08 95       	ret

00001304 <xQueueIsQueueFullFromISR>:
BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    1304:	fc 01       	movw	r30, r24
    1306:	22 8d       	ldd	r18, Z+26	; 0x1a
    1308:	83 8d       	ldd	r24, Z+27	; 0x1b
    130a:	28 13       	cpse	r18, r24
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <xQueueIsQueueFullFromISR+0xe>
	{
		xReturn = pdTRUE;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	08 95       	ret
	}
	else
	{
		xReturn = pdFALSE;
    1312:	80 e0       	ldi	r24, 0x00	; 0
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1314:	08 95       	ret

00001316 <xQueueCRSend>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait )
	{
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	ec 01       	movw	r28, r24
    1324:	7b 01       	movw	r14, r22
    1326:	8a 01       	movw	r16, r20
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;

		/* If the queue is already full we may have to block.  A critical section
		is required to prevent an interrupt removing something from the queue
		between the check to see if the queue is full and blocking on the queue. */
		portDISABLE_INTERRUPTS();
    1328:	f8 94       	cli
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    132a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <prvIsQueueFull>
    132e:	88 23       	and	r24, r24
    1330:	79 f0       	breq	.+30     	; 0x1350 <xQueueCRSend+0x3a>
			{
				/* The queue is full - do we want to block or just leave without
				posting? */
				if( xTicksToWait > ( TickType_t ) 0 )
    1332:	01 15       	cp	r16, r1
    1334:	11 05       	cpc	r17, r1
    1336:	49 f0       	breq	.+18     	; 0x134a <xQueueCRSend+0x34>
				{
					/* As this is called from a coroutine we cannot block directly, but
					return indicating that we need to block. */
					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
    1338:	be 01       	movw	r22, r28
    133a:	68 5f       	subi	r22, 0xF8	; 248
    133c:	7f 4f       	sbci	r23, 0xFF	; 255
    133e:	c8 01       	movw	r24, r16
    1340:	0e 94 ba 01 	call	0x374	; 0x374 <vCoRoutineAddToDelayedList>
					portENABLE_INTERRUPTS();
    1344:	78 94       	sei
					return errQUEUE_BLOCKED;
    1346:	8c ef       	ldi	r24, 0xFC	; 252
    1348:	1f c0       	rjmp	.+62     	; 0x1388 <xQueueCRSend+0x72>
				}
				else
				{
					portENABLE_INTERRUPTS();
    134a:	78 94       	sei
					return errQUEUE_FULL;
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	1c c0       	rjmp	.+56     	; 0x1388 <xQueueCRSend+0x72>
				}
			}
		}
		portENABLE_INTERRUPTS();
    1350:	78 94       	sei

		portDISABLE_INTERRUPTS();
    1352:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1354:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1356:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1358:	98 17       	cp	r25, r24
    135a:	80 f4       	brcc	.+32     	; 0x137c <xQueueCRSend+0x66>
			{
				/* There is room in the queue, copy the data into the queue. */
				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	b7 01       	movw	r22, r14
    1360:	ce 01       	movw	r24, r28
    1362:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <prvCopyDataToQueue>
				xReturn = pdPASS;

				/* Were any co-routines waiting for data to become available? */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1366:	89 89       	ldd	r24, Y+17	; 0x11
    1368:	88 23       	and	r24, r24
    136a:	51 f0       	breq	.+20     	; 0x1380 <xQueueCRSend+0x6a>
				{
					/* In this instance the co-routine could be placed directly
					into the ready list as we are within a critical section.
					Instead the same pending ready list mechanism is used as if
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    136c:	ce 01       	movw	r24, r28
    136e:	41 96       	adiw	r24, 0x11	; 17
    1370:	0e 94 55 02 	call	0x4aa	; 0x4aa <xCoRoutineRemoveFromEventList>
    1374:	81 11       	cpse	r24, r1
    1376:	06 c0       	rjmp	.+12     	; 0x1384 <xQueueCRSend+0x6e>
		{
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
			{
				/* There is room in the queue, copy the data into the queue. */
				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
				xReturn = pdPASS;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	05 c0       	rjmp	.+10     	; 0x1386 <xQueueCRSend+0x70>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				xReturn = errQUEUE_FULL;
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	03 c0       	rjmp	.+6      	; 0x1386 <xQueueCRSend+0x70>
		{
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
			{
				/* There is room in the queue, copy the data into the queue. */
				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
				xReturn = pdPASS;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	01 c0       	rjmp	.+2      	; 0x1386 <xQueueCRSend+0x70>
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
					{
						/* The co-routine waiting has a higher priority so record
						that a yield might be appropriate. */
						xReturn = errQUEUE_YIELD;
    1384:	8b ef       	ldi	r24, 0xFB	; 251
			else
			{
				xReturn = errQUEUE_FULL;
			}
		}
		portENABLE_INTERRUPTS();
    1386:	78 94       	sei

		return xReturn;
	}
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	08 95       	ret

00001396 <xQueueCRReceive>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
	{
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	ec 01       	movw	r28, r24
    139c:	9b 01       	movw	r18, r22
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;

		/* If the queue is already empty we may have to block.  A critical section
		is required to prevent an interrupt adding something to the queue
		between the check to see if the queue is empty and blocking on the queue. */
		portDISABLE_INTERRUPTS();
    139e:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    13a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    13a2:	91 11       	cpse	r25, r1
    13a4:	0f c0       	rjmp	.+30     	; 0x13c4 <xQueueCRReceive+0x2e>
			{
				/* There are no messages in the queue, do we want to block or just
				leave with nothing? */
				if( xTicksToWait > ( TickType_t ) 0 )
    13a6:	41 15       	cp	r20, r1
    13a8:	51 05       	cpc	r21, r1
    13aa:	49 f0       	breq	.+18     	; 0x13be <xQueueCRReceive+0x28>
				{
					/* As this is a co-routine we cannot block directly, but return
					indicating that we need to block. */
					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
    13ac:	be 01       	movw	r22, r28
    13ae:	6f 5e       	subi	r22, 0xEF	; 239
    13b0:	7f 4f       	sbci	r23, 0xFF	; 255
    13b2:	ca 01       	movw	r24, r20
    13b4:	0e 94 ba 01 	call	0x374	; 0x374 <vCoRoutineAddToDelayedList>
					portENABLE_INTERRUPTS();
    13b8:	78 94       	sei
					return errQUEUE_BLOCKED;
    13ba:	8c ef       	ldi	r24, 0xFC	; 252
    13bc:	32 c0       	rjmp	.+100    	; 0x1422 <xQueueCRReceive+0x8c>
				}
				else
				{
					portENABLE_INTERRUPTS();
    13be:	78 94       	sei
					return errQUEUE_FULL;
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	2f c0       	rjmp	.+94     	; 0x1422 <xQueueCRReceive+0x8c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portENABLE_INTERRUPTS();
    13c4:	78 94       	sei

		portDISABLE_INTERRUPTS();
    13c6:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    13c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13ca:	88 23       	and	r24, r24
    13cc:	21 f1       	breq	.+72     	; 0x1416 <xQueueCRReceive+0x80>
			{
				/* Data is available from the queue. */
				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    13ce:	4c 8d       	ldd	r20, Y+28	; 0x1c
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	8e 81       	ldd	r24, Y+6	; 0x06
    13d4:	9f 81       	ldd	r25, Y+7	; 0x07
    13d6:	84 0f       	add	r24, r20
    13d8:	95 1f       	adc	r25, r21
    13da:	9f 83       	std	Y+7, r25	; 0x07
    13dc:	8e 83       	std	Y+6, r24	; 0x06
				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
    13de:	6a 81       	ldd	r22, Y+2	; 0x02
    13e0:	7b 81       	ldd	r23, Y+3	; 0x03
    13e2:	86 17       	cp	r24, r22
    13e4:	97 07       	cpc	r25, r23
    13e6:	20 f0       	brcs	.+8      	; 0x13f0 <xQueueCRReceive+0x5a>
				{
					pxQueue->u.pcReadFrom = pxQueue->pcHead;
    13e8:	88 81       	ld	r24, Y
    13ea:	99 81       	ldd	r25, Y+1	; 0x01
    13ec:	9f 83       	std	Y+7, r25	; 0x07
    13ee:	8e 83       	std	Y+6, r24	; 0x06
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				--( pxQueue->uxMessagesWaiting );
    13f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13f2:	81 50       	subi	r24, 0x01	; 1
    13f4:	8a 8f       	std	Y+26, r24	; 0x1a
				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    13f6:	6e 81       	ldd	r22, Y+6	; 0x06
    13f8:	7f 81       	ldd	r23, Y+7	; 0x07
    13fa:	c9 01       	movw	r24, r18
    13fc:	0e 94 85 14 	call	0x290a	; 0x290a <memcpy>

				xReturn = pdPASS;

				/* Were any co-routines waiting for space to become available? */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1400:	88 85       	ldd	r24, Y+8	; 0x08
    1402:	88 23       	and	r24, r24
    1404:	51 f0       	breq	.+20     	; 0x141a <xQueueCRReceive+0x84>
				{
					/* In this instance the co-routine could be placed directly
					into the ready list as we are within a critical section.
					Instead the same pending ready list mechanism is used as if
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1406:	ce 01       	movw	r24, r28
    1408:	08 96       	adiw	r24, 0x08	; 8
    140a:	0e 94 55 02 	call	0x4aa	; 0x4aa <xCoRoutineRemoveFromEventList>
    140e:	81 11       	cpse	r24, r1
    1410:	06 c0       	rjmp	.+12     	; 0x141e <xQueueCRReceive+0x88>
					mtCOVERAGE_TEST_MARKER();
				}
				--( pxQueue->uxMessagesWaiting );
				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );

				xReturn = pdPASS;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	05 c0       	rjmp	.+10     	; 0x1420 <xQueueCRReceive+0x8a>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				xReturn = pdFAIL;
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	03 c0       	rjmp	.+6      	; 0x1420 <xQueueCRReceive+0x8a>
					mtCOVERAGE_TEST_MARKER();
				}
				--( pxQueue->uxMessagesWaiting );
				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );

				xReturn = pdPASS;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	01 c0       	rjmp	.+2      	; 0x1420 <xQueueCRReceive+0x8a>
					into the ready list as we are within a critical section.
					Instead the same pending ready list mechanism is used as if
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
					{
						xReturn = errQUEUE_YIELD;
    141e:	8b ef       	ldi	r24, 0xFB	; 251
			else
			{
				xReturn = pdFAIL;
			}
		}
		portENABLE_INTERRUPTS();
    1420:	78 94       	sei

		return xReturn;
	}
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	08 95       	ret

00001428 <xQueueCRSendFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRoutinePreviouslyWoken )
	{
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	cf 93       	push	r28
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;

		/* Cannot block within an ISR so if there is no space on the queue then
		exit without doing anything. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    142e:	fc 01       	movw	r30, r24
    1430:	32 8d       	ldd	r19, Z+26	; 0x1a
    1432:	23 8d       	ldd	r18, Z+27	; 0x1b
    1434:	32 17       	cp	r19, r18
    1436:	98 f4       	brcc	.+38     	; 0x145e <xQueueCRSendFromISR+0x36>
    1438:	c4 2f       	mov	r28, r20
    143a:	8c 01       	movw	r16, r24
		{
			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <prvCopyDataToQueue>

			/* We only want to wake one co-routine per ISR, so check that a
			co-routine has not already been woken. */
			if( xCoRoutinePreviouslyWoken == pdFALSE )
    1442:	c1 11       	cpse	r28, r1
    1444:	0e c0       	rjmp	.+28     	; 0x1462 <xQueueCRSendFromISR+0x3a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1446:	f8 01       	movw	r30, r16
    1448:	81 89       	ldd	r24, Z+17	; 0x11
    144a:	88 23       	and	r24, r24
    144c:	61 f0       	breq	.+24     	; 0x1466 <xQueueCRSendFromISR+0x3e>
				{
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    144e:	c8 01       	movw	r24, r16
    1450:	41 96       	adiw	r24, 0x11	; 17
    1452:	0e 94 55 02 	call	0x4aa	; 0x4aa <xCoRoutineRemoveFromEventList>
    1456:	88 23       	and	r24, r24
    1458:	41 f0       	breq	.+16     	; 0x146a <xQueueCRSendFromISR+0x42>
					{
						return pdTRUE;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	07 c0       	rjmp	.+14     	; 0x146c <xQueueCRSendFromISR+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xCoRoutinePreviouslyWoken;
    145e:	84 2f       	mov	r24, r20
    1460:	05 c0       	rjmp	.+10     	; 0x146c <xQueueCRSendFromISR+0x44>
    1462:	8c 2f       	mov	r24, r28
    1464:	03 c0       	rjmp	.+6      	; 0x146c <xQueueCRSendFromISR+0x44>
    1466:	8c 2f       	mov	r24, r28
    1468:	01 c0       	rjmp	.+2      	; 0x146c <xQueueCRSendFromISR+0x44>
    146a:	8c 2f       	mov	r24, r28
	}
    146c:	cf 91       	pop	r28
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	08 95       	ret

00001474 <xQueueCRReceiveFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWoken )
	{
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	fc 01       	movw	r30, r24
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;

		/* We cannot block from an ISR, so check there is data available. If
		not then just leave without doing anything. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    147e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1480:	88 23       	and	r24, r24
    1482:	69 f1       	breq	.+90     	; 0x14de <xQueueCRReceiveFromISR+0x6a>
		{
			/* Copy the data from the queue. */
			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1484:	24 8d       	ldd	r18, Z+28	; 0x1c
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	a6 81       	ldd	r26, Z+6	; 0x06
    148a:	b7 81       	ldd	r27, Z+7	; 0x07
    148c:	a2 0f       	add	r26, r18
    148e:	b3 1f       	adc	r27, r19
    1490:	b7 83       	std	Z+7, r27	; 0x07
    1492:	a6 83       	std	Z+6, r26	; 0x06
			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
    1494:	82 81       	ldd	r24, Z+2	; 0x02
    1496:	93 81       	ldd	r25, Z+3	; 0x03
    1498:	a8 17       	cp	r26, r24
    149a:	b9 07       	cpc	r27, r25
    149c:	20 f0       	brcs	.+8      	; 0x14a6 <xQueueCRReceiveFromISR+0x32>
			{
				pxQueue->u.pcReadFrom = pxQueue->pcHead;
    149e:	80 81       	ld	r24, Z
    14a0:	91 81       	ldd	r25, Z+1	; 0x01
    14a2:	97 83       	std	Z+7, r25	; 0x07
    14a4:	86 83       	std	Z+6, r24	; 0x06
    14a6:	8a 01       	movw	r16, r20
    14a8:	cb 01       	movw	r24, r22
    14aa:	ef 01       	movw	r28, r30
			}
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
			--( pxQueue->uxMessagesWaiting );
    14ac:	42 8d       	ldd	r20, Z+26	; 0x1a
    14ae:	41 50       	subi	r20, 0x01	; 1
    14b0:	42 8f       	std	Z+26, r20	; 0x1a
			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    14b2:	66 81       	ldd	r22, Z+6	; 0x06
    14b4:	77 81       	ldd	r23, Z+7	; 0x07
    14b6:	a9 01       	movw	r20, r18
    14b8:	0e 94 85 14 	call	0x290a	; 0x290a <memcpy>

			if( ( *pxCoRoutineWoken ) == pdFALSE )
    14bc:	f8 01       	movw	r30, r16
    14be:	80 81       	ld	r24, Z
    14c0:	81 11       	cpse	r24, r1
    14c2:	0f c0       	rjmp	.+30     	; 0x14e2 <xQueueCRReceiveFromISR+0x6e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    14c4:	88 85       	ldd	r24, Y+8	; 0x08
    14c6:	88 23       	and	r24, r24
    14c8:	71 f0       	breq	.+28     	; 0x14e6 <xQueueCRReceiveFromISR+0x72>
				{
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    14ca:	ce 01       	movw	r24, r28
    14cc:	08 96       	adiw	r24, 0x08	; 8
    14ce:	0e 94 55 02 	call	0x4aa	; 0x4aa <xCoRoutineRemoveFromEventList>
    14d2:	88 23       	and	r24, r24
    14d4:	51 f0       	breq	.+20     	; 0x14ea <xQueueCRReceiveFromISR+0x76>
					{
						*pxCoRoutineWoken = pdTRUE;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	f8 01       	movw	r30, r16
    14da:	80 83       	st	Z, r24
    14dc:	07 c0       	rjmp	.+14     	; 0x14ec <xQueueCRReceiveFromISR+0x78>

			xReturn = pdPASS;
		}
		else
		{
			xReturn = pdFAIL;
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	05 c0       	rjmp	.+10     	; 0x14ec <xQueueCRReceiveFromISR+0x78>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	03 c0       	rjmp	.+6      	; 0x14ec <xQueueCRReceiveFromISR+0x78>
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	01 c0       	rjmp	.+2      	; 0x14ec <xQueueCRReceiveFromISR+0x78>
    14ea:	81 e0       	ldi	r24, 0x01	; 1
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret

000014f6 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    14f6:	e0 91 75 0d 	lds	r30, 0x0D75	; 0x800d75 <pxDelayedTaskList>
    14fa:	f0 91 76 0d 	lds	r31, 0x0D76	; 0x800d76 <pxDelayedTaskList+0x1>
    14fe:	80 81       	ld	r24, Z
    1500:	81 11       	cpse	r24, r1
    1502:	07 c0       	rjmp	.+14     	; 0x1512 <prvResetNextTaskUnblockTime+0x1c>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    1504:	8f ef       	ldi	r24, 0xFF	; 255
    1506:	9f ef       	ldi	r25, 0xFF	; 255
    1508:	90 93 60 0d 	sts	0x0D60, r25	; 0x800d60 <xNextTaskUnblockTime+0x1>
    150c:	80 93 5f 0d 	sts	0x0D5F, r24	; 0x800d5f <xNextTaskUnblockTime>
    1510:	08 95       	ret
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1512:	e0 91 75 0d 	lds	r30, 0x0D75	; 0x800d75 <pxDelayedTaskList>
    1516:	f0 91 76 0d 	lds	r31, 0x0D76	; 0x800d76 <pxDelayedTaskList+0x1>
    151a:	05 80       	ldd	r0, Z+5	; 0x05
    151c:	f6 81       	ldd	r31, Z+6	; 0x06
    151e:	e0 2d       	mov	r30, r0
    1520:	06 80       	ldd	r0, Z+6	; 0x06
    1522:	f7 81       	ldd	r31, Z+7	; 0x07
    1524:	e0 2d       	mov	r30, r0
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    1526:	82 81       	ldd	r24, Z+2	; 0x02
    1528:	93 81       	ldd	r25, Z+3	; 0x03
    152a:	90 93 60 0d 	sts	0x0D60, r25	; 0x800d60 <xNextTaskUnblockTime+0x1>
    152e:	80 93 5f 0d 	sts	0x0D5F, r24	; 0x800d5f <xNextTaskUnblockTime>
    1532:	08 95       	ret

00001534 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    1534:	6f 92       	push	r6
    1536:	7f 92       	push	r7
    1538:	8f 92       	push	r8
    153a:	9f 92       	push	r9
    153c:	af 92       	push	r10
    153e:	bf 92       	push	r11
    1540:	cf 92       	push	r12
    1542:	df 92       	push	r13
    1544:	ef 92       	push	r14
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	4c 01       	movw	r8, r24
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    1554:	f5 01       	movw	r30, r10
    1556:	87 89       	ldd	r24, Z+23	; 0x17
    1558:	90 8d       	ldd	r25, Z+24	; 0x18
    155a:	21 50       	subi	r18, 0x01	; 1
    155c:	31 09       	sbc	r19, r1
    155e:	3c 01       	movw	r6, r24
    1560:	62 0e       	add	r6, r18
    1562:	73 1e       	adc	r7, r19
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <prvInitialiseNewTask+0x52>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1568:	82 2f       	mov	r24, r18
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	fb 01       	movw	r30, r22
    156e:	e8 0f       	add	r30, r24
    1570:	f9 1f       	adc	r31, r25
    1572:	30 81       	ld	r19, Z
    1574:	d5 01       	movw	r26, r10
    1576:	a8 0f       	add	r26, r24
    1578:	b9 1f       	adc	r27, r25
    157a:	59 96       	adiw	r26, 0x19	; 25
    157c:	3c 93       	st	X, r19

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    157e:	80 81       	ld	r24, Z
    1580:	88 23       	and	r24, r24
    1582:	19 f0       	breq	.+6      	; 0x158a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1584:	2f 5f       	subi	r18, 0xFF	; 255
    1586:	28 30       	cpi	r18, 0x08	; 8
    1588:	78 f3       	brcs	.-34     	; 0x1568 <prvInitialiseNewTask+0x34>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    158a:	f5 01       	movw	r30, r10
    158c:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    158e:	f3 e0       	ldi	r31, 0x03	; 3
    1590:	fe 15       	cp	r31, r14
    1592:	20 f4       	brcc	.+8      	; 0x159c <prvInitialiseNewTask+0x68>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    1594:	0f 2e       	mov	r0, r31
    1596:	f3 e0       	ldi	r31, 0x03	; 3
    1598:	ef 2e       	mov	r14, r31
    159a:	f0 2d       	mov	r31, r0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    159c:	f5 01       	movw	r30, r10
    159e:	e6 8a       	std	Z+22, r14	; 0x16
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    15a0:	c5 01       	movw	r24, r10
    15a2:	02 96       	adiw	r24, 0x02	; 2
    15a4:	0e 94 22 04 	call	0x844	; 0x844 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    15a8:	c5 01       	movw	r24, r10
    15aa:	0c 96       	adiw	r24, 0x0c	; 12
    15ac:	0e 94 22 04 	call	0x844	; 0x844 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    15b0:	f5 01       	movw	r30, r10
    15b2:	b1 86       	std	Z+9, r11	; 0x09
    15b4:	a0 86       	std	Z+8, r10	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    15b6:	84 e0       	ldi	r24, 0x04	; 4
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	8e 19       	sub	r24, r14
    15bc:	91 09       	sbc	r25, r1
    15be:	95 87       	std	Z+13, r25	; 0x0d
    15c0:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    15c2:	b3 8a       	std	Z+19, r11	; 0x13
    15c4:	a2 8a       	std	Z+18, r10	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    15c6:	11 a2       	std	Z+33, r1	; 0x21
    15c8:	12 a2       	std	Z+34, r1	; 0x22
    15ca:	13 a2       	std	Z+35, r1	; 0x23
    15cc:	14 a2       	std	Z+36, r1	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    15ce:	15 a2       	std	Z+37, r1	; 0x25
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    15d0:	a8 01       	movw	r20, r16
    15d2:	b4 01       	movw	r22, r8
    15d4:	c3 01       	movw	r24, r6
    15d6:	0e 94 a8 04 	call	0x950	; 0x950 <pxPortInitialiseStack>
    15da:	f5 01       	movw	r30, r10
    15dc:	91 83       	std	Z+1, r25	; 0x01
    15de:	80 83       	st	Z, r24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    15e0:	c1 14       	cp	r12, r1
    15e2:	d1 04       	cpc	r13, r1
    15e4:	19 f0       	breq	.+6      	; 0x15ec <prvInitialiseNewTask+0xb8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    15e6:	f6 01       	movw	r30, r12
    15e8:	b1 82       	std	Z+1, r11	; 0x01
    15ea:	a0 82       	st	Z, r10
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	ef 90       	pop	r14
    15f6:	df 90       	pop	r13
    15f8:	cf 90       	pop	r12
    15fa:	bf 90       	pop	r11
    15fc:	af 90       	pop	r10
    15fe:	9f 90       	pop	r9
    1600:	8f 90       	pop	r8
    1602:	7f 90       	pop	r7
    1604:	6f 90       	pop	r6
    1606:	08 95       	ret

00001608 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    1608:	cf 93       	push	r28
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    160a:	c0 e0       	ldi	r28, 0x00	; 0
    160c:	10 c0       	rjmp	.+32     	; 0x162e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    160e:	8c 2f       	mov	r24, r28
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9c 01       	movw	r18, r24
    1614:	22 0f       	add	r18, r18
    1616:	33 1f       	adc	r19, r19
    1618:	22 0f       	add	r18, r18
    161a:	33 1f       	adc	r19, r19
    161c:	22 0f       	add	r18, r18
    161e:	33 1f       	adc	r19, r19
    1620:	82 0f       	add	r24, r18
    1622:	93 1f       	adc	r25, r19
    1624:	87 57       	subi	r24, 0x77	; 119
    1626:	92 4f       	sbci	r25, 0xF2	; 242
    1628:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    162c:	cf 5f       	subi	r28, 0xFF	; 255
    162e:	c4 30       	cpi	r28, 0x04	; 4
    1630:	70 f3       	brcs	.-36     	; 0x160e <prvInitialiseTaskLists+0x6>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    1632:	80 e8       	ldi	r24, 0x80	; 128
    1634:	9d e0       	ldi	r25, 0x0D	; 13
    1636:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    163a:	87 e7       	ldi	r24, 0x77	; 119
    163c:	9d e0       	ldi	r25, 0x0D	; 13
    163e:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    1642:	8a e6       	ldi	r24, 0x6A	; 106
    1644:	9d e0       	ldi	r25, 0x0D	; 13
    1646:	0e 94 14 04 	call	0x828	; 0x828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    164a:	80 e8       	ldi	r24, 0x80	; 128
    164c:	9d e0       	ldi	r25, 0x0D	; 13
    164e:	90 93 76 0d 	sts	0x0D76, r25	; 0x800d76 <pxDelayedTaskList+0x1>
    1652:	80 93 75 0d 	sts	0x0D75, r24	; 0x800d75 <pxDelayedTaskList>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1656:	87 e7       	ldi	r24, 0x77	; 119
    1658:	9d e0       	ldi	r25, 0x0D	; 13
    165a:	90 93 74 0d 	sts	0x0D74, r25	; 0x800d74 <pxOverflowDelayedTaskList+0x1>
    165e:	80 93 73 0d 	sts	0x0D73, r24	; 0x800d73 <pxOverflowDelayedTaskList>
}
    1662:	cf 91       	pop	r28
    1664:	08 95       	ret

00001666 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	ec 01       	movw	r28, r24
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    1672:	80 91 69 0d 	lds	r24, 0x0D69	; 0x800d69 <uxCurrentNumberOfTasks>
    1676:	8f 5f       	subi	r24, 0xFF	; 255
    1678:	80 93 69 0d 	sts	0x0D69, r24	; 0x800d69 <uxCurrentNumberOfTasks>
		if( pxCurrentTCB == NULL )
    167c:	80 91 ad 0d 	lds	r24, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1680:	90 91 ae 0d 	lds	r25, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1684:	89 2b       	or	r24, r25
    1686:	59 f4       	brne	.+22     	; 0x169e <prvAddNewTaskToReadyList+0x38>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    1688:	d0 93 ae 0d 	sts	0x0DAE, r29	; 0x800dae <pxCurrentTCB+0x1>
    168c:	c0 93 ad 0d 	sts	0x0DAD, r28	; 0x800dad <pxCurrentTCB>

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1690:	80 91 69 0d 	lds	r24, 0x0D69	; 0x800d69 <uxCurrentNumberOfTasks>
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	99 f4       	brne	.+38     	; 0x16be <prvAddNewTaskToReadyList+0x58>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    1698:	0e 94 04 0b 	call	0x1608	; 0x1608 <prvInitialiseTaskLists>
    169c:	10 c0       	rjmp	.+32     	; 0x16be <prvAddNewTaskToReadyList+0x58>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    169e:	80 91 65 0d 	lds	r24, 0x0D65	; 0x800d65 <xSchedulerRunning>
    16a2:	81 11       	cpse	r24, r1
    16a4:	0c c0       	rjmp	.+24     	; 0x16be <prvAddNewTaskToReadyList+0x58>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    16a6:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    16aa:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    16ae:	96 89       	ldd	r25, Z+22	; 0x16
    16b0:	8e 89       	ldd	r24, Y+22	; 0x16
    16b2:	89 17       	cp	r24, r25
    16b4:	20 f0       	brcs	.+8      	; 0x16be <prvAddNewTaskToReadyList+0x58>
				{
					pxCurrentTCB = pxNewTCB;
    16b6:	d0 93 ae 0d 	sts	0x0DAE, r29	; 0x800dae <pxCurrentTCB+0x1>
    16ba:	c0 93 ad 0d 	sts	0x0DAD, r28	; 0x800dad <pxCurrentTCB>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    16be:	80 91 61 0d 	lds	r24, 0x0D61	; 0x800d61 <uxTaskNumber>
    16c2:	8f 5f       	subi	r24, 0xFF	; 255
    16c4:	80 93 61 0d 	sts	0x0D61, r24	; 0x800d61 <uxTaskNumber>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    16c8:	8e 89       	ldd	r24, Y+22	; 0x16
    16ca:	90 91 66 0d 	lds	r25, 0x0D66	; 0x800d66 <uxTopReadyPriority>
    16ce:	98 17       	cp	r25, r24
    16d0:	10 f4       	brcc	.+4      	; 0x16d6 <prvAddNewTaskToReadyList+0x70>
    16d2:	80 93 66 0d 	sts	0x0D66, r24	; 0x800d66 <uxTopReadyPriority>
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	9c 01       	movw	r18, r24
    16da:	22 0f       	add	r18, r18
    16dc:	33 1f       	adc	r19, r19
    16de:	22 0f       	add	r18, r18
    16e0:	33 1f       	adc	r19, r19
    16e2:	22 0f       	add	r18, r18
    16e4:	33 1f       	adc	r19, r19
    16e6:	82 0f       	add	r24, r18
    16e8:	93 1f       	adc	r25, r19
    16ea:	be 01       	movw	r22, r28
    16ec:	6e 5f       	subi	r22, 0xFE	; 254
    16ee:	7f 4f       	sbci	r23, 0xFF	; 255
    16f0:	87 57       	subi	r24, 0x77	; 119
    16f2:	92 4f       	sbci	r25, 0xF2	; 242
    16f4:	0e 94 26 04 	call	0x84c	; 0x84c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    16f8:	0f 90       	pop	r0
    16fa:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    16fc:	80 91 65 0d 	lds	r24, 0x0D65	; 0x800d65 <xSchedulerRunning>
    1700:	88 23       	and	r24, r24
    1702:	51 f0       	breq	.+20     	; 0x1718 <prvAddNewTaskToReadyList+0xb2>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    1704:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1708:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    170c:	96 89       	ldd	r25, Z+22	; 0x16
    170e:	8e 89       	ldd	r24, Y+22	; 0x16
    1710:	98 17       	cp	r25, r24
    1712:	10 f4       	brcc	.+4      	; 0x1718 <prvAddNewTaskToReadyList+0xb2>
		{
			taskYIELD_IF_USING_PREEMPTION();
    1714:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	08 95       	ret

0000171e <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	ec 01       	movw	r28, r24
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    1728:	00 91 67 0d 	lds	r16, 0x0D67	; 0x800d67 <xTickCount>
    172c:	10 91 68 0d 	lds	r17, 0x0D68	; 0x800d68 <xTickCount+0x1>
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1730:	80 91 ad 0d 	lds	r24, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1734:	90 91 ae 0d 	lds	r25, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1738:	02 96       	adiw	r24, 0x02	; 2
    173a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    173e:	c0 0f       	add	r28, r16
    1740:	d1 1f       	adc	r29, r17

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    1742:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1746:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    174a:	d3 83       	std	Z+3, r29	; 0x03
    174c:	c2 83       	std	Z+2, r28	; 0x02

		if( xTimeToWake < xConstTickCount )
    174e:	c0 17       	cp	r28, r16
    1750:	d1 07       	cpc	r29, r17
    1752:	68 f4       	brcc	.+26     	; 0x176e <prvAddCurrentTaskToDelayedList+0x50>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1754:	60 91 ad 0d 	lds	r22, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1758:	70 91 ae 0d 	lds	r23, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    175c:	80 91 73 0d 	lds	r24, 0x0D73	; 0x800d73 <pxOverflowDelayedTaskList>
    1760:	90 91 74 0d 	lds	r25, 0x0D74	; 0x800d74 <pxOverflowDelayedTaskList+0x1>
    1764:	6e 5f       	subi	r22, 0xFE	; 254
    1766:	7f 4f       	sbci	r23, 0xFF	; 255
    1768:	0e 94 47 04 	call	0x88e	; 0x88e <vListInsert>
    176c:	17 c0       	rjmp	.+46     	; 0x179c <prvAddCurrentTaskToDelayedList+0x7e>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    176e:	60 91 ad 0d 	lds	r22, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1772:	70 91 ae 0d 	lds	r23, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1776:	80 91 75 0d 	lds	r24, 0x0D75	; 0x800d75 <pxDelayedTaskList>
    177a:	90 91 76 0d 	lds	r25, 0x0D76	; 0x800d76 <pxDelayedTaskList+0x1>
    177e:	6e 5f       	subi	r22, 0xFE	; 254
    1780:	7f 4f       	sbci	r23, 0xFF	; 255
    1782:	0e 94 47 04 	call	0x88e	; 0x88e <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    1786:	80 91 5f 0d 	lds	r24, 0x0D5F	; 0x800d5f <xNextTaskUnblockTime>
    178a:	90 91 60 0d 	lds	r25, 0x0D60	; 0x800d60 <xNextTaskUnblockTime+0x1>
    178e:	c8 17       	cp	r28, r24
    1790:	d9 07       	cpc	r29, r25
    1792:	20 f4       	brcc	.+8      	; 0x179c <prvAddCurrentTaskToDelayedList+0x7e>
			{
				xNextTaskUnblockTime = xTimeToWake;
    1794:	d0 93 60 0d 	sts	0x0D60, r29	; 0x800d60 <xNextTaskUnblockTime+0x1>
    1798:	c0 93 5f 0d 	sts	0x0D5F, r28	; 0x800d5f <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	1f 91       	pop	r17
    17a2:	0f 91       	pop	r16
    17a4:	08 95       	ret

000017a6 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    17a6:	80 91 89 0d 	lds	r24, 0x0D89	; 0x800d89 <pxReadyTasksLists>
    17aa:	82 30       	cpi	r24, 0x02	; 2
    17ac:	10 f0       	brcs	.+4      	; 0x17b2 <prvIdleTask+0xc>
			{
				taskYIELD();
    17ae:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    17b2:	0e 94 9e 12 	call	0x253c	; 0x253c <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    17b6:	f7 cf       	rjmp	.-18     	; 0x17a6 <prvIdleTask>

000017b8 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    17b8:	2f 92       	push	r2
    17ba:	3f 92       	push	r3
    17bc:	4f 92       	push	r4
    17be:	5f 92       	push	r5
    17c0:	6f 92       	push	r6
    17c2:	7f 92       	push	r7
    17c4:	8f 92       	push	r8
    17c6:	9f 92       	push	r9
    17c8:	af 92       	push	r10
    17ca:	bf 92       	push	r11
    17cc:	cf 92       	push	r12
    17ce:	df 92       	push	r13
    17d0:	ef 92       	push	r14
    17d2:	ff 92       	push	r15
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	3c 01       	movw	r6, r24
    17de:	1b 01       	movw	r2, r22
    17e0:	5a 01       	movw	r10, r20
    17e2:	29 01       	movw	r4, r18
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    17e4:	ca 01       	movw	r24, r20
    17e6:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <pvPortMalloc>
    17ea:	6c 01       	movw	r12, r24

			if( pxStack != NULL )
    17ec:	89 2b       	or	r24, r25
    17ee:	71 f0       	breq	.+28     	; 0x180c <xTaskCreate+0x54>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    17f0:	86 e2       	ldi	r24, 0x26	; 38
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <pvPortMalloc>
    17f8:	ec 01       	movw	r28, r24

				if( pxNewTCB != NULL )
    17fa:	89 2b       	or	r24, r25
    17fc:	19 f0       	breq	.+6      	; 0x1804 <xTaskCreate+0x4c>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    17fe:	d8 8e       	std	Y+24, r13	; 0x18
    1800:	cf 8a       	std	Y+23, r12	; 0x17
    1802:	06 c0       	rjmp	.+12     	; 0x1810 <xTaskCreate+0x58>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    1804:	c6 01       	movw	r24, r12
    1806:	0e 94 31 06 	call	0xc62	; 0xc62 <vPortFree>
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <xTaskCreate+0x58>
				}
			}
			else
			{
				pxNewTCB = NULL;
    180c:	c0 e0       	ldi	r28, 0x00	; 0
    180e:	d0 e0       	ldi	r29, 0x00	; 0
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    1810:	20 97       	sbiw	r28, 0x00	; 0
    1812:	91 f0       	breq	.+36     	; 0x1838 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    1814:	95 01       	movw	r18, r10
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	81 2c       	mov	r8, r1
    181c:	91 2c       	mov	r9, r1
    181e:	5e 01       	movw	r10, r28
    1820:	67 01       	movw	r12, r14
    1822:	e0 2e       	mov	r14, r16
    1824:	82 01       	movw	r16, r4
    1826:	b1 01       	movw	r22, r2
    1828:	c3 01       	movw	r24, r6
    182a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    182e:	ce 01       	movw	r24, r28
    1830:	0e 94 33 0b 	call	0x1666	; 0x1666 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	01 c0       	rjmp	.+2      	; 0x183a <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1838:	8f ef       	ldi	r24, 0xFF	; 255
		}

		return xReturn;
	}
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	df 90       	pop	r13
    1848:	cf 90       	pop	r12
    184a:	bf 90       	pop	r11
    184c:	af 90       	pop	r10
    184e:	9f 90       	pop	r9
    1850:	8f 90       	pop	r8
    1852:	7f 90       	pop	r7
    1854:	6f 90       	pop	r6
    1856:	5f 90       	pop	r5
    1858:	4f 90       	pop	r4
    185a:	3f 90       	pop	r3
    185c:	2f 90       	pop	r2
    185e:	08 95       	ret

00001860 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    1860:	ef 92       	push	r14
    1862:	ff 92       	push	r15
    1864:	0f 93       	push	r16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    1866:	0f 2e       	mov	r0, r31
    1868:	fd e5       	ldi	r31, 0x5D	; 93
    186a:	ef 2e       	mov	r14, r31
    186c:	fd e0       	ldi	r31, 0x0D	; 13
    186e:	ff 2e       	mov	r15, r31
    1870:	f0 2d       	mov	r31, r0
    1872:	00 e0       	ldi	r16, 0x00	; 0
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	45 e5       	ldi	r20, 0x55	; 85
    187a:	50 e0       	ldi	r21, 0x00	; 0
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	71 e0       	ldi	r23, 0x01	; 1
    1880:	83 ed       	ldi	r24, 0xD3	; 211
    1882:	9b e0       	ldi	r25, 0x0B	; 11
    1884:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    1888:	81 30       	cpi	r24, 0x01	; 1
    188a:	81 f4       	brne	.+32     	; 0x18ac <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    188c:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    188e:	8f ef       	ldi	r24, 0xFF	; 255
    1890:	9f ef       	ldi	r25, 0xFF	; 255
    1892:	90 93 60 0d 	sts	0x0D60, r25	; 0x800d60 <xNextTaskUnblockTime+0x1>
    1896:	80 93 5f 0d 	sts	0x0D5F, r24	; 0x800d5f <xNextTaskUnblockTime>
		xSchedulerRunning = pdTRUE;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	80 93 65 0d 	sts	0x0D65, r24	; 0x800d65 <xSchedulerRunning>
		xTickCount = ( TickType_t ) 0U;
    18a0:	10 92 68 0d 	sts	0x0D68, r1	; 0x800d68 <xTickCount+0x1>
    18a4:	10 92 67 0d 	sts	0x0D67, r1	; 0x800d67 <xTickCount>
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    18a8:	0e 94 14 05 	call	0xa28	; 0xa28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    18ac:	0f 91       	pop	r16
    18ae:	ff 90       	pop	r15
    18b0:	ef 90       	pop	r14
    18b2:	08 95       	ret

000018b4 <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    18b4:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    18b6:	10 92 65 0d 	sts	0x0D65, r1	; 0x800d65 <xSchedulerRunning>
	vPortEndScheduler();
    18ba:	0e 94 43 05 	call	0xa86	; 0xa86 <vPortEndScheduler>
    18be:	08 95       	ret

000018c0 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    18c0:	80 91 5c 0d 	lds	r24, 0x0D5C	; 0x800d5c <uxSchedulerSuspended>
    18c4:	8f 5f       	subi	r24, 0xFF	; 255
    18c6:	80 93 5c 0d 	sts	0x0D5C, r24	; 0x800d5c <uxSchedulerSuspended>
    18ca:	08 95       	ret

000018cc <xTaskGetTickCount>:
TickType_t xTaskGetTickCount( void )
{
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    18d2:	80 91 67 0d 	lds	r24, 0x0D67	; 0x800d67 <xTickCount>
    18d6:	90 91 68 0d 	lds	r25, 0x0D68	; 0x800d68 <xTickCount+0x1>
	}
	portTICK_TYPE_EXIT_CRITICAL();
    18da:	0f 90       	pop	r0
    18dc:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
    18de:	08 95       	ret

000018e0 <xTaskGetTickCountFromISR>:
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
    18e0:	80 91 67 0d 	lds	r24, 0x0D67	; 0x800d67 <xTickCount>
    18e4:	90 91 68 0d 	lds	r25, 0x0D68	; 0x800d68 <xTickCount+0x1>
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    18e8:	08 95       	ret

000018ea <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    18ea:	80 91 69 0d 	lds	r24, 0x0D69	; 0x800d69 <uxCurrentNumberOfTasks>
}
    18ee:	08 95       	ret

000018f0 <pcTaskGetName>:
{
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	21 f4       	brne	.+8      	; 0x18fc <pcTaskGetName+0xc>
    18f4:	80 91 ad 0d 	lds	r24, 0x0DAD	; 0x800dad <pxCurrentTCB>
    18f8:	90 91 ae 0d 	lds	r25, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
}
    18fc:	49 96       	adiw	r24, 0x19	; 25
    18fe:	08 95       	ret

00001900 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    1900:	df 92       	push	r13
    1902:	ef 92       	push	r14
    1904:	ff 92       	push	r15
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    190e:	80 91 5c 0d 	lds	r24, 0x0D5C	; 0x800d5c <uxSchedulerSuspended>
    1912:	81 11       	cpse	r24, r1
    1914:	97 c0       	rjmp	.+302    	; 0x1a44 <xTaskIncrementTick+0x144>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    1916:	e0 90 67 0d 	lds	r14, 0x0D67	; 0x800d67 <xTickCount>
    191a:	f0 90 68 0d 	lds	r15, 0x0D68	; 0x800d68 <xTickCount+0x1>
    191e:	8f ef       	ldi	r24, 0xFF	; 255
    1920:	e8 1a       	sub	r14, r24
    1922:	f8 0a       	sbc	r15, r24

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    1924:	f0 92 68 0d 	sts	0x0D68, r15	; 0x800d68 <xTickCount+0x1>
    1928:	e0 92 67 0d 	sts	0x0D67, r14	; 0x800d67 <xTickCount>

		if( xConstTickCount == ( TickType_t ) 0U )
    192c:	e1 14       	cp	r14, r1
    192e:	f1 04       	cpc	r15, r1
    1930:	b9 f4       	brne	.+46     	; 0x1960 <xTaskIncrementTick+0x60>
		{
			taskSWITCH_DELAYED_LISTS();
    1932:	80 91 75 0d 	lds	r24, 0x0D75	; 0x800d75 <pxDelayedTaskList>
    1936:	90 91 76 0d 	lds	r25, 0x0D76	; 0x800d76 <pxDelayedTaskList+0x1>
    193a:	20 91 73 0d 	lds	r18, 0x0D73	; 0x800d73 <pxOverflowDelayedTaskList>
    193e:	30 91 74 0d 	lds	r19, 0x0D74	; 0x800d74 <pxOverflowDelayedTaskList+0x1>
    1942:	30 93 76 0d 	sts	0x0D76, r19	; 0x800d76 <pxDelayedTaskList+0x1>
    1946:	20 93 75 0d 	sts	0x0D75, r18	; 0x800d75 <pxDelayedTaskList>
    194a:	90 93 74 0d 	sts	0x0D74, r25	; 0x800d74 <pxOverflowDelayedTaskList+0x1>
    194e:	80 93 73 0d 	sts	0x0D73, r24	; 0x800d73 <pxOverflowDelayedTaskList>
    1952:	80 91 62 0d 	lds	r24, 0x0D62	; 0x800d62 <xNumOfOverflows>
    1956:	8f 5f       	subi	r24, 0xFF	; 255
    1958:	80 93 62 0d 	sts	0x0D62, r24	; 0x800d62 <xNumOfOverflows>
    195c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    1960:	80 91 5f 0d 	lds	r24, 0x0D5F	; 0x800d5f <xNextTaskUnblockTime>
    1964:	90 91 60 0d 	lds	r25, 0x0D60	; 0x800d60 <xNextTaskUnblockTime+0x1>
    1968:	e8 16       	cp	r14, r24
    196a:	f9 06       	cpc	r15, r25
    196c:	28 f4       	brcc	.+10     	; 0x1978 <xTaskIncrementTick+0x78>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    196e:	d1 2c       	mov	r13, r1
    1970:	53 c0       	rjmp	.+166    	; 0x1a18 <xTaskIncrementTick+0x118>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
    1972:	dd 24       	eor	r13, r13
    1974:	d3 94       	inc	r13
    1976:	01 c0       	rjmp	.+2      	; 0x197a <xTaskIncrementTick+0x7a>
    1978:	d1 2c       	mov	r13, r1
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    197a:	e0 91 75 0d 	lds	r30, 0x0D75	; 0x800d75 <pxDelayedTaskList>
    197e:	f0 91 76 0d 	lds	r31, 0x0D76	; 0x800d76 <pxDelayedTaskList+0x1>
    1982:	80 81       	ld	r24, Z
    1984:	81 11       	cpse	r24, r1
    1986:	07 c0       	rjmp	.+14     	; 0x1996 <xTaskIncrementTick+0x96>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1988:	8f ef       	ldi	r24, 0xFF	; 255
    198a:	9f ef       	ldi	r25, 0xFF	; 255
    198c:	90 93 60 0d 	sts	0x0D60, r25	; 0x800d60 <xNextTaskUnblockTime+0x1>
    1990:	80 93 5f 0d 	sts	0x0D5F, r24	; 0x800d5f <xNextTaskUnblockTime>
					break;
    1994:	41 c0       	rjmp	.+130    	; 0x1a18 <xTaskIncrementTick+0x118>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1996:	e0 91 75 0d 	lds	r30, 0x0D75	; 0x800d75 <pxDelayedTaskList>
    199a:	f0 91 76 0d 	lds	r31, 0x0D76	; 0x800d76 <pxDelayedTaskList+0x1>
    199e:	05 80       	ldd	r0, Z+5	; 0x05
    19a0:	f6 81       	ldd	r31, Z+6	; 0x06
    19a2:	e0 2d       	mov	r30, r0
    19a4:	c6 81       	ldd	r28, Z+6	; 0x06
    19a6:	d7 81       	ldd	r29, Z+7	; 0x07
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	9b 81       	ldd	r25, Y+3	; 0x03

					if( xConstTickCount < xItemValue )
    19ac:	e8 16       	cp	r14, r24
    19ae:	f9 06       	cpc	r15, r25
    19b0:	28 f4       	brcc	.+10     	; 0x19bc <xTaskIncrementTick+0xbc>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    19b2:	90 93 60 0d 	sts	0x0D60, r25	; 0x800d60 <xNextTaskUnblockTime+0x1>
    19b6:	80 93 5f 0d 	sts	0x0D5F, r24	; 0x800d5f <xNextTaskUnblockTime>
						break;
    19ba:	2e c0       	rjmp	.+92     	; 0x1a18 <xTaskIncrementTick+0x118>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    19bc:	8e 01       	movw	r16, r28
    19be:	0e 5f       	subi	r16, 0xFE	; 254
    19c0:	1f 4f       	sbci	r17, 0xFF	; 255
    19c2:	c8 01       	movw	r24, r16
    19c4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    19c8:	8c 89       	ldd	r24, Y+20	; 0x14
    19ca:	9d 89       	ldd	r25, Y+21	; 0x15
    19cc:	89 2b       	or	r24, r25
    19ce:	21 f0       	breq	.+8      	; 0x19d8 <xTaskIncrementTick+0xd8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    19d0:	ce 01       	movw	r24, r28
    19d2:	0c 96       	adiw	r24, 0x0c	; 12
    19d4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    19d8:	8e 89       	ldd	r24, Y+22	; 0x16
    19da:	90 91 66 0d 	lds	r25, 0x0D66	; 0x800d66 <uxTopReadyPriority>
    19de:	98 17       	cp	r25, r24
    19e0:	10 f4       	brcc	.+4      	; 0x19e6 <xTaskIncrementTick+0xe6>
    19e2:	80 93 66 0d 	sts	0x0D66, r24	; 0x800d66 <uxTopReadyPriority>
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9c 01       	movw	r18, r24
    19ea:	22 0f       	add	r18, r18
    19ec:	33 1f       	adc	r19, r19
    19ee:	22 0f       	add	r18, r18
    19f0:	33 1f       	adc	r19, r19
    19f2:	22 0f       	add	r18, r18
    19f4:	33 1f       	adc	r19, r19
    19f6:	82 0f       	add	r24, r18
    19f8:	93 1f       	adc	r25, r19
    19fa:	b8 01       	movw	r22, r16
    19fc:	87 57       	subi	r24, 0x77	; 119
    19fe:	92 4f       	sbci	r25, 0xF2	; 242
    1a00:	0e 94 26 04 	call	0x84c	; 0x84c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1a04:	9e 89       	ldd	r25, Y+22	; 0x16
    1a06:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1a0a:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1a0e:	86 89       	ldd	r24, Z+22	; 0x16
    1a10:	98 17       	cp	r25, r24
    1a12:	08 f0       	brcs	.+2      	; 0x1a16 <xTaskIncrementTick+0x116>
    1a14:	ae cf       	rjmp	.-164    	; 0x1972 <xTaskIncrementTick+0x72>
    1a16:	b1 cf       	rjmp	.-158    	; 0x197a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    1a18:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1a1c:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1a20:	86 89       	ldd	r24, Z+22	; 0x16
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	fc 01       	movw	r30, r24
    1a26:	ee 0f       	add	r30, r30
    1a28:	ff 1f       	adc	r31, r31
    1a2a:	ee 0f       	add	r30, r30
    1a2c:	ff 1f       	adc	r31, r31
    1a2e:	ee 0f       	add	r30, r30
    1a30:	ff 1f       	adc	r31, r31
    1a32:	8e 0f       	add	r24, r30
    1a34:	9f 1f       	adc	r25, r31
    1a36:	fc 01       	movw	r30, r24
    1a38:	e7 57       	subi	r30, 0x77	; 119
    1a3a:	f2 4f       	sbci	r31, 0xF2	; 242
    1a3c:	80 81       	ld	r24, Z
    1a3e:	82 30       	cpi	r24, 0x02	; 2
    1a40:	40 f4       	brcc	.+16     	; 0x1a52 <xTaskIncrementTick+0x152>
    1a42:	09 c0       	rjmp	.+18     	; 0x1a56 <xTaskIncrementTick+0x156>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    1a44:	80 91 64 0d 	lds	r24, 0x0D64	; 0x800d64 <uxPendedTicks>
    1a48:	8f 5f       	subi	r24, 0xFF	; 255
    1a4a:	80 93 64 0d 	sts	0x0D64, r24	; 0x800d64 <uxPendedTicks>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1a4e:	d1 2c       	mov	r13, r1
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <xTaskIncrementTick+0x156>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
    1a52:	dd 24       	eor	r13, r13
    1a54:	d3 94       	inc	r13
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    1a56:	80 91 63 0d 	lds	r24, 0x0D63	; 0x800d63 <xYieldPending>
    1a5a:	88 23       	and	r24, r24
    1a5c:	11 f0       	breq	.+4      	; 0x1a62 <xTaskIncrementTick+0x162>
		{
			xSwitchRequired = pdTRUE;
    1a5e:	dd 24       	eor	r13, r13
    1a60:	d3 94       	inc	r13
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    1a62:	8d 2d       	mov	r24, r13
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	ff 90       	pop	r15
    1a6e:	ef 90       	pop	r14
    1a70:	df 90       	pop	r13
    1a72:	08 95       	ret

00001a74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    1a82:	80 91 5c 0d 	lds	r24, 0x0D5C	; 0x800d5c <uxSchedulerSuspended>
    1a86:	81 50       	subi	r24, 0x01	; 1
    1a88:	80 93 5c 0d 	sts	0x0D5C, r24	; 0x800d5c <uxSchedulerSuspended>

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1a8c:	80 91 5c 0d 	lds	r24, 0x0D5C	; 0x800d5c <uxSchedulerSuspended>
    1a90:	81 11       	cpse	r24, r1
    1a92:	58 c0       	rjmp	.+176    	; 0x1b44 <xTaskResumeAll+0xd0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1a94:	80 91 69 0d 	lds	r24, 0x0D69	; 0x800d69 <uxCurrentNumberOfTasks>
    1a98:	81 11       	cpse	r24, r1
    1a9a:	33 c0       	rjmp	.+102    	; 0x1b02 <xTaskResumeAll+0x8e>
    1a9c:	56 c0       	rjmp	.+172    	; 0x1b4a <xTaskResumeAll+0xd6>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1a9e:	e0 91 6f 0d 	lds	r30, 0x0D6F	; 0x800d6f <xPendingReadyList+0x5>
    1aa2:	f0 91 70 0d 	lds	r31, 0x0D70	; 0x800d70 <xPendingReadyList+0x6>
    1aa6:	c6 81       	ldd	r28, Z+6	; 0x06
    1aa8:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1aaa:	ce 01       	movw	r24, r28
    1aac:	0c 96       	adiw	r24, 0x0c	; 12
    1aae:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1ab2:	8e 01       	movw	r16, r28
    1ab4:	0e 5f       	subi	r16, 0xFE	; 254
    1ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab8:	c8 01       	movw	r24, r16
    1aba:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1abe:	8e 89       	ldd	r24, Y+22	; 0x16
    1ac0:	90 91 66 0d 	lds	r25, 0x0D66	; 0x800d66 <uxTopReadyPriority>
    1ac4:	98 17       	cp	r25, r24
    1ac6:	10 f4       	brcc	.+4      	; 0x1acc <xTaskResumeAll+0x58>
    1ac8:	80 93 66 0d 	sts	0x0D66, r24	; 0x800d66 <uxTopReadyPriority>
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	9c 01       	movw	r18, r24
    1ad0:	22 0f       	add	r18, r18
    1ad2:	33 1f       	adc	r19, r19
    1ad4:	22 0f       	add	r18, r18
    1ad6:	33 1f       	adc	r19, r19
    1ad8:	22 0f       	add	r18, r18
    1ada:	33 1f       	adc	r19, r19
    1adc:	82 0f       	add	r24, r18
    1ade:	93 1f       	adc	r25, r19
    1ae0:	b8 01       	movw	r22, r16
    1ae2:	87 57       	subi	r24, 0x77	; 119
    1ae4:	92 4f       	sbci	r25, 0xF2	; 242
    1ae6:	0e 94 26 04 	call	0x84c	; 0x84c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1aea:	9e 89       	ldd	r25, Y+22	; 0x16
    1aec:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1af0:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1af4:	86 89       	ldd	r24, Z+22	; 0x16
    1af6:	98 17       	cp	r25, r24
    1af8:	30 f0       	brcs	.+12     	; 0x1b06 <xTaskResumeAll+0x92>
					{
						xYieldPending = pdTRUE;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	80 93 63 0d 	sts	0x0D63, r24	; 0x800d63 <xYieldPending>
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <xTaskResumeAll+0x92>
    1b02:	c0 e0       	ldi	r28, 0x00	; 0
    1b04:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1b06:	80 91 6a 0d 	lds	r24, 0x0D6A	; 0x800d6a <xPendingReadyList>
    1b0a:	81 11       	cpse	r24, r1
    1b0c:	c8 cf       	rjmp	.-112    	; 0x1a9e <xTaskResumeAll+0x2a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    1b0e:	cd 2b       	or	r28, r29
    1b10:	11 f0       	breq	.+4      	; 0x1b16 <xTaskResumeAll+0xa2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    1b12:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    1b16:	c0 91 64 0d 	lds	r28, 0x0D64	; 0x800d64 <uxPendedTicks>

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    1b1a:	cc 23       	and	r28, r28
    1b1c:	59 f0       	breq	.+22     	; 0x1b34 <xTaskResumeAll+0xc0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    1b1e:	0e 94 80 0c 	call	0x1900	; 0x1900 <xTaskIncrementTick>
    1b22:	88 23       	and	r24, r24
    1b24:	19 f0       	breq	.+6      	; 0x1b2c <xTaskResumeAll+0xb8>
							{
								xYieldPending = pdTRUE;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	80 93 63 0d 	sts	0x0D63, r24	; 0x800d63 <xYieldPending>
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    1b2c:	c1 50       	subi	r28, 0x01	; 1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    1b2e:	b9 f7       	brne	.-18     	; 0x1b1e <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
    1b30:	10 92 64 0d 	sts	0x0D64, r1	; 0x800d64 <uxPendedTicks>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    1b34:	80 91 63 0d 	lds	r24, 0x0D63	; 0x800d63 <xYieldPending>
    1b38:	88 23       	and	r24, r24
    1b3a:	31 f0       	breq	.+12     	; 0x1b48 <xTaskResumeAll+0xd4>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    1b3c:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	03 c0       	rjmp	.+6      	; 0x1b4a <xTaskResumeAll+0xd6>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <xTaskResumeAll+0xd6>
    1b48:	80 e0       	ldi	r24, 0x00	; 0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    1b4a:	0f 90       	pop	r0
    1b4c:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	08 95       	ret

00001b58 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    1b58:	0f 93       	push	r16
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	8c 01       	movw	r16, r24
    1b62:	eb 01       	movw	r28, r22

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    1b64:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    1b68:	40 91 67 0d 	lds	r20, 0x0D67	; 0x800d67 <xTickCount>
    1b6c:	50 91 68 0d 	lds	r21, 0x0D68	; 0x800d68 <xTickCount+0x1>

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1b70:	f8 01       	movw	r30, r16
    1b72:	20 81       	ld	r18, Z
    1b74:	31 81       	ldd	r19, Z+1	; 0x01
    1b76:	c9 01       	movw	r24, r18
    1b78:	8c 0f       	add	r24, r28
    1b7a:	9d 1f       	adc	r25, r29

			if( xConstTickCount < *pxPreviousWakeTime )
    1b7c:	42 17       	cp	r20, r18
    1b7e:	53 07       	cpc	r21, r19
    1b80:	40 f4       	brcc	.+16     	; 0x1b92 <vTaskDelayUntil+0x3a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    1b82:	82 17       	cp	r24, r18
    1b84:	93 07       	cpc	r25, r19
    1b86:	68 f4       	brcc	.+26     	; 0x1ba2 <vTaskDelayUntil+0x4a>
    1b88:	48 17       	cp	r20, r24
    1b8a:	59 07       	cpc	r21, r25
    1b8c:	60 f0       	brcs	.+24     	; 0x1ba6 <vTaskDelayUntil+0x4e>
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	0f c0       	rjmp	.+30     	; 0x1bb0 <vTaskDelayUntil+0x58>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    1b92:	82 17       	cp	r24, r18
    1b94:	93 07       	cpc	r25, r19
    1b96:	48 f0       	brcs	.+18     	; 0x1baa <vTaskDelayUntil+0x52>
    1b98:	48 17       	cp	r20, r24
    1b9a:	59 07       	cpc	r21, r25
    1b9c:	40 f0       	brcs	.+16     	; 0x1bae <vTaskDelayUntil+0x56>
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	07 c0       	rjmp	.+14     	; 0x1bb0 <vTaskDelayUntil+0x58>
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	05 c0       	rjmp	.+10     	; 0x1bb0 <vTaskDelayUntil+0x58>
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
				{
					xShouldDelay = pdTRUE;
    1ba6:	21 e0       	ldi	r18, 0x01	; 1
    1ba8:	03 c0       	rjmp	.+6      	; 0x1bb0 <vTaskDelayUntil+0x58>
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
				{
					xShouldDelay = pdTRUE;
    1baa:	21 e0       	ldi	r18, 0x01	; 1
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <vTaskDelayUntil+0x58>
    1bae:	21 e0       	ldi	r18, 0x01	; 1
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1bb0:	f8 01       	movw	r30, r16
    1bb2:	91 83       	std	Z+1, r25	; 0x01
    1bb4:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    1bb6:	22 23       	and	r18, r18
    1bb8:	29 f0       	breq	.+10     	; 0x1bc4 <vTaskDelayUntil+0x6c>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	84 1b       	sub	r24, r20
    1bbe:	95 0b       	sbc	r25, r21
    1bc0:	0e 94 8f 0b 	call	0x171e	; 0x171e <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    1bc4:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1bc8:	81 11       	cpse	r24, r1
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <vTaskDelayUntil+0x78>
		{
			portYIELD_WITHIN_API();
    1bcc:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	08 95       	ret

00001bda <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    1be0:	89 2b       	or	r24, r25
    1be2:	49 f0       	breq	.+18     	; 0x1bf6 <vTaskDelay+0x1c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    1be4:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	ce 01       	movw	r24, r28
    1bec:	0e 94 8f 0b 	call	0x171e	; 0x171e <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1bf0:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <xTaskResumeAll>
    1bf4:	01 c0       	rjmp	.+2      	; 0x1bf8 <vTaskDelay+0x1e>

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
	BaseType_t xAlreadyYielded = pdFALSE;
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1bf8:	81 11       	cpse	r24, r1
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <vTaskDelay+0x26>
		{
			portYIELD_WITHIN_API();
    1bfc:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	08 95       	ret

00001c06 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1c06:	80 91 5c 0d 	lds	r24, 0x0D5C	; 0x800d5c <uxSchedulerSuspended>
    1c0a:	88 23       	and	r24, r24
    1c0c:	21 f0       	breq	.+8      	; 0x1c16 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	80 93 63 0d 	sts	0x0D63, r24	; 0x800d63 <xYieldPending>
    1c14:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    1c16:	10 92 63 0d 	sts	0x0D63, r1	; 0x800d63 <xYieldPending>
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1c1a:	20 91 66 0d 	lds	r18, 0x0D66	; 0x800d66 <uxTopReadyPriority>
    1c1e:	01 c0       	rjmp	.+2      	; 0x1c22 <vTaskSwitchContext+0x1c>
    1c20:	21 50       	subi	r18, 0x01	; 1
    1c22:	82 2f       	mov	r24, r18
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	fc 01       	movw	r30, r24
    1c28:	ee 0f       	add	r30, r30
    1c2a:	ff 1f       	adc	r31, r31
    1c2c:	ee 0f       	add	r30, r30
    1c2e:	ff 1f       	adc	r31, r31
    1c30:	ee 0f       	add	r30, r30
    1c32:	ff 1f       	adc	r31, r31
    1c34:	e8 0f       	add	r30, r24
    1c36:	f9 1f       	adc	r31, r25
    1c38:	e7 57       	subi	r30, 0x77	; 119
    1c3a:	f2 4f       	sbci	r31, 0xF2	; 242
    1c3c:	30 81       	ld	r19, Z
    1c3e:	33 23       	and	r19, r19
    1c40:	79 f3       	breq	.-34     	; 0x1c20 <vTaskSwitchContext+0x1a>
    1c42:	ac 01       	movw	r20, r24
    1c44:	44 0f       	add	r20, r20
    1c46:	55 1f       	adc	r21, r21
    1c48:	44 0f       	add	r20, r20
    1c4a:	55 1f       	adc	r21, r21
    1c4c:	44 0f       	add	r20, r20
    1c4e:	55 1f       	adc	r21, r21
    1c50:	48 0f       	add	r20, r24
    1c52:	59 1f       	adc	r21, r25
    1c54:	df 01       	movw	r26, r30
    1c56:	01 80       	ldd	r0, Z+1	; 0x01
    1c58:	f2 81       	ldd	r31, Z+2	; 0x02
    1c5a:	e0 2d       	mov	r30, r0
    1c5c:	02 80       	ldd	r0, Z+2	; 0x02
    1c5e:	f3 81       	ldd	r31, Z+3	; 0x03
    1c60:	e0 2d       	mov	r30, r0
    1c62:	12 96       	adiw	r26, 0x02	; 2
    1c64:	fc 93       	st	X, r31
    1c66:	ee 93       	st	-X, r30
    1c68:	11 97       	sbiw	r26, 0x01	; 1
    1c6a:	44 57       	subi	r20, 0x74	; 116
    1c6c:	52 4f       	sbci	r21, 0xF2	; 242
    1c6e:	e4 17       	cp	r30, r20
    1c70:	f5 07       	cpc	r31, r21
    1c72:	29 f4       	brne	.+10     	; 0x1c7e <vTaskSwitchContext+0x78>
    1c74:	42 81       	ldd	r20, Z+2	; 0x02
    1c76:	53 81       	ldd	r21, Z+3	; 0x03
    1c78:	fd 01       	movw	r30, r26
    1c7a:	52 83       	std	Z+2, r21	; 0x02
    1c7c:	41 83       	std	Z+1, r20	; 0x01
    1c7e:	fc 01       	movw	r30, r24
    1c80:	ee 0f       	add	r30, r30
    1c82:	ff 1f       	adc	r31, r31
    1c84:	ee 0f       	add	r30, r30
    1c86:	ff 1f       	adc	r31, r31
    1c88:	ee 0f       	add	r30, r30
    1c8a:	ff 1f       	adc	r31, r31
    1c8c:	8e 0f       	add	r24, r30
    1c8e:	9f 1f       	adc	r25, r31
    1c90:	fc 01       	movw	r30, r24
    1c92:	e7 57       	subi	r30, 0x77	; 119
    1c94:	f2 4f       	sbci	r31, 0xF2	; 242
    1c96:	01 80       	ldd	r0, Z+1	; 0x01
    1c98:	f2 81       	ldd	r31, Z+2	; 0x02
    1c9a:	e0 2d       	mov	r30, r0
    1c9c:	86 81       	ldd	r24, Z+6	; 0x06
    1c9e:	97 81       	ldd	r25, Z+7	; 0x07
    1ca0:	90 93 ae 0d 	sts	0x0DAE, r25	; 0x800dae <pxCurrentTCB+0x1>
    1ca4:	80 93 ad 0d 	sts	0x0DAD, r24	; 0x800dad <pxCurrentTCB>
    1ca8:	20 93 66 0d 	sts	0x0D66, r18	; 0x800d66 <uxTopReadyPriority>
    1cac:	08 95       	ret

00001cae <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
    1cb2:	eb 01       	movw	r28, r22

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1cb4:	60 91 ad 0d 	lds	r22, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1cb8:	70 91 ae 0d 	lds	r23, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1cbc:	64 5f       	subi	r22, 0xF4	; 244
    1cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc0:	0e 94 47 04 	call	0x88e	; 0x88e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1cc4:	61 e0       	ldi	r22, 0x01	; 1
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	0e 94 8f 0b 	call	0x171e	; 0x171e <prvAddCurrentTaskToDelayedList>
}
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	08 95       	ret

00001cd2 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	ea 01       	movw	r28, r20
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1cd8:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1cdc:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1ce0:	70 68       	ori	r23, 0x80	; 128
    1ce2:	75 87       	std	Z+13, r23	; 0x0d
    1ce4:	64 87       	std	Z+12, r22	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1ce6:	60 91 ad 0d 	lds	r22, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1cea:	70 91 ae 0d 	lds	r23, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1cee:	64 5f       	subi	r22, 0xF4	; 244
    1cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf2:	0e 94 26 04 	call	0x84c	; 0x84c <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1cf6:	61 e0       	ldi	r22, 0x01	; 1
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	0e 94 8f 0b 	call	0x171e	; 0x171e <prvAddCurrentTaskToDelayedList>
}
    1cfe:	df 91       	pop	r29
    1d00:	cf 91       	pop	r28
    1d02:	08 95       	ret

00001d04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	15 96       	adiw	r26, 0x05	; 5
    1d10:	ed 91       	ld	r30, X+
    1d12:	fc 91       	ld	r31, X
    1d14:	16 97       	sbiw	r26, 0x06	; 6
    1d16:	c6 81       	ldd	r28, Z+6	; 0x06
    1d18:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1d1a:	8e 01       	movw	r16, r28
    1d1c:	04 5f       	subi	r16, 0xF4	; 244
    1d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d20:	c8 01       	movw	r24, r16
    1d22:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1d26:	80 91 5c 0d 	lds	r24, 0x0D5C	; 0x800d5c <uxSchedulerSuspended>
    1d2a:	81 11       	cpse	r24, r1
    1d2c:	1c c0       	rjmp	.+56     	; 0x1d66 <xTaskRemoveFromEventList+0x62>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    1d2e:	0a 50       	subi	r16, 0x0A	; 10
    1d30:	11 09       	sbc	r17, r1
    1d32:	c8 01       	movw	r24, r16
    1d34:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    1d38:	8e 89       	ldd	r24, Y+22	; 0x16
    1d3a:	90 91 66 0d 	lds	r25, 0x0D66	; 0x800d66 <uxTopReadyPriority>
    1d3e:	98 17       	cp	r25, r24
    1d40:	10 f4       	brcc	.+4      	; 0x1d46 <xTaskRemoveFromEventList+0x42>
    1d42:	80 93 66 0d 	sts	0x0D66, r24	; 0x800d66 <uxTopReadyPriority>
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	9c 01       	movw	r18, r24
    1d4a:	22 0f       	add	r18, r18
    1d4c:	33 1f       	adc	r19, r19
    1d4e:	22 0f       	add	r18, r18
    1d50:	33 1f       	adc	r19, r19
    1d52:	22 0f       	add	r18, r18
    1d54:	33 1f       	adc	r19, r19
    1d56:	82 0f       	add	r24, r18
    1d58:	93 1f       	adc	r25, r19
    1d5a:	b8 01       	movw	r22, r16
    1d5c:	87 57       	subi	r24, 0x77	; 119
    1d5e:	92 4f       	sbci	r25, 0xF2	; 242
    1d60:	0e 94 26 04 	call	0x84c	; 0x84c <vListInsertEnd>
    1d64:	05 c0       	rjmp	.+10     	; 0x1d70 <xTaskRemoveFromEventList+0x6c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1d66:	b8 01       	movw	r22, r16
    1d68:	8a e6       	ldi	r24, 0x6A	; 106
    1d6a:	9d e0       	ldi	r25, 0x0D	; 13
    1d6c:	0e 94 26 04 	call	0x84c	; 0x84c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1d70:	9e 89       	ldd	r25, Y+22	; 0x16
    1d72:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1d76:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1d7a:	86 89       	ldd	r24, Z+22	; 0x16
    1d7c:	89 17       	cp	r24, r25
    1d7e:	20 f4       	brcc	.+8      	; 0x1d88 <xTaskRemoveFromEventList+0x84>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	80 93 63 0d 	sts	0x0D63, r24	; 0x800d63 <xYieldPending>
    1d86:	01 c0       	rjmp	.+2      	; 0x1d8a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
    1d88:	80 e0       	ldi	r24, 0x00	; 0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	08 95       	ret

00001d94 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    1d94:	0f 93       	push	r16
    1d96:	1f 93       	push	r17
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1d9c:	70 68       	ori	r23, 0x80	; 128
    1d9e:	fc 01       	movw	r30, r24
    1da0:	71 83       	std	Z+1, r23	; 0x01
    1da2:	60 83       	st	Z, r22

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    1da4:	c6 81       	ldd	r28, Z+6	; 0x06
    1da6:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    1da8:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    1dac:	8e 01       	movw	r16, r28
    1dae:	0e 5f       	subi	r16, 0xFE	; 254
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	c8 01       	movw	r24, r16
    1db4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    1db8:	8e 89       	ldd	r24, Y+22	; 0x16
    1dba:	90 91 66 0d 	lds	r25, 0x0D66	; 0x800d66 <uxTopReadyPriority>
    1dbe:	98 17       	cp	r25, r24
    1dc0:	10 f4       	brcc	.+4      	; 0x1dc6 <xTaskRemoveFromUnorderedEventList+0x32>
    1dc2:	80 93 66 0d 	sts	0x0D66, r24	; 0x800d66 <uxTopReadyPriority>
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9c 01       	movw	r18, r24
    1dca:	22 0f       	add	r18, r18
    1dcc:	33 1f       	adc	r19, r19
    1dce:	22 0f       	add	r18, r18
    1dd0:	33 1f       	adc	r19, r19
    1dd2:	22 0f       	add	r18, r18
    1dd4:	33 1f       	adc	r19, r19
    1dd6:	82 0f       	add	r24, r18
    1dd8:	93 1f       	adc	r25, r19
    1dda:	b8 01       	movw	r22, r16
    1ddc:	87 57       	subi	r24, 0x77	; 119
    1dde:	92 4f       	sbci	r25, 0xF2	; 242
    1de0:	0e 94 26 04 	call	0x84c	; 0x84c <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1de4:	9e 89       	ldd	r25, Y+22	; 0x16
    1de6:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1dea:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1dee:	86 89       	ldd	r24, Z+22	; 0x16
    1df0:	89 17       	cp	r24, r25
    1df2:	20 f4       	brcc	.+8      	; 0x1dfc <xTaskRemoveFromUnorderedEventList+0x68>
		switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	80 93 63 0d 	sts	0x0D63, r24	; 0x800d63 <xYieldPending>
    1dfa:	01 c0       	rjmp	.+2      	; 0x1dfe <xTaskRemoveFromUnorderedEventList+0x6a>
	}
	else
	{
		xReturn = pdFALSE;
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
	}

	return xReturn;
}
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	1f 91       	pop	r17
    1e04:	0f 91       	pop	r16
    1e06:	08 95       	ret

00001e08 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1e08:	20 91 62 0d 	lds	r18, 0x0D62	; 0x800d62 <xNumOfOverflows>
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    1e10:	20 91 67 0d 	lds	r18, 0x0D67	; 0x800d67 <xTickCount>
    1e14:	30 91 68 0d 	lds	r19, 0x0D68	; 0x800d68 <xTickCount+0x1>
    1e18:	32 83       	std	Z+2, r19	; 0x02
    1e1a:	21 83       	std	Z+1, r18	; 0x01
    1e1c:	08 95       	ret

00001e1e <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	fc 01       	movw	r30, r24
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    1e2a:	40 91 67 0d 	lds	r20, 0x0D67	; 0x800d67 <xTickCount>
    1e2e:	50 91 68 0d 	lds	r21, 0x0D68	; 0x800d68 <xTickCount+0x1>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1e32:	90 81       	ld	r25, Z
    1e34:	80 91 62 0d 	lds	r24, 0x0D62	; 0x800d62 <xNumOfOverflows>
    1e38:	98 17       	cp	r25, r24
    1e3a:	29 f0       	breq	.+10     	; 0x1e46 <xTaskCheckForTimeOut+0x28>
    1e3c:	81 81       	ldd	r24, Z+1	; 0x01
    1e3e:	92 81       	ldd	r25, Z+2	; 0x02
    1e40:	48 17       	cp	r20, r24
    1e42:	59 07       	cpc	r21, r25
    1e44:	b0 f4       	brcc	.+44     	; 0x1e72 <xTaskCheckForTimeOut+0x54>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1e46:	21 81       	ldd	r18, Z+1	; 0x01
    1e48:	32 81       	ldd	r19, Z+2	; 0x02
    1e4a:	ca 01       	movw	r24, r20
    1e4c:	82 1b       	sub	r24, r18
    1e4e:	93 0b       	sbc	r25, r19
    1e50:	eb 01       	movw	r28, r22
    1e52:	a8 81       	ld	r26, Y
    1e54:	b9 81       	ldd	r27, Y+1	; 0x01
    1e56:	8a 17       	cp	r24, r26
    1e58:	9b 07       	cpc	r25, r27
    1e5a:	68 f4       	brcc	.+26     	; 0x1e76 <xTaskCheckForTimeOut+0x58>
    1e5c:	cf 01       	movw	r24, r30
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    1e5e:	24 1b       	sub	r18, r20
    1e60:	35 0b       	sbc	r19, r21
    1e62:	2a 0f       	add	r18, r26
    1e64:	3b 1f       	adc	r19, r27
    1e66:	39 83       	std	Y+1, r19	; 0x01
    1e68:	28 83       	st	Y, r18
			vTaskSetTimeOutState( pxTimeOut );
    1e6a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	03 c0       	rjmp	.+6      	; 0x1e78 <xTaskCheckForTimeOut+0x5a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	01 c0       	rjmp	.+2      	; 0x1e78 <xTaskCheckForTimeOut+0x5a>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    1e76:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    1e78:	0f 90       	pop	r0
    1e7a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    1e7c:	df 91       	pop	r29
    1e7e:	cf 91       	pop	r28
    1e80:	08 95       	ret

00001e82 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	80 93 63 0d 	sts	0x0D63, r24	; 0x800d63 <xYieldPending>
    1e88:	08 95       	ret

00001e8a <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1e8a:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1e8e:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1e92:	84 85       	ldd	r24, Z+12	; 0x0c
    1e94:	95 85       	ldd	r25, Z+13	; 0x0d

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1e96:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1e9a:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1e9e:	a0 91 ad 0d 	lds	r26, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1ea2:	b0 91 ae 0d 	lds	r27, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1ea6:	56 96       	adiw	r26, 0x16	; 22
    1ea8:	4c 91       	ld	r20, X
    1eaa:	24 e0       	ldi	r18, 0x04	; 4
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	24 1b       	sub	r18, r20
    1eb0:	31 09       	sbc	r19, r1
    1eb2:	35 87       	std	Z+13, r19	; 0x0d
    1eb4:	24 87       	std	Z+12, r18	; 0x0c

	return uxReturn;
}
    1eb6:	08 95       	ret

00001eb8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    1eb8:	0f 93       	push	r16
    1eba:	1f 93       	push	r17
    1ebc:	cf 93       	push	r28
    1ebe:	c8 2f       	mov	r28, r24
    1ec0:	cb 01       	movw	r24, r22
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    1ec8:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1ecc:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1ed0:	41 a1       	ldd	r20, Z+33	; 0x21
    1ed2:	52 a1       	ldd	r21, Z+34	; 0x22
    1ed4:	63 a1       	ldd	r22, Z+35	; 0x23
    1ed6:	74 a1       	ldd	r23, Z+36	; 0x24
    1ed8:	45 2b       	or	r20, r21
    1eda:	46 2b       	or	r20, r22
    1edc:	47 2b       	or	r20, r23
    1ede:	69 f4       	brne	.+26     	; 0x1efa <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    1ee0:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1ee4:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1ee8:	21 e0       	ldi	r18, 0x01	; 1
    1eea:	25 a3       	std	Z+37, r18	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	29 f0       	breq	.+10     	; 0x1efa <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1ef0:	61 e0       	ldi	r22, 0x01	; 1
    1ef2:	0e 94 8f 0b 	call	0x171e	; 0x171e <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    1ef6:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    1efa:	0f 90       	pop	r0
    1efc:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    1f04:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1f08:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1f0c:	61 a1       	ldd	r22, Z+33	; 0x21
    1f0e:	72 a1       	ldd	r23, Z+34	; 0x22
    1f10:	83 a1       	ldd	r24, Z+35	; 0x23
    1f12:	94 a1       	ldd	r25, Z+36	; 0x24

			if( ulReturn != 0UL )
    1f14:	61 15       	cp	r22, r1
    1f16:	71 05       	cpc	r23, r1
    1f18:	81 05       	cpc	r24, r1
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	c9 f0       	breq	.+50     	; 0x1f50 <ulTaskNotifyTake+0x98>
			{
				if( xClearCountOnExit != pdFALSE )
    1f1e:	cc 23       	and	r28, r28
    1f20:	49 f0       	breq	.+18     	; 0x1f34 <ulTaskNotifyTake+0x7c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    1f22:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1f26:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1f2a:	11 a2       	std	Z+33, r1	; 0x21
    1f2c:	12 a2       	std	Z+34, r1	; 0x22
    1f2e:	13 a2       	std	Z+35, r1	; 0x23
    1f30:	14 a2       	std	Z+36, r1	; 0x24
    1f32:	0e c0       	rjmp	.+28     	; 0x1f50 <ulTaskNotifyTake+0x98>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    1f34:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1f38:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1f3c:	8b 01       	movw	r16, r22
    1f3e:	9c 01       	movw	r18, r24
    1f40:	01 50       	subi	r16, 0x01	; 1
    1f42:	11 09       	sbc	r17, r1
    1f44:	21 09       	sbc	r18, r1
    1f46:	31 09       	sbc	r19, r1
    1f48:	01 a3       	std	Z+33, r16	; 0x21
    1f4a:	12 a3       	std	Z+34, r17	; 0x22
    1f4c:	23 a3       	std	Z+35, r18	; 0x23
    1f4e:	34 a3       	std	Z+36, r19	; 0x24
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1f50:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1f54:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1f58:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    1f5a:	0f 90       	pop	r0
    1f5c:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
	}
    1f5e:	cf 91       	pop	r28
    1f60:	1f 91       	pop	r17
    1f62:	0f 91       	pop	r16
    1f64:	08 95       	ret

00001f66 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    1f66:	4f 92       	push	r4
    1f68:	5f 92       	push	r5
    1f6a:	6f 92       	push	r6
    1f6c:	7f 92       	push	r7
    1f6e:	8f 92       	push	r8
    1f70:	9f 92       	push	r9
    1f72:	af 92       	push	r10
    1f74:	bf 92       	push	r11
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	49 01       	movw	r8, r18
    1f80:	5a 01       	movw	r10, r20
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    1f88:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1f8c:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1f90:	25 a1       	ldd	r18, Z+37	; 0x25
    1f92:	22 30       	cpi	r18, 0x02	; 2
    1f94:	29 f1       	breq	.+74     	; 0x1fe0 <xTaskNotifyWait+0x7a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    1f96:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1f9a:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1f9e:	41 a0       	ldd	r4, Z+33	; 0x21
    1fa0:	52 a0       	ldd	r5, Z+34	; 0x22
    1fa2:	63 a0       	ldd	r6, Z+35	; 0x23
    1fa4:	74 a0       	ldd	r7, Z+36	; 0x24
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	80 95       	com	r24
    1fac:	90 95       	com	r25
    1fae:	a0 95       	com	r26
    1fb0:	b0 95       	com	r27
    1fb2:	84 21       	and	r24, r4
    1fb4:	95 21       	and	r25, r5
    1fb6:	a6 21       	and	r26, r6
    1fb8:	b7 21       	and	r27, r7
    1fba:	81 a3       	std	Z+33, r24	; 0x21
    1fbc:	92 a3       	std	Z+34, r25	; 0x22
    1fbe:	a3 a3       	std	Z+35, r26	; 0x23
    1fc0:	b4 a3       	std	Z+36, r27	; 0x24

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    1fc2:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1fc6:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    1fce:	e1 14       	cp	r14, r1
    1fd0:	f1 04       	cpc	r15, r1
    1fd2:	31 f0       	breq	.+12     	; 0x1fe0 <xTaskNotifyWait+0x7a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1fd4:	61 e0       	ldi	r22, 0x01	; 1
    1fd6:	c7 01       	movw	r24, r14
    1fd8:	0e 94 8f 0b 	call	0x171e	; 0x171e <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    1fdc:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    1fe0:	0f 90       	pop	r0
    1fe2:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    1fea:	01 15       	cp	r16, r1
    1fec:	11 05       	cpc	r17, r1
    1fee:	69 f0       	breq	.+26     	; 0x200a <xTaskNotifyWait+0xa4>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    1ff0:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    1ff4:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    1ff8:	81 a1       	ldd	r24, Z+33	; 0x21
    1ffa:	92 a1       	ldd	r25, Z+34	; 0x22
    1ffc:	a3 a1       	ldd	r26, Z+35	; 0x23
    1ffe:	b4 a1       	ldd	r27, Z+36	; 0x24
    2000:	f8 01       	movw	r30, r16
    2002:	80 83       	st	Z, r24
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	a2 83       	std	Z+2, r26	; 0x02
    2008:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    200a:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    200e:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    2012:	85 a1       	ldd	r24, Z+37	; 0x25
    2014:	81 30       	cpi	r24, 0x01	; 1
    2016:	b1 f0       	breq	.+44     	; 0x2044 <xTaskNotifyWait+0xde>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    2018:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    201c:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    2020:	81 a1       	ldd	r24, Z+33	; 0x21
    2022:	92 a1       	ldd	r25, Z+34	; 0x22
    2024:	a3 a1       	ldd	r26, Z+35	; 0x23
    2026:	b4 a1       	ldd	r27, Z+36	; 0x24
    2028:	80 94       	com	r8
    202a:	90 94       	com	r9
    202c:	a0 94       	com	r10
    202e:	b0 94       	com	r11
    2030:	88 22       	and	r8, r24
    2032:	99 22       	and	r9, r25
    2034:	aa 22       	and	r10, r26
    2036:	bb 22       	and	r11, r27
    2038:	81 a2       	std	Z+33, r8	; 0x21
    203a:	92 a2       	std	Z+34, r9	; 0x22
    203c:	a3 a2       	std	Z+35, r10	; 0x23
    203e:	b4 a2       	std	Z+36, r11	; 0x24
				xReturn = pdTRUE;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	01 c0       	rjmp	.+2      	; 0x2046 <xTaskNotifyWait+0xe0>
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    2044:	80 e0       	ldi	r24, 0x00	; 0
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2046:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    204a:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    204e:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    2050:	0f 90       	pop	r0
    2052:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    2054:	1f 91       	pop	r17
    2056:	0f 91       	pop	r16
    2058:	ff 90       	pop	r15
    205a:	ef 90       	pop	r14
    205c:	bf 90       	pop	r11
    205e:	af 90       	pop	r10
    2060:	9f 90       	pop	r9
    2062:	8f 90       	pop	r8
    2064:	7f 90       	pop	r7
    2066:	6f 90       	pop	r6
    2068:	5f 90       	pop	r5
    206a:	4f 90       	pop	r4
    206c:	08 95       	ret

0000206e <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    206e:	ef 92       	push	r14
    2070:	ff 92       	push	r15
    2072:	0f 93       	push	r16
    2074:	1f 93       	push	r17
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
    207a:	fc 01       	movw	r30, r24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    2082:	01 15       	cp	r16, r1
    2084:	11 05       	cpc	r17, r1
    2086:	49 f0       	breq	.+18     	; 0x209a <xTaskGenericNotify+0x2c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    2088:	81 a1       	ldd	r24, Z+33	; 0x21
    208a:	92 a1       	ldd	r25, Z+34	; 0x22
    208c:	a3 a1       	ldd	r26, Z+35	; 0x23
    208e:	b4 a1       	ldd	r27, Z+36	; 0x24
    2090:	e8 01       	movw	r28, r16
    2092:	88 83       	st	Y, r24
    2094:	99 83       	std	Y+1, r25	; 0x01
    2096:	aa 83       	std	Y+2, r26	; 0x02
    2098:	bb 83       	std	Y+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    209a:	85 a1       	ldd	r24, Z+37	; 0x25

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    209c:	92 e0       	ldi	r25, 0x02	; 2
    209e:	95 a3       	std	Z+37, r25	; 0x25

			switch( eAction )
    20a0:	22 30       	cpi	r18, 0x02	; 2
    20a2:	b9 f0       	breq	.+46     	; 0x20d2 <xTaskGenericNotify+0x64>
    20a4:	18 f4       	brcc	.+6      	; 0x20ac <xTaskGenericNotify+0x3e>
    20a6:	21 30       	cpi	r18, 0x01	; 1
    20a8:	31 f0       	breq	.+12     	; 0x20b6 <xTaskGenericNotify+0x48>
    20aa:	2f c0       	rjmp	.+94     	; 0x210a <xTaskGenericNotify+0x9c>
    20ac:	23 30       	cpi	r18, 0x03	; 3
    20ae:	f9 f0       	breq	.+62     	; 0x20ee <xTaskGenericNotify+0x80>
    20b0:	24 30       	cpi	r18, 0x04	; 4
    20b2:	19 f1       	breq	.+70     	; 0x20fa <xTaskGenericNotify+0x8c>
    20b4:	2a c0       	rjmp	.+84     	; 0x210a <xTaskGenericNotify+0x9c>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    20b6:	01 a1       	ldd	r16, Z+33	; 0x21
    20b8:	12 a1       	ldd	r17, Z+34	; 0x22
    20ba:	23 a1       	ldd	r18, Z+35	; 0x23
    20bc:	34 a1       	ldd	r19, Z+36	; 0x24
    20be:	40 2b       	or	r20, r16
    20c0:	51 2b       	or	r21, r17
    20c2:	62 2b       	or	r22, r18
    20c4:	73 2b       	or	r23, r19
    20c6:	41 a3       	std	Z+33, r20	; 0x21
    20c8:	52 a3       	std	Z+34, r21	; 0x22
    20ca:	63 a3       	std	Z+35, r22	; 0x23
    20cc:	74 a3       	std	Z+36, r23	; 0x24
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    20ce:	11 e0       	ldi	r17, 0x01	; 1

			switch( eAction )
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;
    20d0:	1f c0       	rjmp	.+62     	; 0x2110 <xTaskGenericNotify+0xa2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    20d2:	41 a1       	ldd	r20, Z+33	; 0x21
    20d4:	52 a1       	ldd	r21, Z+34	; 0x22
    20d6:	63 a1       	ldd	r22, Z+35	; 0x23
    20d8:	74 a1       	ldd	r23, Z+36	; 0x24
    20da:	4f 5f       	subi	r20, 0xFF	; 255
    20dc:	5f 4f       	sbci	r21, 0xFF	; 255
    20de:	6f 4f       	sbci	r22, 0xFF	; 255
    20e0:	7f 4f       	sbci	r23, 0xFF	; 255
    20e2:	41 a3       	std	Z+33, r20	; 0x21
    20e4:	52 a3       	std	Z+34, r21	; 0x22
    20e6:	63 a3       	std	Z+35, r22	; 0x23
    20e8:	74 a3       	std	Z+36, r23	; 0x24
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    20ea:	11 e0       	ldi	r17, 0x01	; 1
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
					break;
    20ec:	11 c0       	rjmp	.+34     	; 0x2110 <xTaskGenericNotify+0xa2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    20ee:	41 a3       	std	Z+33, r20	; 0x21
    20f0:	52 a3       	std	Z+34, r21	; 0x22
    20f2:	63 a3       	std	Z+35, r22	; 0x23
    20f4:	74 a3       	std	Z+36, r23	; 0x24
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    20f6:	11 e0       	ldi	r17, 0x01	; 1
					( pxTCB->ulNotifiedValue )++;
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;
    20f8:	0b c0       	rjmp	.+22     	; 0x2110 <xTaskGenericNotify+0xa2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    20fa:	82 30       	cpi	r24, 0x02	; 2
    20fc:	41 f0       	breq	.+16     	; 0x210e <xTaskGenericNotify+0xa0>
					{
						pxTCB->ulNotifiedValue = ulValue;
    20fe:	41 a3       	std	Z+33, r20	; 0x21
    2100:	52 a3       	std	Z+34, r21	; 0x22
    2102:	63 a3       	std	Z+35, r22	; 0x23
    2104:	74 a3       	std	Z+36, r23	; 0x24
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    2106:	11 e0       	ldi	r17, 0x01	; 1
    2108:	03 c0       	rjmp	.+6      	; 0x2110 <xTaskGenericNotify+0xa2>
    210a:	11 e0       	ldi	r17, 0x01	; 1
    210c:	01 c0       	rjmp	.+2      	; 0x2110 <xTaskGenericNotify+0xa2>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    210e:	10 e0       	ldi	r17, 0x00	; 0

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    2110:	81 30       	cpi	r24, 0x01	; 1
    2112:	41 f5       	brne	.+80     	; 0x2164 <xTaskGenericNotify+0xf6>
    2114:	ef 01       	movw	r28, r30
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2116:	7f 01       	movw	r14, r30
    2118:	82 e0       	ldi	r24, 0x02	; 2
    211a:	e8 0e       	add	r14, r24
    211c:	f1 1c       	adc	r15, r1
    211e:	c7 01       	movw	r24, r14
    2120:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    2124:	8e 89       	ldd	r24, Y+22	; 0x16
    2126:	90 91 66 0d 	lds	r25, 0x0D66	; 0x800d66 <uxTopReadyPriority>
    212a:	98 17       	cp	r25, r24
    212c:	10 f4       	brcc	.+4      	; 0x2132 <xTaskGenericNotify+0xc4>
    212e:	80 93 66 0d 	sts	0x0D66, r24	; 0x800d66 <uxTopReadyPriority>
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9c 01       	movw	r18, r24
    2136:	22 0f       	add	r18, r18
    2138:	33 1f       	adc	r19, r19
    213a:	22 0f       	add	r18, r18
    213c:	33 1f       	adc	r19, r19
    213e:	22 0f       	add	r18, r18
    2140:	33 1f       	adc	r19, r19
    2142:	82 0f       	add	r24, r18
    2144:	93 1f       	adc	r25, r19
    2146:	b7 01       	movw	r22, r14
    2148:	87 57       	subi	r24, 0x77	; 119
    214a:	92 4f       	sbci	r25, 0xF2	; 242
    214c:	0e 94 26 04 	call	0x84c	; 0x84c <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    2150:	9e 89       	ldd	r25, Y+22	; 0x16
    2152:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    2156:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    215a:	86 89       	ldd	r24, Z+22	; 0x16
    215c:	89 17       	cp	r24, r25
    215e:	10 f4       	brcc	.+4      	; 0x2164 <xTaskGenericNotify+0xf6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    2160:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    2164:	0f 90       	pop	r0
    2166:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    2168:	81 2f       	mov	r24, r17
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	1f 91       	pop	r17
    2170:	0f 91       	pop	r16
    2172:	ff 90       	pop	r15
    2174:	ef 90       	pop	r14
    2176:	08 95       	ret

00002178 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    2178:	cf 92       	push	r12
    217a:	df 92       	push	r13
    217c:	ef 92       	push	r14
    217e:	ff 92       	push	r15
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	fc 01       	movw	r30, r24

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
    218a:	01 15       	cp	r16, r1
    218c:	11 05       	cpc	r17, r1
    218e:	49 f0       	breq	.+18     	; 0x21a2 <xTaskGenericNotifyFromISR+0x2a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    2190:	81 a1       	ldd	r24, Z+33	; 0x21
    2192:	92 a1       	ldd	r25, Z+34	; 0x22
    2194:	a3 a1       	ldd	r26, Z+35	; 0x23
    2196:	b4 a1       	ldd	r27, Z+36	; 0x24
    2198:	e8 01       	movw	r28, r16
    219a:	88 83       	st	Y, r24
    219c:	99 83       	std	Y+1, r25	; 0x01
    219e:	aa 83       	std	Y+2, r26	; 0x02
    21a0:	bb 83       	std	Y+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    21a2:	85 a1       	ldd	r24, Z+37	; 0x25
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    21a4:	92 e0       	ldi	r25, 0x02	; 2
    21a6:	95 a3       	std	Z+37, r25	; 0x25

			switch( eAction )
    21a8:	22 30       	cpi	r18, 0x02	; 2
    21aa:	b9 f0       	breq	.+46     	; 0x21da <xTaskGenericNotifyFromISR+0x62>
    21ac:	18 f4       	brcc	.+6      	; 0x21b4 <xTaskGenericNotifyFromISR+0x3c>
    21ae:	21 30       	cpi	r18, 0x01	; 1
    21b0:	31 f0       	breq	.+12     	; 0x21be <xTaskGenericNotifyFromISR+0x46>
    21b2:	2f c0       	rjmp	.+94     	; 0x2212 <xTaskGenericNotifyFromISR+0x9a>
    21b4:	23 30       	cpi	r18, 0x03	; 3
    21b6:	f9 f0       	breq	.+62     	; 0x21f6 <xTaskGenericNotifyFromISR+0x7e>
    21b8:	24 30       	cpi	r18, 0x04	; 4
    21ba:	19 f1       	breq	.+70     	; 0x2202 <xTaskGenericNotifyFromISR+0x8a>
    21bc:	2a c0       	rjmp	.+84     	; 0x2212 <xTaskGenericNotifyFromISR+0x9a>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    21be:	01 a1       	ldd	r16, Z+33	; 0x21
    21c0:	12 a1       	ldd	r17, Z+34	; 0x22
    21c2:	23 a1       	ldd	r18, Z+35	; 0x23
    21c4:	34 a1       	ldd	r19, Z+36	; 0x24
    21c6:	40 2b       	or	r20, r16
    21c8:	51 2b       	or	r21, r17
    21ca:	62 2b       	or	r22, r18
    21cc:	73 2b       	or	r23, r19
    21ce:	41 a3       	std	Z+33, r20	; 0x21
    21d0:	52 a3       	std	Z+34, r21	; 0x22
    21d2:	63 a3       	std	Z+35, r22	; 0x23
    21d4:	74 a3       	std	Z+36, r23	; 0x24

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    21d6:	11 e0       	ldi	r17, 0x01	; 1

			switch( eAction )
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;
    21d8:	1f c0       	rjmp	.+62     	; 0x2218 <xTaskGenericNotifyFromISR+0xa0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    21da:	41 a1       	ldd	r20, Z+33	; 0x21
    21dc:	52 a1       	ldd	r21, Z+34	; 0x22
    21de:	63 a1       	ldd	r22, Z+35	; 0x23
    21e0:	74 a1       	ldd	r23, Z+36	; 0x24
    21e2:	4f 5f       	subi	r20, 0xFF	; 255
    21e4:	5f 4f       	sbci	r21, 0xFF	; 255
    21e6:	6f 4f       	sbci	r22, 0xFF	; 255
    21e8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ea:	41 a3       	std	Z+33, r20	; 0x21
    21ec:	52 a3       	std	Z+34, r21	; 0x22
    21ee:	63 a3       	std	Z+35, r22	; 0x23
    21f0:	74 a3       	std	Z+36, r23	; 0x24

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    21f2:	11 e0       	ldi	r17, 0x01	; 1
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
					break;
    21f4:	11 c0       	rjmp	.+34     	; 0x2218 <xTaskGenericNotifyFromISR+0xa0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    21f6:	41 a3       	std	Z+33, r20	; 0x21
    21f8:	52 a3       	std	Z+34, r21	; 0x22
    21fa:	63 a3       	std	Z+35, r22	; 0x23
    21fc:	74 a3       	std	Z+36, r23	; 0x24

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    21fe:	11 e0       	ldi	r17, 0x01	; 1
					( pxTCB->ulNotifiedValue )++;
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;
    2200:	0b c0       	rjmp	.+22     	; 0x2218 <xTaskGenericNotifyFromISR+0xa0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	41 f0       	breq	.+16     	; 0x2216 <xTaskGenericNotifyFromISR+0x9e>
					{
						pxTCB->ulNotifiedValue = ulValue;
    2206:	41 a3       	std	Z+33, r20	; 0x21
    2208:	52 a3       	std	Z+34, r21	; 0x22
    220a:	63 a3       	std	Z+35, r22	; 0x23
    220c:	74 a3       	std	Z+36, r23	; 0x24

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    220e:	11 e0       	ldi	r17, 0x01	; 1
    2210:	03 c0       	rjmp	.+6      	; 0x2218 <xTaskGenericNotifyFromISR+0xa0>
    2212:	11 e0       	ldi	r17, 0x01	; 1
    2214:	01 c0       	rjmp	.+2      	; 0x2218 <xTaskGenericNotifyFromISR+0xa0>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    2216:	10 e0       	ldi	r17, 0x00	; 0

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    2218:	81 30       	cpi	r24, 0x01	; 1
    221a:	e1 f5       	brne	.+120    	; 0x2294 <xTaskGenericNotifyFromISR+0x11c>
    221c:	ef 01       	movw	r28, r30
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    221e:	80 91 5c 0d 	lds	r24, 0x0D5C	; 0x800d5c <uxSchedulerSuspended>
    2222:	81 11       	cpse	r24, r1
    2224:	1e c0       	rjmp	.+60     	; 0x2262 <xTaskGenericNotifyFromISR+0xea>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2226:	6f 01       	movw	r12, r30
    2228:	e2 e0       	ldi	r30, 0x02	; 2
    222a:	ce 0e       	add	r12, r30
    222c:	d1 1c       	adc	r13, r1
    222e:	c6 01       	movw	r24, r12
    2230:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    2234:	8e 89       	ldd	r24, Y+22	; 0x16
    2236:	90 91 66 0d 	lds	r25, 0x0D66	; 0x800d66 <uxTopReadyPriority>
    223a:	98 17       	cp	r25, r24
    223c:	10 f4       	brcc	.+4      	; 0x2242 <xTaskGenericNotifyFromISR+0xca>
    223e:	80 93 66 0d 	sts	0x0D66, r24	; 0x800d66 <uxTopReadyPriority>
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9c 01       	movw	r18, r24
    2246:	22 0f       	add	r18, r18
    2248:	33 1f       	adc	r19, r19
    224a:	22 0f       	add	r18, r18
    224c:	33 1f       	adc	r19, r19
    224e:	22 0f       	add	r18, r18
    2250:	33 1f       	adc	r19, r19
    2252:	82 0f       	add	r24, r18
    2254:	93 1f       	adc	r25, r19
    2256:	b6 01       	movw	r22, r12
    2258:	87 57       	subi	r24, 0x77	; 119
    225a:	92 4f       	sbci	r25, 0xF2	; 242
    225c:	0e 94 26 04 	call	0x84c	; 0x84c <vListInsertEnd>
    2260:	07 c0       	rjmp	.+14     	; 0x2270 <xTaskGenericNotifyFromISR+0xf8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    2262:	bf 01       	movw	r22, r30
    2264:	64 5f       	subi	r22, 0xF4	; 244
    2266:	7f 4f       	sbci	r23, 0xFF	; 255
    2268:	8a e6       	ldi	r24, 0x6A	; 106
    226a:	9d e0       	ldi	r25, 0x0D	; 13
    226c:	0e 94 26 04 	call	0x84c	; 0x84c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    2270:	9e 89       	ldd	r25, Y+22	; 0x16
    2272:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    2276:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    227a:	86 89       	ldd	r24, Z+22	; 0x16
    227c:	89 17       	cp	r24, r25
    227e:	50 f4       	brcc	.+20     	; 0x2294 <xTaskGenericNotifyFromISR+0x11c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    2280:	e1 14       	cp	r14, r1
    2282:	f1 04       	cpc	r15, r1
    2284:	21 f0       	breq	.+8      	; 0x228e <xTaskGenericNotifyFromISR+0x116>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	e7 01       	movw	r28, r14
    228a:	88 83       	st	Y, r24
    228c:	03 c0       	rjmp	.+6      	; 0x2294 <xTaskGenericNotifyFromISR+0x11c>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	80 93 63 0d 	sts	0x0D63, r24	; 0x800d63 <xYieldPending>
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
    2294:	81 2f       	mov	r24, r17
    2296:	df 91       	pop	r29
    2298:	cf 91       	pop	r28
    229a:	1f 91       	pop	r17
    229c:	0f 91       	pop	r16
    229e:	ff 90       	pop	r15
    22a0:	ef 90       	pop	r14
    22a2:	df 90       	pop	r13
    22a4:	cf 90       	pop	r12
    22a6:	08 95       	ret

000022a8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    22a8:	ef 92       	push	r14
    22aa:	ff 92       	push	r15
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	fc 01       	movw	r30, r24

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    22b6:	25 a1       	ldd	r18, Z+37	; 0x25
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    22b8:	82 e0       	ldi	r24, 0x02	; 2
    22ba:	85 a3       	std	Z+37, r24	; 0x25

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    22bc:	81 a1       	ldd	r24, Z+33	; 0x21
    22be:	92 a1       	ldd	r25, Z+34	; 0x22
    22c0:	a3 a1       	ldd	r26, Z+35	; 0x23
    22c2:	b4 a1       	ldd	r27, Z+36	; 0x24
    22c4:	01 96       	adiw	r24, 0x01	; 1
    22c6:	a1 1d       	adc	r26, r1
    22c8:	b1 1d       	adc	r27, r1
    22ca:	81 a3       	std	Z+33, r24	; 0x21
    22cc:	92 a3       	std	Z+34, r25	; 0x22
    22ce:	a3 a3       	std	Z+35, r26	; 0x23
    22d0:	b4 a3       	std	Z+36, r27	; 0x24

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    22d2:	21 30       	cpi	r18, 0x01	; 1
    22d4:	e9 f5       	brne	.+122    	; 0x2350 <vTaskNotifyGiveFromISR+0xa8>
    22d6:	8b 01       	movw	r16, r22
    22d8:	ef 01       	movw	r28, r30
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    22da:	80 91 5c 0d 	lds	r24, 0x0D5C	; 0x800d5c <uxSchedulerSuspended>
    22de:	81 11       	cpse	r24, r1
    22e0:	1e c0       	rjmp	.+60     	; 0x231e <vTaskNotifyGiveFromISR+0x76>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    22e2:	7f 01       	movw	r14, r30
    22e4:	82 e0       	ldi	r24, 0x02	; 2
    22e6:	e8 0e       	add	r14, r24
    22e8:	f1 1c       	adc	r15, r1
    22ea:	c7 01       	movw	r24, r14
    22ec:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    22f0:	8e 89       	ldd	r24, Y+22	; 0x16
    22f2:	90 91 66 0d 	lds	r25, 0x0D66	; 0x800d66 <uxTopReadyPriority>
    22f6:	98 17       	cp	r25, r24
    22f8:	10 f4       	brcc	.+4      	; 0x22fe <vTaskNotifyGiveFromISR+0x56>
    22fa:	80 93 66 0d 	sts	0x0D66, r24	; 0x800d66 <uxTopReadyPriority>
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	9c 01       	movw	r18, r24
    2302:	22 0f       	add	r18, r18
    2304:	33 1f       	adc	r19, r19
    2306:	22 0f       	add	r18, r18
    2308:	33 1f       	adc	r19, r19
    230a:	22 0f       	add	r18, r18
    230c:	33 1f       	adc	r19, r19
    230e:	82 0f       	add	r24, r18
    2310:	93 1f       	adc	r25, r19
    2312:	b7 01       	movw	r22, r14
    2314:	87 57       	subi	r24, 0x77	; 119
    2316:	92 4f       	sbci	r25, 0xF2	; 242
    2318:	0e 94 26 04 	call	0x84c	; 0x84c <vListInsertEnd>
    231c:	07 c0       	rjmp	.+14     	; 0x232c <vTaskNotifyGiveFromISR+0x84>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    231e:	bf 01       	movw	r22, r30
    2320:	64 5f       	subi	r22, 0xF4	; 244
    2322:	7f 4f       	sbci	r23, 0xFF	; 255
    2324:	8a e6       	ldi	r24, 0x6A	; 106
    2326:	9d e0       	ldi	r25, 0x0D	; 13
    2328:	0e 94 26 04 	call	0x84c	; 0x84c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    232c:	9e 89       	ldd	r25, Y+22	; 0x16
    232e:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <pxCurrentTCB>
    2332:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>
    2336:	86 89       	ldd	r24, Z+22	; 0x16
    2338:	89 17       	cp	r24, r25
    233a:	50 f4       	brcc	.+20     	; 0x2350 <vTaskNotifyGiveFromISR+0xa8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    233c:	01 15       	cp	r16, r1
    233e:	11 05       	cpc	r17, r1
    2340:	21 f0       	breq	.+8      	; 0x234a <vTaskNotifyGiveFromISR+0xa2>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	f8 01       	movw	r30, r16
    2346:	80 83       	st	Z, r24
    2348:	03 c0       	rjmp	.+6      	; 0x2350 <vTaskNotifyGiveFromISR+0xa8>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	80 93 63 0d 	sts	0x0D63, r24	; 0x800d63 <xYieldPending>
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	ff 90       	pop	r15
    235a:	ef 90       	pop	r14
    235c:	08 95       	ret

0000235e <xTaskNotifyStateClear>:
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	21 f4       	brne	.+8      	; 0x236a <xTaskNotifyStateClear+0xc>
    2362:	80 91 ad 0d 	lds	r24, 0x0DAD	; 0x800dad <pxCurrentTCB>
    2366:	90 91 ae 0d 	lds	r25, 0x0DAE	; 0x800dae <pxCurrentTCB+0x1>

		taskENTER_CRITICAL();
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2370:	fc 01       	movw	r30, r24
    2372:	25 a1       	ldd	r18, Z+37	; 0x25
    2374:	22 30       	cpi	r18, 0x02	; 2
    2376:	19 f4       	brne	.+6      	; 0x237e <xTaskNotifyStateClear+0x20>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2378:	15 a2       	std	Z+37, r1	; 0x25
				xReturn = pdPASS;
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	01 c0       	rjmp	.+2      	; 0x2380 <xTaskNotifyStateClear+0x22>
			}
			else
			{
				xReturn = pdFAIL;
    237e:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		taskEXIT_CRITICAL();
    2380:	0f 90       	pop	r0
    2382:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    2384:	08 95       	ret

00002386 <vUART1TransmitService>:
	( void ) pvParameters;
	
	for( ;; ) {
		/* Waits for bufferSendUART1 to fill, then pops first byte of data and
		   copies it to UART1 data register UDR1 effectively transmitting it. */ 
		xQueueReceive( bufferSendUART1Bluetooth, &UDR1, portMAX_DELAY );
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	4f ef       	ldi	r20, 0xFF	; 255
    238a:	5f ef       	ldi	r21, 0xFF	; 255
    238c:	6c e9       	ldi	r22, 0x9C	; 156
    238e:	70 e0       	ldi	r23, 0x00	; 0
    2390:	80 91 d4 0d 	lds	r24, 0x0DD4	; 0x800dd4 <bufferSendUART1Bluetooth>
    2394:	90 91 d5 0d 	lds	r25, 0x0DD5	; 0x800dd5 <bufferSendUART1Bluetooth+0x1>
    2398:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <xQueueGenericReceive>
		while(!( UCSR1A & (1<<UDRE1)));		// Wait for transmit to finish
    239c:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    23a0:	85 ff       	sbrs	r24, 5
    23a2:	fc cf       	rjmp	.-8      	; 0x239c <vUART1TransmitService+0x16>
    23a4:	f0 cf       	rjmp	.-32     	; 0x2386 <vUART1TransmitService>

000023a6 <vUART0TransmitService>:
	( void ) pvParameters;
	
	for( ;; ) {
		/* Waits for bufferSendUART0 to fill, then pops first byte of data and
		   copies it to UART0 data register UDR0 effectively transmitting it. */ 
		xQueueReceive( bufferSendUART0Serial, &UDR0, portMAX_DELAY );
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	4f ef       	ldi	r20, 0xFF	; 255
    23aa:	5f ef       	ldi	r21, 0xFF	; 255
    23ac:	6c e2       	ldi	r22, 0x2C	; 44
    23ae:	70 e0       	ldi	r23, 0x00	; 0
    23b0:	80 91 d2 0d 	lds	r24, 0x0DD2	; 0x800dd2 <bufferSendUART0Serial>
    23b4:	90 91 d3 0d 	lds	r25, 0x0DD3	; 0x800dd3 <bufferSendUART0Serial+0x1>
    23b8:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <xQueueGenericReceive>
		while(!( UCSR0A & (1<<UDRE0)));		// Wait for transmit to finish
    23bc:	5d 9b       	sbis	0x0b, 5	; 11
    23be:	fe cf       	rjmp	.-4      	; 0x23bc <vUART0TransmitService+0x16>
    23c0:	f2 cf       	rjmp	.-28     	; 0x23a6 <vUART0TransmitService>

000023c2 <sendCharacter>:
		xQueueSendToBack( queue, message+i, pdMS_TO_TICKS(10));
	}
}


static void sendCharacter( unsigned char character, QueueHandle_t queue) {
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	1f 92       	push	r1
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	cb 01       	movw	r24, r22
	/* Receives a character and pushes it on UART send queue. */
	xQueueSendToBack( queue, &character, pdMS_TO_TICKS(10));
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	41 e0       	ldi	r20, 0x01	; 1
    23d4:	50 e0       	ldi	r21, 0x00	; 0
    23d6:	be 01       	movw	r22, r28
    23d8:	6f 5f       	subi	r22, 0xFF	; 255
    23da:	7f 4f       	sbci	r23, 0xFF	; 255
    23dc:	0e 94 75 07 	call	0xeea	; 0xeea <xQueueGenericSend>
}
    23e0:	0f 90       	pop	r0
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	08 95       	ret

000023e8 <vUART1ReceiveService>:
		xQueueReceive( bufferSendUART1Bluetooth, &UDR1, portMAX_DELAY );
		while(!( UCSR1A & (1<<UDRE1)));		// Wait for transmit to finish
	}
}

static void vUART1ReceiveService( void *pvParameters ) {
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <vUART1ReceiveService+0x6>
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62

	/* The parameters are not used. */
	( void ) pvParameters;
	
	for( ;; ) {
		xQueueReceive( bufferReceiveUART1Bluetooth, &opcode, portMAX_DELAY );
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	4f ef       	ldi	r20, 0xFF	; 255
    23f6:	5f ef       	ldi	r21, 0xFF	; 255
    23f8:	be 01       	movw	r22, r28
    23fa:	6f 5f       	subi	r22, 0xFF	; 255
    23fc:	7f 4f       	sbci	r23, 0xFF	; 255
    23fe:	80 91 b3 0d 	lds	r24, 0x0DB3	; 0x800db3 <bufferReceiveUART1Bluetooth>
    2402:	90 91 b4 0d 	lds	r25, 0x0DB4	; 0x800db4 <bufferReceiveUART1Bluetooth+0x1>
    2406:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <xQueueGenericReceive>

		if( opcode >= SCI_START_OPCODE && opcode <= SCI_FORCE_SEEKING_DOCK_OPCODE ) {
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	90 e8       	ldi	r25, 0x80	; 128
    240e:	98 0f       	add	r25, r24
    2410:	90 31       	cpi	r25, 0x10	; 16
    2412:	78 f7       	brcc	.-34     	; 0x23f2 <vUART1ReceiveService+0xa>
			
			switch( opcode ) {
    2414:	48 2f       	mov	r20, r24
    2416:	50 e0       	ldi	r21, 0x00	; 0
    2418:	fa 01       	movw	r30, r20
    241a:	e0 58       	subi	r30, 0x80	; 128
    241c:	f1 09       	sbc	r31, r1
    241e:	e0 31       	cpi	r30, 0x10	; 16
    2420:	f1 05       	cpc	r31, r1
    2422:	68 f4       	brcc	.+26     	; 0x243e <vUART1ReceiveService+0x56>
    2424:	ea 5b       	subi	r30, 0xBA	; 186
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__tablejump2__>
					break;
				case SCI_BAUD_OPCODE:
				case SCI_MOTORS_OPCODE:
				case SCI_PLAY_OPCODE:
				case SCI_SENSORS_OPCODE:
					numberOfDataBytes = 1;
    242c:	11 e0       	ldi	r17, 0x01	; 1
					break;
    242e:	07 c0       	rjmp	.+14     	; 0x243e <vUART1ReceiveService+0x56>
				case SCI_LEDS_OPCODE:
					numberOfDataBytes = 3;
    2430:	13 e0       	ldi	r17, 0x03	; 3
					break;
    2432:	05 c0       	rjmp	.+10     	; 0x243e <vUART1ReceiveService+0x56>
				case SCI_SONG_OPCODE: // Special case - variable length
					numberOfDataBytes = 3;
    2434:	13 e0       	ldi	r17, 0x03	; 3
					break;
    2436:	03 c0       	rjmp	.+6      	; 0x243e <vUART1ReceiveService+0x56>
				case SCI_DRIVE_OPCODE:
					numberOfDataBytes = 4;
    2438:	14 e0       	ldi	r17, 0x04	; 4
					break;
    243a:	01 c0       	rjmp	.+2      	; 0x243e <vUART1ReceiveService+0x56>
				case SCI_POWER_OPCODE:
				case SCI_SPOT_OPCODE:
				case SCI_CLEAN_OPCODE:
				case SCI_MAX_OPCODE:
				case SCI_FORCE_SEEKING_DOCK_OPCODE:
					numberOfDataBytes = 0;
    243c:	10 e0       	ldi	r17, 0x00	; 0
					numberOfDataBytes = 4;
					break;
				default:
				break;
			}
			sendCharacter(opcode, bufferSendUART0Serial);
    243e:	60 91 d2 0d 	lds	r22, 0x0DD2	; 0x800dd2 <bufferSendUART0Serial>
    2442:	70 91 d3 0d 	lds	r23, 0x0DD3	; 0x800dd3 <bufferSendUART0Serial+0x1>
    2446:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <sendCharacter>
			while( numberOfDataBytes ) {
    244a:	14 c0       	rjmp	.+40     	; 0x2474 <vUART1ReceiveService+0x8c>
				xQueueReceive( bufferReceiveUART1Bluetooth, &data, 0 );
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	50 e0       	ldi	r21, 0x00	; 0
    2452:	be 01       	movw	r22, r28
    2454:	6e 5f       	subi	r22, 0xFE	; 254
    2456:	7f 4f       	sbci	r23, 0xFF	; 255
    2458:	80 91 b3 0d 	lds	r24, 0x0DB3	; 0x800db3 <bufferReceiveUART1Bluetooth>
    245c:	90 91 b4 0d 	lds	r25, 0x0DB4	; 0x800db4 <bufferReceiveUART1Bluetooth+0x1>
    2460:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <xQueueGenericReceive>
				sendCharacter(data, bufferSendUART0Serial);
    2464:	60 91 d2 0d 	lds	r22, 0x0DD2	; 0x800dd2 <bufferSendUART0Serial>
    2468:	70 91 d3 0d 	lds	r23, 0x0DD3	; 0x800dd3 <bufferSendUART0Serial+0x1>
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <sendCharacter>
				--numberOfDataBytes;
    2472:	11 50       	subi	r17, 0x01	; 1
					break;
				default:
				break;
			}
			sendCharacter(opcode, bufferSendUART0Serial);
			while( numberOfDataBytes ) {
    2474:	11 11       	cpse	r17, r1
    2476:	ea cf       	rjmp	.-44     	; 0x244c <vUART1ReceiveService+0x64>
    2478:	bc cf       	rjmp	.-136    	; 0x23f2 <vUART1ReceiveService+0xa>

0000247a <main>:

/* Storage of values for Roomba sensors and sensors on MCU pins. */
volatile uint8_t sensorData[27];


int main( void ) {
    247a:	ef 92       	push	r14
    247c:	ff 92       	push	r15
    247e:	0f 93       	push	r16

	bufferSendUART0Serial = xQueueCreate(32, sizeof(unsigned char));
    2480:	40 e0       	ldi	r20, 0x00	; 0
    2482:	61 e0       	ldi	r22, 0x01	; 1
    2484:	80 e2       	ldi	r24, 0x20	; 32
    2486:	0e 94 4b 07 	call	0xe96	; 0xe96 <xQueueGenericCreate>
    248a:	90 93 d3 0d 	sts	0x0DD3, r25	; 0x800dd3 <bufferSendUART0Serial+0x1>
    248e:	80 93 d2 0d 	sts	0x0DD2, r24	; 0x800dd2 <bufferSendUART0Serial>
	bufferReceiveUART0Serial = xQueueCreate(32, sizeof(unsigned char));
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	61 e0       	ldi	r22, 0x01	; 1
    2496:	80 e2       	ldi	r24, 0x20	; 32
    2498:	0e 94 4b 07 	call	0xe96	; 0xe96 <xQueueGenericCreate>
    249c:	90 93 d1 0d 	sts	0x0DD1, r25	; 0x800dd1 <bufferReceiveUART0Serial+0x1>
    24a0:	80 93 d0 0d 	sts	0x0DD0, r24	; 0x800dd0 <bufferReceiveUART0Serial>
	bufferSendUART1Bluetooth = xQueueCreate(32, sizeof(unsigned char));
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	61 e0       	ldi	r22, 0x01	; 1
    24a8:	80 e2       	ldi	r24, 0x20	; 32
    24aa:	0e 94 4b 07 	call	0xe96	; 0xe96 <xQueueGenericCreate>
    24ae:	90 93 d5 0d 	sts	0x0DD5, r25	; 0x800dd5 <bufferSendUART1Bluetooth+0x1>
    24b2:	80 93 d4 0d 	sts	0x0DD4, r24	; 0x800dd4 <bufferSendUART1Bluetooth>
	bufferReceiveUART1Bluetooth = xQueueCreate(32, sizeof(unsigned char));
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	61 e0       	ldi	r22, 0x01	; 1
    24ba:	80 e2       	ldi	r24, 0x20	; 32
    24bc:	0e 94 4b 07 	call	0xe96	; 0xe96 <xQueueGenericCreate>
    24c0:	90 93 b4 0d 	sts	0x0DB4, r25	; 0x800db4 <bufferReceiveUART1Bluetooth+0x1>
    24c4:	80 93 b3 0d 	sts	0x0DB3, r24	; 0x800db3 <bufferReceiveUART1Bluetooth>

	DDRB |= (1 << PB0);
    24c8:	87 b3       	in	r24, 0x17	; 23
    24ca:	81 60       	ori	r24, 0x01	; 1
    24cc:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1 << PB1);
    24ce:	87 b3       	in	r24, 0x17	; 23
    24d0:	82 60       	ori	r24, 0x02	; 2
    24d2:	87 bb       	out	0x17, r24	; 23

	USART_Init();
    24d4:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <USART_Init>

	/* Enable interrupts */
	UCSR0B |= (1 << RXCIE0);
    24d8:	8a b1       	in	r24, 0x0a	; 10
    24da:	80 68       	ori	r24, 0x80	; 128
    24dc:	8a b9       	out	0x0a, r24	; 10
	UCSR1B |= (1 << RXCIE1);
    24de:	ea e9       	ldi	r30, 0x9A	; 154
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	80 68       	ori	r24, 0x80	; 128
    24e6:	80 83       	st	Z, r24
	sei();
    24e8:	78 94       	sei

	/* Create the tasks defined within this file. */
	//xTaskCreate( vRedLED, "RedLED", configMINIMAL_STACK_SIZE, NULL, mainLED_TASK_PRIORITY, NULL );
	//xTaskCreate( vGreenLED, "GreenLED", configMINIMAL_STACK_SIZE, NULL, mainLED_TASK_PRIORITY, NULL );
	xTaskCreate( vUART0TransmitService, "UART0Tx", configMINIMAL_STACK_SIZE, NULL, mainUART_PRIORITY, NULL );
    24ea:	e1 2c       	mov	r14, r1
    24ec:	f1 2c       	mov	r15, r1
    24ee:	02 e0       	ldi	r16, 0x02	; 2
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	45 e5       	ldi	r20, 0x55	; 85
    24f6:	50 e0       	ldi	r21, 0x00	; 0
    24f8:	65 e0       	ldi	r22, 0x05	; 5
    24fa:	71 e0       	ldi	r23, 0x01	; 1
    24fc:	83 ed       	ldi	r24, 0xD3	; 211
    24fe:	91 e1       	ldi	r25, 0x11	; 17
    2500:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <xTaskCreate>
	xTaskCreate( vUART1TransmitService, "UART1Tx", configMINIMAL_STACK_SIZE, NULL, mainUART_PRIORITY, NULL );
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	45 e5       	ldi	r20, 0x55	; 85
    250a:	50 e0       	ldi	r21, 0x00	; 0
    250c:	6d e0       	ldi	r22, 0x0D	; 13
    250e:	71 e0       	ldi	r23, 0x01	; 1
    2510:	83 ec       	ldi	r24, 0xC3	; 195
    2512:	91 e1       	ldi	r25, 0x11	; 17
    2514:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <xTaskCreate>
	xTaskCreate( vUART1ReceiveService, "UART1Rx", configMINIMAL_STACK_SIZE, NULL, mainUART_PRIORITY, NULL );
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	45 e5       	ldi	r20, 0x55	; 85
    251e:	50 e0       	ldi	r21, 0x00	; 0
    2520:	65 e1       	ldi	r22, 0x15	; 21
    2522:	71 e0       	ldi	r23, 0x01	; 1
    2524:	84 ef       	ldi	r24, 0xF4	; 244
    2526:	91 e1       	ldi	r25, 0x11	; 17
    2528:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <xTaskCreate>
	//xTaskCreate( vCyclicalTask, "Cyclical", configMINIMAL_STACK_SIZE, NULL, mainUART_PRIORITY, NULL );

	vTaskStartScheduler();
    252c:	0e 94 30 0c 	call	0x1860	; 0x1860 <vTaskStartScheduler>

	return 0;
}
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	0f 91       	pop	r16
    2536:	ff 90       	pop	r15
    2538:	ef 90       	pop	r14
    253a:	08 95       	ret

0000253c <vApplicationIdleHook>:
	for(uint8_t i = uxQueueMessagesWaiting(queue); i > 0; ++i) {
		xQueueReceive( queue, NULL, 0 );
	}
}

void vApplicationIdleHook( void ) {
    253c:	08 95       	ret

0000253e <__vector_18>:
	//PORTB ^= (1 << PB1);
}

ISR(USART0_RX_vect) {
    253e:	1f 92       	push	r1
    2540:	0f 92       	push	r0
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	0f 92       	push	r0
    2546:	11 24       	eor	r1, r1
    2548:	2f 93       	push	r18
    254a:	3f 93       	push	r19
    254c:	4f 93       	push	r20
    254e:	5f 93       	push	r21
    2550:	6f 93       	push	r22
    2552:	7f 93       	push	r23
    2554:	8f 93       	push	r24
    2556:	9f 93       	push	r25
    2558:	af 93       	push	r26
    255a:	bf 93       	push	r27
    255c:	ef 93       	push	r30
    255e:	ff 93       	push	r31
	/* UART0 receive complete ISR. 
	   Pushes received byte from UDR0 register on bufferReceiveUART0Serial queue. */
	xQueueSendToBackFromISR( bufferReceiveUART0Serial, &UDR0, NULL);
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	40 e0       	ldi	r20, 0x00	; 0
    2564:	50 e0       	ldi	r21, 0x00	; 0
    2566:	6c e2       	ldi	r22, 0x2C	; 44
    2568:	70 e0       	ldi	r23, 0x00	; 0
    256a:	80 91 d0 0d 	lds	r24, 0x0DD0	; 0x800dd0 <bufferReceiveUART0Serial>
    256e:	90 91 d1 0d 	lds	r25, 0x0DD1	; 0x800dd1 <bufferReceiveUART0Serial+0x1>
    2572:	0e 94 07 08 	call	0x100e	; 0x100e <xQueueGenericSendFromISR>
}
    2576:	ff 91       	pop	r31
    2578:	ef 91       	pop	r30
    257a:	bf 91       	pop	r27
    257c:	af 91       	pop	r26
    257e:	9f 91       	pop	r25
    2580:	8f 91       	pop	r24
    2582:	7f 91       	pop	r23
    2584:	6f 91       	pop	r22
    2586:	5f 91       	pop	r21
    2588:	4f 91       	pop	r20
    258a:	3f 91       	pop	r19
    258c:	2f 91       	pop	r18
    258e:	0f 90       	pop	r0
    2590:	0f be       	out	0x3f, r0	; 63
    2592:	0f 90       	pop	r0
    2594:	1f 90       	pop	r1
    2596:	18 95       	reti

00002598 <__vector_30>:

ISR(USART1_RX_vect) {
    2598:	1f 92       	push	r1
    259a:	0f 92       	push	r0
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	0f 92       	push	r0
    25a0:	11 24       	eor	r1, r1
    25a2:	2f 93       	push	r18
    25a4:	3f 93       	push	r19
    25a6:	4f 93       	push	r20
    25a8:	5f 93       	push	r21
    25aa:	6f 93       	push	r22
    25ac:	7f 93       	push	r23
    25ae:	8f 93       	push	r24
    25b0:	9f 93       	push	r25
    25b2:	af 93       	push	r26
    25b4:	bf 93       	push	r27
    25b6:	ef 93       	push	r30
    25b8:	ff 93       	push	r31
/* UART1 receive complete ISR. 
	   Pushes received byte from UDR1 register on bufferReceiveUART1Bluetooth queue. */
	xQueueSendToBackFromISR( bufferReceiveUART1Bluetooth, &UDR1, NULL);
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	40 e0       	ldi	r20, 0x00	; 0
    25be:	50 e0       	ldi	r21, 0x00	; 0
    25c0:	6c e9       	ldi	r22, 0x9C	; 156
    25c2:	70 e0       	ldi	r23, 0x00	; 0
    25c4:	80 91 b3 0d 	lds	r24, 0x0DB3	; 0x800db3 <bufferReceiveUART1Bluetooth>
    25c8:	90 91 b4 0d 	lds	r25, 0x0DB4	; 0x800db4 <bufferReceiveUART1Bluetooth+0x1>
    25cc:	0e 94 07 08 	call	0x100e	; 0x100e <xQueueGenericSendFromISR>
}
    25d0:	ff 91       	pop	r31
    25d2:	ef 91       	pop	r30
    25d4:	bf 91       	pop	r27
    25d6:	af 91       	pop	r26
    25d8:	9f 91       	pop	r25
    25da:	8f 91       	pop	r24
    25dc:	7f 91       	pop	r23
    25de:	6f 91       	pop	r22
    25e0:	5f 91       	pop	r21
    25e2:	4f 91       	pop	r20
    25e4:	3f 91       	pop	r19
    25e6:	2f 91       	pop	r18
    25e8:	0f 90       	pop	r0
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	0f 90       	pop	r0
    25ee:	1f 90       	pop	r1
    25f0:	18 95       	reti

000025f2 <USART_Init>:
#define UBRR_UART0 (uint16_t)(F_CPU/(16*BAUD_UART0)-1)
#define UBRR_UART1 (uint16_t)(F_CPU/(16*BAUD_UART1)-1)

void USART_Init(void) {
	/* Set baud rate UART0 */
	UBRR0H = (uint8_t)(UBRR_UART0>>8);
    25f2:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (uint8_t)UBRR_UART0;
    25f6:	85 e0       	ldi	r24, 0x05	; 5
    25f8:	89 b9       	out	0x09, r24	; 9
	/* Set baud rate UART1 */
	UBRR1H = (uint8_t)(UBRR_UART1>>8);
    25fa:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = (uint8_t)UBRR_UART1;
    25fe:	87 e4       	ldi	r24, 0x47	; 71
    2600:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>

	/* Enable receiver and transmitter UART0 */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    2604:	88 e1       	ldi	r24, 0x18	; 24
    2606:	8a b9       	out	0x0a, r24	; 10
	/* Enable receiver and transmitter UART1 */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
    2608:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
    260c:	08 95       	ret

0000260e <USART_SendByte>:
	/* Wait for empty transmit buffer */
	//while ( !( UCSR0A & (1<<UDRE0)) );
	while(!UDRE0);

	/* Put data into buffer, sends the data */
	UDR0 = data;
    260e:	8c b9       	out	0x0c, r24	; 12
    2610:	08 95       	ret

00002612 <USART0_SendChar>:

	/* Wait for empty transmit buffer */
	while(!UDRE0);

	/* Put data into buffer, sends the data */
	UDR0 = c;
    2612:	8c b9       	out	0x0c, r24	; 12
    2614:	08 95       	ret

00002616 <USART0_SendString>:
}

// Max 256 characters
void USART0_SendString(unsigned char *str) {
    2616:	ac 01       	movw	r20, r24

	for(uint8_t i = 0; str[i] != '\0'; ++i) {
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	04 c0       	rjmp	.+8      	; 0x2624 <USART0_SendString+0xe>
		while(!( UCSR0A & (1<<UDRE0)));		// Wait for empty transmit buffer
    261c:	5d 9b       	sbis	0x0b, 5	; 11
    261e:	fe cf       	rjmp	.-4      	; 0x261c <USART0_SendString+0x6>
		UDR0 = str[i];						// Put character into buffer and send
    2620:	2c b9       	out	0x0c, r18	; 12
}

// Max 256 characters
void USART0_SendString(unsigned char *str) {

	for(uint8_t i = 0; str[i] != '\0'; ++i) {
    2622:	9f 5f       	subi	r25, 0xFF	; 255
    2624:	fa 01       	movw	r30, r20
    2626:	e9 0f       	add	r30, r25
    2628:	f1 1d       	adc	r31, r1
    262a:	20 81       	ld	r18, Z
    262c:	21 11       	cpse	r18, r1
    262e:	f6 cf       	rjmp	.-20     	; 0x261c <USART0_SendString+0x6>
		while(!( UCSR0A & (1<<UDRE0)));		// Wait for empty transmit buffer
		UDR0 = str[i];						// Put character into buffer and send
	}
}
    2630:	08 95       	ret

00002632 <USART_ReceiveByte>:

// Wait until a byte has been received and return received data
uint8_t USART_ReceiveByte() {
	while((UCSR0A &(1<<RXC)) == 0);
    2632:	5f 9b       	sbis	0x0b, 7	; 11
    2634:	fe cf       	rjmp	.-4      	; 0x2632 <USART_ReceiveByte>
	return UDR0;
    2636:	8c b1       	in	r24, 0x0c	; 12
    2638:	08 95       	ret

0000263a <makeMessage>:
#include "message.h"
#include "msgHeaders.h"

void makeMessage(Message* message, uint8_t type, uint8_t id, uint8_t* data) {
    263a:	fc 01       	movw	r30, r24
	message->type = type;
    263c:	60 83       	st	Z, r22
	message->id = id;
    263e:	41 83       	std	Z+1, r20	; 0x01
	message->data = data;
    2640:	33 83       	std	Z+3, r19	; 0x03
    2642:	22 83       	std	Z+2, r18	; 0x02
    2644:	08 95       	ret

00002646 <getMessage>:
}

void getMessage(Message* message, uint8_t* buffer) {
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
    264a:	ec 01       	movw	r28, r24
    264c:	db 01       	movw	r26, r22
	uint8_t c = 0;
	buffer[c++] = START;
    264e:	8b e7       	ldi	r24, 0x7B	; 123
    2650:	8c 93       	st	X, r24
	buffer[c++] = message->type;
    2652:	88 81       	ld	r24, Y
    2654:	11 96       	adiw	r26, 0x01	; 1
    2656:	8c 93       	st	X, r24
    2658:	11 97       	sbiw	r26, 0x01	; 1
	buffer[c++] = message->id;
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	12 96       	adiw	r26, 0x02	; 2
    265e:	8c 93       	st	X, r24
    2660:	12 97       	sbiw	r26, 0x02	; 2
	switch(message->type) {
    2662:	88 81       	ld	r24, Y
    2664:	81 34       	cpi	r24, 0x41	; 65
    2666:	49 f0       	breq	.+18     	; 0x267a <getMessage+0x34>
    2668:	13 c0       	rjmp	.+38     	; 0x2690 <getMessage+0x4a>
		case TEXT:
			for(int i = 0; message->data[i] != 0; ++i) {
				buffer[c++] = message->data[i];
    266a:	fd 01       	movw	r30, r26
    266c:	e9 0f       	add	r30, r25
    266e:	f1 1d       	adc	r31, r1
    2670:	40 83       	st	Z, r20
	buffer[c++] = START;
	buffer[c++] = message->type;
	buffer[c++] = message->id;
	switch(message->type) {
		case TEXT:
			for(int i = 0; message->data[i] != 0; ++i) {
    2672:	2f 5f       	subi	r18, 0xFF	; 255
    2674:	3f 4f       	sbci	r19, 0xFF	; 255
				buffer[c++] = message->data[i];
    2676:	9f 5f       	subi	r25, 0xFF	; 255
    2678:	03 c0       	rjmp	.+6      	; 0x2680 <getMessage+0x3a>
void getMessage(Message* message, uint8_t* buffer) {
	uint8_t c = 0;
	buffer[c++] = START;
	buffer[c++] = message->type;
	buffer[c++] = message->id;
	switch(message->type) {
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	93 e0       	ldi	r25, 0x03	; 3
		case TEXT:
			for(int i = 0; message->data[i] != 0; ++i) {
    2680:	ea 81       	ldd	r30, Y+2	; 0x02
    2682:	fb 81       	ldd	r31, Y+3	; 0x03
    2684:	e2 0f       	add	r30, r18
    2686:	f3 1f       	adc	r31, r19
    2688:	40 81       	ld	r20, Z
    268a:	41 11       	cpse	r20, r1
    268c:	ee cf       	rjmp	.-36     	; 0x266a <getMessage+0x24>
    268e:	07 c0       	rjmp	.+14     	; 0x269e <getMessage+0x58>
			}
			break;
		case LIGHT_SENSOR:
		case SOUND_SENSOR:
		default:
			buffer[c++] = *(message->data);
    2690:	ea 81       	ldd	r30, Y+2	; 0x02
    2692:	fb 81       	ldd	r31, Y+3	; 0x03
    2694:	80 81       	ld	r24, Z
    2696:	13 96       	adiw	r26, 0x03	; 3
    2698:	8c 93       	st	X, r24
    269a:	13 97       	sbiw	r26, 0x03	; 3
    269c:	94 e0       	ldi	r25, 0x04	; 4
			break;
	}
	buffer[c++] = END;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	89 0f       	add	r24, r25
    26a2:	fd 01       	movw	r30, r26
    26a4:	e9 0f       	add	r30, r25
    26a6:	f1 1d       	adc	r31, r1
    26a8:	9d e7       	ldi	r25, 0x7D	; 125
    26aa:	90 83       	st	Z, r25
	buffer[c] = 0;
    26ac:	a8 0f       	add	r26, r24
    26ae:	b1 1d       	adc	r27, r1
    26b0:	1c 92       	st	X, r1
}
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	08 95       	ret

000026b8 <xSerialPortInitMinimal>:
	UCSR0B = ucInByte;										\
}
/*-----------------------------------------------------------*/

xComPortHandle xSerialPortInitMinimal( unsigned long ulWantedBaud, unsigned portBASE_TYPE uxQueueLength )
{
    26b8:	cf 92       	push	r12
    26ba:	df 92       	push	r13
    26bc:	ef 92       	push	r14
    26be:	ff 92       	push	r15
    26c0:	cf 93       	push	r28
    26c2:	6b 01       	movw	r12, r22
    26c4:	7c 01       	movw	r14, r24
    26c6:	c4 2f       	mov	r28, r20
unsigned long ulBaudRateCounter;
unsigned char ucByte;

	portENTER_CRITICAL();
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	0f 92       	push	r0
	{
		/* Create the queues used by the com test task. */
		xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
    26ce:	40 e0       	ldi	r20, 0x00	; 0
    26d0:	61 e0       	ldi	r22, 0x01	; 1
    26d2:	8c 2f       	mov	r24, r28
    26d4:	0e 94 4b 07 	call	0xe96	; 0xe96 <xQueueGenericCreate>
    26d8:	90 93 b2 0d 	sts	0x0DB2, r25	; 0x800db2 <xRxedChars+0x1>
    26dc:	80 93 b1 0d 	sts	0x0DB1, r24	; 0x800db1 <xRxedChars>
		xCharsForTx = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	61 e0       	ldi	r22, 0x01	; 1
    26e4:	8c 2f       	mov	r24, r28
    26e6:	0e 94 4b 07 	call	0xe96	; 0xe96 <xQueueGenericCreate>
    26ea:	90 93 b0 0d 	sts	0x0DB0, r25	; 0x800db0 <xCharsForTx+0x1>
    26ee:	80 93 af 0d 	sts	0x0DAF, r24	; 0x800daf <xCharsForTx>

		/* Calculate the baud rate register value from the equation in the
		data sheet. */
		ulBaudRateCounter = ( configCPU_CLOCK_HZ / ( serBAUD_DIV_CONSTANT * ulWantedBaud ) ) - ( unsigned long ) 1;
    26f2:	d7 01       	movw	r26, r14
    26f4:	c6 01       	movw	r24, r12
    26f6:	88 0f       	add	r24, r24
    26f8:	99 1f       	adc	r25, r25
    26fa:	aa 1f       	adc	r26, r26
    26fc:	bb 1f       	adc	r27, r27
    26fe:	88 0f       	add	r24, r24
    2700:	99 1f       	adc	r25, r25
    2702:	aa 1f       	adc	r26, r26
    2704:	bb 1f       	adc	r27, r27
    2706:	9c 01       	movw	r18, r24
    2708:	ad 01       	movw	r20, r26
    270a:	22 0f       	add	r18, r18
    270c:	33 1f       	adc	r19, r19
    270e:	44 1f       	adc	r20, r20
    2710:	55 1f       	adc	r21, r21
    2712:	22 0f       	add	r18, r18
    2714:	33 1f       	adc	r19, r19
    2716:	44 1f       	adc	r20, r20
    2718:	55 1f       	adc	r21, r21
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	70 ec       	ldi	r23, 0xC0	; 192
    271e:	88 ea       	ldi	r24, 0xA8	; 168
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__udivmodsi4>
    2726:	da 01       	movw	r26, r20
    2728:	c9 01       	movw	r24, r18
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	a1 09       	sbc	r26, r1
    272e:	b1 09       	sbc	r27, r1

		/* Set the baud rate. */	
		ucByte = ( unsigned char ) ( ulBaudRateCounter & ( unsigned long ) 0xff );	
		UBRR0L = ucByte;
    2730:	89 b9       	out	0x09, r24	; 9

		ulBaudRateCounter >>= ( unsigned long ) 8;
    2732:	89 2f       	mov	r24, r25
    2734:	9a 2f       	mov	r25, r26
    2736:	ab 2f       	mov	r26, r27
    2738:	bb 27       	eor	r27, r27
		ucByte = ( unsigned char ) ( ulBaudRateCounter & ( unsigned long ) 0xff );	
		UBRR0H = ucByte;
    273a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>

		/* Enable the Rx interrupt.  The Tx interrupt will get enabled
		later. Also enable the Rx and Tx. */
		UCSR0B = ( serRX_INT_ENABLE | serRX_ENABLE | serTX_ENABLE );
    273e:	88 e9       	ldi	r24, 0x98	; 152
    2740:	8a b9       	out	0x0a, r24	; 10

		/* Set the data bits to 8. */
		UCSR0C = ( serUCSRC_SELECT | serEIGHT_DATA_BITS );
    2742:	86 e8       	ldi	r24, 0x86	; 134
    2744:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	}
	portEXIT_CRITICAL();
    2748:	0f 90       	pop	r0
    274a:	0f be       	out	0x3f, r0	; 63
	
	/* Unlike other ports, this serial code does not allow for more than one
	com port.  We therefore don't return a pointer to a port structure and can
	instead just return NULL. */
	return NULL;
}
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	cf 91       	pop	r28
    2752:	ff 90       	pop	r15
    2754:	ef 90       	pop	r14
    2756:	df 90       	pop	r13
    2758:	cf 90       	pop	r12
    275a:	08 95       	ret

0000275c <xSerialGetChar>:
	/* Only one port is supported. */
	( void ) pxPort;

	/* Get the next character from the buffer.  Return false if no characters
	are available, or arrive before xBlockTime expires. */
	if( xQueueReceive( xRxedChars, pcRxedChar, xBlockTime ) )
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	80 91 b1 0d 	lds	r24, 0x0DB1	; 0x800db1 <xRxedChars>
    2762:	90 91 b2 0d 	lds	r25, 0x0DB2	; 0x800db2 <xRxedChars+0x1>
    2766:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <xQueueGenericReceive>
    276a:	81 11       	cpse	r24, r1
	{
		return pdTRUE;
    276c:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return pdFALSE;
	}
}
    276e:	08 95       	ret

00002770 <xSerialPutChar>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xSerialPutChar( xComPortHandle pxPort, signed char cOutChar, TickType_t xBlockTime )
{
    2770:	cf 93       	push	r28
    2772:	df 93       	push	r29
    2774:	1f 92       	push	r1
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
    277a:	69 83       	std	Y+1, r22	; 0x01
	/* Only one port is supported. */
	( void ) pxPort;

	/* Return false if after the block time there is no room on the Tx queue. */
	if( xQueueSend( xCharsForTx, &cOutChar, xBlockTime ) != pdPASS )
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	be 01       	movw	r22, r28
    2780:	6f 5f       	subi	r22, 0xFF	; 255
    2782:	7f 4f       	sbci	r23, 0xFF	; 255
    2784:	80 91 af 0d 	lds	r24, 0x0DAF	; 0x800daf <xCharsForTx>
    2788:	90 91 b0 0d 	lds	r25, 0x0DB0	; 0x800db0 <xCharsForTx+0x1>
    278c:	0e 94 75 07 	call	0xeea	; 0xeea <xQueueGenericSend>
    2790:	81 30       	cpi	r24, 0x01	; 1
    2792:	21 f4       	brne	.+8      	; 0x279c <xSerialPutChar+0x2c>
	{
		return pdFAIL;
	}

	vInterruptOn();
    2794:	9a b1       	in	r25, 0x0a	; 10
    2796:	90 62       	ori	r25, 0x20	; 32
    2798:	9a b9       	out	0x0a, r25	; 10

	return pdPASS;
    279a:	01 c0       	rjmp	.+2      	; 0x279e <xSerialPutChar+0x2e>
	( void ) pxPort;

	/* Return false if after the block time there is no room on the Tx queue. */
	if( xQueueSend( xCharsForTx, &cOutChar, xBlockTime ) != pdPASS )
	{
		return pdFAIL;
    279c:	80 e0       	ldi	r24, 0x00	; 0
	}

	vInterruptOn();

	return pdPASS;
}
    279e:	0f 90       	pop	r0
    27a0:	df 91       	pop	r29
    27a2:	cf 91       	pop	r28
    27a4:	08 95       	ret

000027a6 <vSerialClose>:
	( void ) xPort;

	/* Turn off the interrupts.  We may also want to delete the queues and/or
	re-install the original ISR. */

	portENTER_CRITICAL();
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	0f 92       	push	r0
	{
		vInterruptOff();
    27ac:	8a b1       	in	r24, 0x0a	; 10
    27ae:	8f 7d       	andi	r24, 0xDF	; 223
    27b0:	8a b9       	out	0x0a, r24	; 10
		ucByte = UCSR0B;
    27b2:	8a b1       	in	r24, 0x0a	; 10
		ucByte &= ~serRX_INT_ENABLE;
    27b4:	8f 77       	andi	r24, 0x7F	; 127
		UCSR0B = ucByte;
    27b6:	8a b9       	out	0x0a, r24	; 10
	}
	portEXIT_CRITICAL();
    27b8:	0f 90       	pop	r0
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	08 95       	ret

000027be <SIG_UART_RECV>:
}
/*-----------------------------------------------------------*/

SIGNAL( SIG_UART_RECV )
{
    27be:	1f 92       	push	r1
    27c0:	0f 92       	push	r0
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	0f 92       	push	r0
    27c6:	11 24       	eor	r1, r1
    27c8:	2f 93       	push	r18
    27ca:	3f 93       	push	r19
    27cc:	4f 93       	push	r20
    27ce:	5f 93       	push	r21
    27d0:	6f 93       	push	r22
    27d2:	7f 93       	push	r23
    27d4:	8f 93       	push	r24
    27d6:	9f 93       	push	r25
    27d8:	af 93       	push	r26
    27da:	bf 93       	push	r27
    27dc:	ef 93       	push	r30
    27de:	ff 93       	push	r31
    27e0:	cf 93       	push	r28
    27e2:	df 93       	push	r29
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <SIG_UART_RECV+0x28>
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
signed char cChar;
signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
    27ea:	1a 82       	std	Y+2, r1	; 0x02

	/* Get the character and post it on the queue of Rxed characters.
	If the post causes a task to wake force a context switch as the woken task
	may have a higher priority than the task we have interrupted. */
	cChar = UDR0;
    27ec:	8c b1       	in	r24, 0x0c	; 12
    27ee:	89 83       	std	Y+1, r24	; 0x01

	xQueueSendFromISR( xRxedChars, &cChar, &xHigherPriorityTaskWoken );
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	ae 01       	movw	r20, r28
    27f4:	4e 5f       	subi	r20, 0xFE	; 254
    27f6:	5f 4f       	sbci	r21, 0xFF	; 255
    27f8:	be 01       	movw	r22, r28
    27fa:	6f 5f       	subi	r22, 0xFF	; 255
    27fc:	7f 4f       	sbci	r23, 0xFF	; 255
    27fe:	80 91 b1 0d 	lds	r24, 0x0DB1	; 0x800db1 <xRxedChars>
    2802:	90 91 b2 0d 	lds	r25, 0x0DB2	; 0x800db2 <xRxedChars+0x1>
    2806:	0e 94 07 08 	call	0x100e	; 0x100e <xQueueGenericSendFromISR>

	if( xHigherPriorityTaskWoken != pdFALSE )
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	81 11       	cpse	r24, r1
	{
		taskYIELD();
    280e:	0e 94 44 05 	call	0xa88	; 0xa88 <vPortYield>
	}
}
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	ff 91       	pop	r31
    281c:	ef 91       	pop	r30
    281e:	bf 91       	pop	r27
    2820:	af 91       	pop	r26
    2822:	9f 91       	pop	r25
    2824:	8f 91       	pop	r24
    2826:	7f 91       	pop	r23
    2828:	6f 91       	pop	r22
    282a:	5f 91       	pop	r21
    282c:	4f 91       	pop	r20
    282e:	3f 91       	pop	r19
    2830:	2f 91       	pop	r18
    2832:	0f 90       	pop	r0
    2834:	0f be       	out	0x3f, r0	; 63
    2836:	0f 90       	pop	r0
    2838:	1f 90       	pop	r1
    283a:	18 95       	reti

0000283c <SIG_UART_DATA>:
/*-----------------------------------------------------------*/

SIGNAL( SIG_UART_DATA )
{
    283c:	1f 92       	push	r1
    283e:	0f 92       	push	r0
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	0f 92       	push	r0
    2844:	11 24       	eor	r1, r1
    2846:	2f 93       	push	r18
    2848:	3f 93       	push	r19
    284a:	4f 93       	push	r20
    284c:	5f 93       	push	r21
    284e:	6f 93       	push	r22
    2850:	7f 93       	push	r23
    2852:	8f 93       	push	r24
    2854:	9f 93       	push	r25
    2856:	af 93       	push	r26
    2858:	bf 93       	push	r27
    285a:	ef 93       	push	r30
    285c:	ff 93       	push	r31
    285e:	cf 93       	push	r28
    2860:	df 93       	push	r29
    2862:	00 d0       	rcall	.+0      	; 0x2864 <SIG_UART_DATA+0x28>
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
signed char cChar, cTaskWoken;

	if( xQueueReceiveFromISR( xCharsForTx, &cChar, &cTaskWoken ) == pdTRUE )
    2868:	ae 01       	movw	r20, r28
    286a:	4e 5f       	subi	r20, 0xFE	; 254
    286c:	5f 4f       	sbci	r21, 0xFF	; 255
    286e:	be 01       	movw	r22, r28
    2870:	6f 5f       	subi	r22, 0xFF	; 255
    2872:	7f 4f       	sbci	r23, 0xFF	; 255
    2874:	80 91 af 0d 	lds	r24, 0x0DAF	; 0x800daf <xCharsForTx>
    2878:	90 91 b0 0d 	lds	r25, 0x0DB0	; 0x800db0 <xCharsForTx+0x1>
    287c:	0e 94 13 09 	call	0x1226	; 0x1226 <xQueueReceiveFromISR>
    2880:	81 30       	cpi	r24, 0x01	; 1
    2882:	19 f4       	brne	.+6      	; 0x288a <SIG_UART_DATA+0x4e>
	{
		/* Send the next character queued for Tx. */
		UDR0 = cChar;
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	8c b9       	out	0x0c, r24	; 12
    2888:	03 c0       	rjmp	.+6      	; 0x2890 <SIG_UART_DATA+0x54>
	}
	else
	{
		/* Queue empty, nothing to send. */
		vInterruptOff();
    288a:	8a b1       	in	r24, 0x0a	; 10
    288c:	8f 7d       	andi	r24, 0xDF	; 223
    288e:	8a b9       	out	0x0a, r24	; 10
	}
}
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	df 91       	pop	r29
    2896:	cf 91       	pop	r28
    2898:	ff 91       	pop	r31
    289a:	ef 91       	pop	r30
    289c:	bf 91       	pop	r27
    289e:	af 91       	pop	r26
    28a0:	9f 91       	pop	r25
    28a2:	8f 91       	pop	r24
    28a4:	7f 91       	pop	r23
    28a6:	6f 91       	pop	r22
    28a8:	5f 91       	pop	r21
    28aa:	4f 91       	pop	r20
    28ac:	3f 91       	pop	r19
    28ae:	2f 91       	pop	r18
    28b0:	0f 90       	pop	r0
    28b2:	0f be       	out	0x3f, r0	; 63
    28b4:	0f 90       	pop	r0
    28b6:	1f 90       	pop	r1
    28b8:	18 95       	reti

000028ba <__udivmodsi4>:
    28ba:	a1 e2       	ldi	r26, 0x21	; 33
    28bc:	1a 2e       	mov	r1, r26
    28be:	aa 1b       	sub	r26, r26
    28c0:	bb 1b       	sub	r27, r27
    28c2:	fd 01       	movw	r30, r26
    28c4:	0d c0       	rjmp	.+26     	; 0x28e0 <__udivmodsi4_ep>

000028c6 <__udivmodsi4_loop>:
    28c6:	aa 1f       	adc	r26, r26
    28c8:	bb 1f       	adc	r27, r27
    28ca:	ee 1f       	adc	r30, r30
    28cc:	ff 1f       	adc	r31, r31
    28ce:	a2 17       	cp	r26, r18
    28d0:	b3 07       	cpc	r27, r19
    28d2:	e4 07       	cpc	r30, r20
    28d4:	f5 07       	cpc	r31, r21
    28d6:	20 f0       	brcs	.+8      	; 0x28e0 <__udivmodsi4_ep>
    28d8:	a2 1b       	sub	r26, r18
    28da:	b3 0b       	sbc	r27, r19
    28dc:	e4 0b       	sbc	r30, r20
    28de:	f5 0b       	sbc	r31, r21

000028e0 <__udivmodsi4_ep>:
    28e0:	66 1f       	adc	r22, r22
    28e2:	77 1f       	adc	r23, r23
    28e4:	88 1f       	adc	r24, r24
    28e6:	99 1f       	adc	r25, r25
    28e8:	1a 94       	dec	r1
    28ea:	69 f7       	brne	.-38     	; 0x28c6 <__udivmodsi4_loop>
    28ec:	60 95       	com	r22
    28ee:	70 95       	com	r23
    28f0:	80 95       	com	r24
    28f2:	90 95       	com	r25
    28f4:	9b 01       	movw	r18, r22
    28f6:	ac 01       	movw	r20, r24
    28f8:	bd 01       	movw	r22, r26
    28fa:	cf 01       	movw	r24, r30
    28fc:	08 95       	ret

000028fe <__tablejump2__>:
    28fe:	ee 0f       	add	r30, r30
    2900:	ff 1f       	adc	r31, r31
    2902:	05 90       	lpm	r0, Z+
    2904:	f4 91       	lpm	r31, Z
    2906:	e0 2d       	mov	r30, r0
    2908:	09 94       	ijmp

0000290a <memcpy>:
    290a:	fb 01       	movw	r30, r22
    290c:	dc 01       	movw	r26, r24
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <memcpy+0xa>
    2910:	01 90       	ld	r0, Z+
    2912:	0d 92       	st	X+, r0
    2914:	41 50       	subi	r20, 0x01	; 1
    2916:	50 40       	sbci	r21, 0x00	; 0
    2918:	d8 f7       	brcc	.-10     	; 0x2910 <memcpy+0x6>
    291a:	08 95       	ret

0000291c <_exit>:
    291c:	f8 94       	cli

0000291e <__stop_program>:
    291e:	ff cf       	rjmp	.-2      	; 0x291e <__stop_program>
